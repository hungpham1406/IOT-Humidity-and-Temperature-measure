
Humidity_and_Temperature_measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08006838  08006838  00016838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c54  08006c54  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c5c  08006c5c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000000e0  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c0  200002c0  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d64b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fb9  00000000  00000000  0002d85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  0002f818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a90  00000000  00000000  000303a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021dcb  00000000  00000000  00030e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c24d  00000000  00000000  00052bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca32f  00000000  00000000  0005ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00129177  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000407c  00000000  00000000  001291cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800681c 	.word	0x0800681c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800681c 	.word	0x0800681c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <microDelay>:
 */

#include "DHT11.h"

void microDelay (uint16_t delay)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <microDelay+0x30>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8000f52:	bf00      	nop
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <microDelay+0x30>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d3f9      	bcc.n	8000f54 <microDelay+0x14>
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000238 	.word	0x20000238

08000f74 <display_Temp>:

void display_Temp(float Temp) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[30];
	setCursor(0, 0);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 fb9f 	bl	80016c4 <setCursor>
	print("Temp: ");
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <display_Temp+0x40>)
 8000f88:	f000 fbe4 	bl	8001754 <print>
	sprintf(str, "%.1f", Temp);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff fadb 	bl	8000548 <__aeabi_f2d>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	f107 0008 	add.w	r0, r7, #8
 8000f9a:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <display_Temp+0x44>)
 8000f9c:	f003 fa12 	bl	80043c4 <siprintf>
	print(str);
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 fbd5 	bl	8001754 <print>
}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08006838 	.word	0x08006838
 8000fb8:	08006840 	.word	0x08006840

08000fbc <display_Humid>:

void display_Humid(float RH) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[30];
	setCursor(0, 1);
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 fb7b 	bl	80016c4 <setCursor>
	print("Humidity: ");
 8000fce:	480b      	ldr	r0, [pc, #44]	; (8000ffc <display_Humid+0x40>)
 8000fd0:	f000 fbc0 	bl	8001754 <print>
	sprintf(str, "%.1f", RH);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff fab7 	bl	8000548 <__aeabi_f2d>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	f107 0008 	add.w	r0, r7, #8
 8000fe2:	4907      	ldr	r1, [pc, #28]	; (8001000 <display_Humid+0x44>)
 8000fe4:	f003 f9ee 	bl	80043c4 <siprintf>
	print(str);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fbb1 	bl	8001754 <print>
}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	08006848 	.word	0x08006848
 8001000:	08006840 	.word	0x08006840

08001004 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 800101c:	2304      	movs	r3, #4
 800101e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	482a      	ldr	r0, [pc, #168]	; (80010dc <DHT11_Start+0xd8>)
 8001032:	f001 fa19 	bl	8002468 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001036:	2200      	movs	r2, #0
 8001038:	2104      	movs	r1, #4
 800103a:	4828      	ldr	r0, [pc, #160]	; (80010dc <DHT11_Start+0xd8>)
 800103c:	f001 fbc8 	bl	80027d0 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001040:	2014      	movs	r0, #20
 8001042:	f001 f8db 	bl	80021fc <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001046:	2201      	movs	r2, #1
 8001048:	2104      	movs	r1, #4
 800104a:	4824      	ldr	r0, [pc, #144]	; (80010dc <DHT11_Start+0xd8>)
 800104c:	f001 fbc0 	bl	80027d0 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8001050:	201e      	movs	r0, #30
 8001052:	f7ff ff75 	bl	8000f40 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 800105a:	2301      	movs	r3, #1
 800105c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	481e      	ldr	r0, [pc, #120]	; (80010dc <DHT11_Start+0xd8>)
 8001064:	f001 fa00 	bl	8002468 <HAL_GPIO_Init>
  microDelay (40);
 8001068:	2028      	movs	r0, #40	; 0x28
 800106a:	f7ff ff69 	bl	8000f40 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800106e:	2104      	movs	r1, #4
 8001070:	481a      	ldr	r0, [pc, #104]	; (80010dc <DHT11_Start+0xd8>)
 8001072:	f001 fb95 	bl	80027a0 <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10b      	bne.n	8001094 <DHT11_Start+0x90>
  {
    microDelay (80);
 800107c:	2050      	movs	r0, #80	; 0x50
 800107e:	f7ff ff5f 	bl	8000f40 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001082:	2104      	movs	r1, #4
 8001084:	4815      	ldr	r0, [pc, #84]	; (80010dc <DHT11_Start+0xd8>)
 8001086:	f001 fb8b 	bl	80027a0 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <DHT11_Start+0x90>
 8001090:	2301      	movs	r3, #1
 8001092:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001094:	f001 f8a6 	bl	80021e4 <HAL_GetTick>
 8001098:	4603      	mov	r3, r0
 800109a:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <DHT11_Start+0xdc>)
 800109c:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 800109e:	f001 f8a1 	bl	80021e4 <HAL_GetTick>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <DHT11_Start+0xe0>)
 80010a6:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010a8:	e004      	b.n	80010b4 <DHT11_Start+0xb0>
  {
    cMillis = HAL_GetTick();
 80010aa:	f001 f89b 	bl	80021e4 <HAL_GetTick>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <DHT11_Start+0xe0>)
 80010b2:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010b4:	2104      	movs	r1, #4
 80010b6:	4809      	ldr	r0, [pc, #36]	; (80010dc <DHT11_Start+0xd8>)
 80010b8:	f001 fb72 	bl	80027a0 <HAL_GPIO_ReadPin>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <DHT11_Start+0xcc>
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <DHT11_Start+0xdc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	1c9a      	adds	r2, r3, #2
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <DHT11_Start+0xe0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8ec      	bhi.n	80010aa <DHT11_Start+0xa6>
  }
  return Response;
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40020000 	.word	0x40020000
 80010e0:	20000234 	.word	0x20000234
 80010e4:	20000230 	.word	0x20000230

080010e8 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	e063      	b.n	80011bc <DHT11_Read+0xd4>
  {
    pMillis = HAL_GetTick();
 80010f4:	f001 f876 	bl	80021e4 <HAL_GetTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a34      	ldr	r2, [pc, #208]	; (80011cc <DHT11_Read+0xe4>)
 80010fc:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80010fe:	f001 f871 	bl	80021e4 <HAL_GetTick>
 8001102:	4603      	mov	r3, r0
 8001104:	4a32      	ldr	r2, [pc, #200]	; (80011d0 <DHT11_Read+0xe8>)
 8001106:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001108:	e004      	b.n	8001114 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 800110a:	f001 f86b 	bl	80021e4 <HAL_GetTick>
 800110e:	4603      	mov	r3, r0
 8001110:	4a2f      	ldr	r2, [pc, #188]	; (80011d0 <DHT11_Read+0xe8>)
 8001112:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001114:	2104      	movs	r1, #4
 8001116:	482f      	ldr	r0, [pc, #188]	; (80011d4 <DHT11_Read+0xec>)
 8001118:	f001 fb42 	bl	80027a0 <HAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d106      	bne.n	8001130 <DHT11_Read+0x48>
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <DHT11_Read+0xe4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	1c9a      	adds	r2, r3, #2
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <DHT11_Read+0xe8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8ec      	bhi.n	800110a <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8001130:	2028      	movs	r0, #40	; 0x28
 8001132:	f7ff ff05 	bl	8000f40 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001136:	2104      	movs	r1, #4
 8001138:	4826      	ldr	r0, [pc, #152]	; (80011d4 <DHT11_Read+0xec>)
 800113a:	f001 fb31 	bl	80027a0 <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10e      	bne.n	8001162 <DHT11_Read+0x7a>
      b&= ~(1<<(7-a));
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2201      	movs	r2, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	b25b      	sxtb	r3, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	b25a      	sxtb	r2, r3
 8001156:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800115a:	4013      	ands	r3, r2
 800115c:	b25b      	sxtb	r3, r3
 800115e:	71bb      	strb	r3, [r7, #6]
 8001160:	e00b      	b.n	800117a <DHT11_Read+0x92>
    else
      b|= (1<<(7-a));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f1c3 0307 	rsb	r3, r3, #7
 8001168:	2201      	movs	r2, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	b25a      	sxtb	r2, r3
 8001170:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001174:	4313      	orrs	r3, r2
 8001176:	b25b      	sxtb	r3, r3
 8001178:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 800117a:	f001 f833 	bl	80021e4 <HAL_GetTick>
 800117e:	4603      	mov	r3, r0
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <DHT11_Read+0xe4>)
 8001182:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001184:	f001 f82e 	bl	80021e4 <HAL_GetTick>
 8001188:	4603      	mov	r3, r0
 800118a:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <DHT11_Read+0xe8>)
 800118c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800118e:	e004      	b.n	800119a <DHT11_Read+0xb2>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001190:	f001 f828 	bl	80021e4 <HAL_GetTick>
 8001194:	4603      	mov	r3, r0
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <DHT11_Read+0xe8>)
 8001198:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800119a:	2104      	movs	r1, #4
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <DHT11_Read+0xec>)
 800119e:	f001 faff 	bl	80027a0 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <DHT11_Read+0xce>
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <DHT11_Read+0xe4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	1c9a      	adds	r2, r3, #2
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <DHT11_Read+0xe8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d8ec      	bhi.n	8001190 <DHT11_Read+0xa8>
  for (a=0;a<8;a++)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	3301      	adds	r3, #1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b07      	cmp	r3, #7
 80011c0:	d998      	bls.n	80010f4 <DHT11_Read+0xc>
    }
  }
  return b;
 80011c2:	79bb      	ldrb	r3, [r7, #6]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000234 	.word	0x20000234
 80011d0:	20000230 	.word	0x20000230
 80011d4:	40020000 	.word	0x40020000

080011d8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	; 0x38
 80011dc:	af0a      	add	r7, sp, #40	; 0x28
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	4608      	mov	r0, r1
 80011e2:	4611      	mov	r1, r2
 80011e4:	461a      	mov	r2, r3
 80011e6:	4603      	mov	r3, r0
 80011e8:	817b      	strh	r3, [r7, #10]
 80011ea:	460b      	mov	r3, r1
 80011ec:	813b      	strh	r3, [r7, #8]
 80011ee:	4613      	mov	r3, r2
 80011f0:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <LiquidCrystal+0x90>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d019      	beq.n	800122e <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80011fa:	8939      	ldrh	r1, [r7, #8]
 80011fc:	897a      	ldrh	r2, [r7, #10]
 80011fe:	2300      	movs	r3, #0
 8001200:	9308      	str	r3, [sp, #32]
 8001202:	2300      	movs	r3, #0
 8001204:	9307      	str	r3, [sp, #28]
 8001206:	2300      	movs	r3, #0
 8001208:	9306      	str	r3, [sp, #24]
 800120a:	2300      	movs	r3, #0
 800120c:	9305      	str	r3, [sp, #20]
 800120e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001210:	9304      	str	r3, [sp, #16]
 8001212:	8c3b      	ldrh	r3, [r7, #32]
 8001214:	9303      	str	r3, [sp, #12]
 8001216:	8bbb      	ldrh	r3, [r7, #28]
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	8b3b      	ldrh	r3, [r7, #24]
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	460b      	mov	r3, r1
 8001224:	68f9      	ldr	r1, [r7, #12]
 8001226:	2001      	movs	r0, #1
 8001228:	f000 f820 	bl	800126c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 800122c:	e018      	b.n	8001260 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800122e:	8939      	ldrh	r1, [r7, #8]
 8001230:	897a      	ldrh	r2, [r7, #10]
 8001232:	2300      	movs	r3, #0
 8001234:	9308      	str	r3, [sp, #32]
 8001236:	2300      	movs	r3, #0
 8001238:	9307      	str	r3, [sp, #28]
 800123a:	2300      	movs	r3, #0
 800123c:	9306      	str	r3, [sp, #24]
 800123e:	2300      	movs	r3, #0
 8001240:	9305      	str	r3, [sp, #20]
 8001242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001244:	9304      	str	r3, [sp, #16]
 8001246:	8c3b      	ldrh	r3, [r7, #32]
 8001248:	9303      	str	r3, [sp, #12]
 800124a:	8bbb      	ldrh	r3, [r7, #28]
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	8b3b      	ldrh	r3, [r7, #24]
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	460b      	mov	r3, r1
 8001258:	68f9      	ldr	r1, [r7, #12]
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f806 	bl	800126c <init>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000000 	.word	0x20000000

0800126c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	4611      	mov	r1, r2
 8001276:	461a      	mov	r2, r3
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	460b      	mov	r3, r1
 800127e:	81bb      	strh	r3, [r7, #12]
 8001280:	4613      	mov	r3, r2
 8001282:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8001284:	4a1a      	ldr	r2, [pc, #104]	; (80012f0 <init+0x84>)
 8001286:	89bb      	ldrh	r3, [r7, #12]
 8001288:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 800128a:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <init+0x88>)
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8001290:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <init+0x8c>)
 8001292:	8b3b      	ldrh	r3, [r7, #24]
 8001294:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8001296:	4a19      	ldr	r2, [pc, #100]	; (80012fc <init+0x90>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 800129c:	4a18      	ldr	r2, [pc, #96]	; (8001300 <init+0x94>)
 800129e:	8bbb      	ldrh	r3, [r7, #28]
 80012a0:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <init+0x94>)
 80012a4:	8c3b      	ldrh	r3, [r7, #32]
 80012a6:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 80012a8:	4a15      	ldr	r2, [pc, #84]	; (8001300 <init+0x94>)
 80012aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012ac:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <init+0x94>)
 80012b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012b2:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <init+0x94>)
 80012b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012b8:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80012ba:	4a11      	ldr	r2, [pc, #68]	; (8001300 <init+0x94>)
 80012bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80012be:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80012c0:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <init+0x94>)
 80012c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012c4:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <init+0x94>)
 80012c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80012ca:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e002      	b.n	80012e0 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <init+0x98>)
 80012dc:	2210      	movs	r2, #16
 80012de:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 80012e0:	2102      	movs	r1, #2
 80012e2:	2010      	movs	r0, #16
 80012e4:	f000 f810 	bl	8001308 <begin>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200002a4 	.word	0x200002a4
 80012f4:	20000284 	.word	0x20000284
 80012f8:	200002a2 	.word	0x200002a2
 80012fc:	20000288 	.word	0x20000288
 8001300:	20000290 	.word	0x20000290
 8001304:	200002a1 	.word	0x200002a1

08001308 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	460a      	mov	r2, r1
 8001312:	71fb      	strb	r3, [r7, #7]
 8001314:	4613      	mov	r3, r2
 8001316:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d906      	bls.n	800132c <begin+0x24>
    _displayfunction |= LCD_2LINE;
 800131e:	4b77      	ldr	r3, [pc, #476]	; (80014fc <begin+0x1f4>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b74      	ldr	r3, [pc, #464]	; (80014fc <begin+0x1f4>)
 800132a:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 800132c:	4a74      	ldr	r2, [pc, #464]	; (8001500 <begin+0x1f8>)
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8001332:	79fa      	ldrb	r2, [r7, #7]
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	3340      	adds	r3, #64	; 0x40
 8001338:	2140      	movs	r1, #64	; 0x40
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f998 	bl	8001670 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8001340:	4b70      	ldr	r3, [pc, #448]	; (8001504 <begin+0x1fc>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d009      	beq.n	800135c <begin+0x54>
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d106      	bne.n	800135c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 800134e:	4b6b      	ldr	r3, [pc, #428]	; (80014fc <begin+0x1f4>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b68      	ldr	r3, [pc, #416]	; (80014fc <begin+0x1f4>)
 800135a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 800135c:	f000 f8e4 	bl	8001528 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <begin+0x200>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01b      	beq.n	80013a8 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8001370:	4b66      	ldr	r3, [pc, #408]	; (800150c <begin+0x204>)
 8001372:	881a      	ldrh	r2, [r3, #0]
 8001374:	4b66      	ldr	r3, [pc, #408]	; (8001510 <begin+0x208>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	4313      	orrs	r3, r2
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b65      	ldr	r3, [pc, #404]	; (8001514 <begin+0x20c>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	4313      	orrs	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b64      	ldr	r3, [pc, #400]	; (8001518 <begin+0x210>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	4313      	orrs	r3, r2
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b62      	ldr	r3, [pc, #392]	; (8001518 <begin+0x210>)
 800138e:	885b      	ldrh	r3, [r3, #2]
 8001390:	4313      	orrs	r3, r2
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b60      	ldr	r3, [pc, #384]	; (8001518 <begin+0x210>)
 8001396:	889b      	ldrh	r3, [r3, #4]
 8001398:	4313      	orrs	r3, r2
 800139a:	b29a      	uxth	r2, r3
 800139c:	4b5e      	ldr	r3, [pc, #376]	; (8001518 <begin+0x210>)
 800139e:	88db      	ldrh	r3, [r3, #6]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e02a      	b.n	80013fe <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80013a8:	4b58      	ldr	r3, [pc, #352]	; (800150c <begin+0x204>)
 80013aa:	881a      	ldrh	r2, [r3, #0]
 80013ac:	4b58      	ldr	r3, [pc, #352]	; (8001510 <begin+0x208>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b57      	ldr	r3, [pc, #348]	; (8001514 <begin+0x20c>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80013bc:	4b56      	ldr	r3, [pc, #344]	; (8001518 <begin+0x210>)
 80013be:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80013c4:	4b54      	ldr	r3, [pc, #336]	; (8001518 <begin+0x210>)
 80013c6:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80013cc:	4b52      	ldr	r3, [pc, #328]	; (8001518 <begin+0x210>)
 80013ce:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80013d4:	4b50      	ldr	r3, [pc, #320]	; (8001518 <begin+0x210>)
 80013d6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80013d8:	4313      	orrs	r3, r2
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b4e      	ldr	r3, [pc, #312]	; (8001518 <begin+0x210>)
 80013de:	891b      	ldrh	r3, [r3, #8]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b4c      	ldr	r3, [pc, #304]	; (8001518 <begin+0x210>)
 80013e6:	895b      	ldrh	r3, [r3, #10]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <begin+0x210>)
 80013ee:	899b      	ldrh	r3, [r3, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b48      	ldr	r3, [pc, #288]	; (8001518 <begin+0x210>)
 80013f6:	89db      	ldrh	r3, [r3, #14]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80013fc:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80013fe:	4b47      	ldr	r3, [pc, #284]	; (800151c <begin+0x214>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f107 020c 	add.w	r2, r7, #12
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f001 f82d 	bl	8002468 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 800140e:	2032      	movs	r0, #50	; 0x32
 8001410:	f000 fef4 	bl	80021fc <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8001414:	4b41      	ldr	r3, [pc, #260]	; (800151c <begin+0x214>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a3c      	ldr	r2, [pc, #240]	; (800150c <begin+0x204>)
 800141a:	8811      	ldrh	r1, [r2, #0]
 800141c:	2200      	movs	r2, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f001 f9d6 	bl	80027d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001424:	4b3d      	ldr	r3, [pc, #244]	; (800151c <begin+0x214>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a3a      	ldr	r2, [pc, #232]	; (8001514 <begin+0x20c>)
 800142a:	8811      	ldrh	r1, [r2, #0]
 800142c:	2200      	movs	r2, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f001 f9ce 	bl	80027d0 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8001434:	4b36      	ldr	r3, [pc, #216]	; (8001510 <begin+0x208>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	2bff      	cmp	r3, #255	; 0xff
 800143a:	d007      	beq.n	800144c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 800143c:	4b37      	ldr	r3, [pc, #220]	; (800151c <begin+0x214>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a33      	ldr	r2, [pc, #204]	; (8001510 <begin+0x208>)
 8001442:	8811      	ldrh	r1, [r2, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f001 f9c2 	bl	80027d0 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <begin+0x1f4>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	2b00      	cmp	r3, #0
 8001456:	d115      	bne.n	8001484 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 fa2b 	bl	80018b4 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800145e:	2005      	movs	r0, #5
 8001460:	f000 fecc 	bl	80021fc <HAL_Delay>

    // second try
    write4bits(0x03);
 8001464:	2003      	movs	r0, #3
 8001466:	f000 fa25 	bl	80018b4 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800146a:	2005      	movs	r0, #5
 800146c:	f000 fec6 	bl	80021fc <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8001470:	2003      	movs	r0, #3
 8001472:	f000 fa1f 	bl	80018b4 <write4bits>
    HAL_Delay(1);
 8001476:	2001      	movs	r0, #1
 8001478:	f000 fec0 	bl	80021fc <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 800147c:	2002      	movs	r0, #2
 800147e:	f000 fa19 	bl	80018b4 <write4bits>
 8001482:	e01d      	b.n	80014c0 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <begin+0x1f4>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	f043 0320 	orr.w	r3, r3, #32
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f98b 	bl	80017aa <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8001494:	2005      	movs	r0, #5
 8001496:	f000 feb1 	bl	80021fc <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <begin+0x1f4>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	f043 0320 	orr.w	r3, r3, #32
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f980 	bl	80017aa <command>
    HAL_Delay(1);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f000 fea6 	bl	80021fc <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <begin+0x1f4>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	f043 0320 	orr.w	r3, r3, #32
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f975 	bl	80017aa <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <begin+0x1f4>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	f043 0320 	orr.w	r3, r3, #32
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f96d 	bl	80017aa <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <begin+0x218>)
 80014d2:	2204      	movs	r2, #4
 80014d4:	701a      	strb	r2, [r3, #0]
  display();
 80014d6:	f000 f927 	bl	8001728 <display>

  // clear it off
  clear();
 80014da:	f000 f8e9 	bl	80016b0 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <begin+0x21c>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <begin+0x21c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f95b 	bl	80017aa <command>

}
 80014f4:	bf00      	nop
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200002a1 	.word	0x200002a1
 8001500:	2000028d 	.word	0x2000028d
 8001504:	200001fc 	.word	0x200001fc
 8001508:	20000000 	.word	0x20000000
 800150c:	200002a4 	.word	0x200002a4
 8001510:	20000284 	.word	0x20000284
 8001514:	200002a2 	.word	0x200002a2
 8001518:	20000290 	.word	0x20000290
 800151c:	20000288 	.word	0x20000288
 8001520:	2000028c 	.word	0x2000028c
 8001524:	200002a0 	.word	0x200002a0

08001528 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 800152e:	4b48      	ldr	r3, [pc, #288]	; (8001650 <enableClock+0x128>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a48      	ldr	r2, [pc, #288]	; (8001654 <enableClock+0x12c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d10e      	bne.n	8001556 <enableClock+0x2e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	4b46      	ldr	r3, [pc, #280]	; (8001658 <enableClock+0x130>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4a45      	ldr	r2, [pc, #276]	; (8001658 <enableClock+0x130>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6313      	str	r3, [r2, #48]	; 0x30
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <enableClock+0x130>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8001554:	e076      	b.n	8001644 <enableClock+0x11c>
  else if(_port == GPIOB)
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <enableClock+0x128>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a40      	ldr	r2, [pc, #256]	; (800165c <enableClock+0x134>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d10e      	bne.n	800157e <enableClock+0x56>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <enableClock+0x130>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	4a3b      	ldr	r2, [pc, #236]	; (8001658 <enableClock+0x130>)
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	6313      	str	r3, [r2, #48]	; 0x30
 8001570:	4b39      	ldr	r3, [pc, #228]	; (8001658 <enableClock+0x130>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	69bb      	ldr	r3, [r7, #24]
}
 800157c:	e062      	b.n	8001644 <enableClock+0x11c>
  else if(_port == GPIOB)
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <enableClock+0x128>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a36      	ldr	r2, [pc, #216]	; (800165c <enableClock+0x134>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d10e      	bne.n	80015a6 <enableClock+0x7e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	4b32      	ldr	r3, [pc, #200]	; (8001658 <enableClock+0x130>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	4a31      	ldr	r2, [pc, #196]	; (8001658 <enableClock+0x130>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	6313      	str	r3, [r2, #48]	; 0x30
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <enableClock+0x130>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697b      	ldr	r3, [r7, #20]
}
 80015a4:	e04e      	b.n	8001644 <enableClock+0x11c>
	else if(_port == GPIOC)
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <enableClock+0x128>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a2d      	ldr	r2, [pc, #180]	; (8001660 <enableClock+0x138>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d10e      	bne.n	80015ce <enableClock+0xa6>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <enableClock+0x130>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4a27      	ldr	r2, [pc, #156]	; (8001658 <enableClock+0x130>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <enableClock+0x130>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
}
 80015cc:	e03a      	b.n	8001644 <enableClock+0x11c>
	else if(_port == GPIOD)
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <enableClock+0x128>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a24      	ldr	r2, [pc, #144]	; (8001664 <enableClock+0x13c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d10e      	bne.n	80015f6 <enableClock+0xce>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <enableClock+0x130>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4a1d      	ldr	r2, [pc, #116]	; (8001658 <enableClock+0x130>)
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <enableClock+0x130>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	e026      	b.n	8001644 <enableClock+0x11c>
	else if(_port == GPIOE)
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <enableClock+0x128>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <enableClock+0x140>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d10e      	bne.n	800161e <enableClock+0xf6>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <enableClock+0x130>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	4a13      	ldr	r2, [pc, #76]	; (8001658 <enableClock+0x130>)
 800160a:	f043 0310 	orr.w	r3, r3, #16
 800160e:	6313      	str	r3, [r2, #48]	; 0x30
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <enableClock+0x130>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
}
 800161c:	e012      	b.n	8001644 <enableClock+0x11c>
	else if(_port == GPIOF)
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <enableClock+0x128>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <enableClock+0x144>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d10d      	bne.n	8001644 <enableClock+0x11c>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <enableClock+0x130>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	4a09      	ldr	r2, [pc, #36]	; (8001658 <enableClock+0x130>)
 8001632:	f043 0320 	orr.w	r3, r3, #32
 8001636:	6313      	str	r3, [r2, #48]	; 0x30
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <enableClock+0x130>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	f003 0320 	and.w	r3, r3, #32
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
}
 8001644:	bf00      	nop
 8001646:	3724      	adds	r7, #36	; 0x24
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20000288 	.word	0x20000288
 8001654:	40020000 	.word	0x40020000
 8001658:	40023800 	.word	0x40023800
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40021400 	.word	0x40021400

08001670 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <setRowOffsets+0x3c>)
 8001684:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <setRowOffsets+0x3c>)
 800168c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <setRowOffsets+0x3c>)
 8001694:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <setRowOffsets+0x3c>)
 800169c:	70da      	strb	r2, [r3, #3]
}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000280 	.word	0x20000280

080016b0 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80016b4:	2001      	movs	r0, #1
 80016b6:	f000 f878 	bl	80017aa <command>
  HAL_Delay(2);  // this command takes a long time!
 80016ba:	2002      	movs	r0, #2
 80016bc:	f000 fd9e 	bl	80021fc <HAL_Delay>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	460a      	mov	r2, r1
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	4613      	mov	r3, r2
 80016d2:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80016d4:	2304      	movs	r3, #4
 80016d6:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d803      	bhi.n	80016e8 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	3b01      	subs	r3, #1
 80016e6:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <setCursor+0x5c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	79ba      	ldrb	r2, [r7, #6]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d303      	bcc.n	80016fa <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <setCursor+0x5c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	4a09      	ldr	r2, [pc, #36]	; (8001724 <setCursor+0x60>)
 80016fe:	5cd2      	ldrb	r2, [r2, r3]
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	4413      	add	r3, r2
 8001704:	b2db      	uxtb	r3, r3
 8001706:	b25b      	sxtb	r3, r3
 8001708:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800170c:	b25b      	sxtb	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f84a 	bl	80017aa <command>
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000028d 	.word	0x2000028d
 8001724:	20000280 	.word	0x20000280

08001728 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <display+0x28>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <display+0x28>)
 8001738:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <display+0x28>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f830 	bl	80017aa <command>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000028c 	.word	0x2000028c

08001754 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <print+0x12>
 8001762:	2300      	movs	r3, #0
 8001764:	e01d      	b.n	80017a2 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7fe fd30 	bl	80001d0 <strlen>
 8001770:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8001776:	e00c      	b.n	8001792 <print+0x3e>
    if (write(*buffer++)) n++;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	617a      	str	r2, [r7, #20]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f000 f820 	bl	80017c6 <write>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <print+0x4a>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	613a      	str	r2, [r7, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1ed      	bne.n	8001778 <print+0x24>
 800179c:	e000      	b.n	80017a0 <print+0x4c>
    else break;
 800179e:	bf00      	nop
  }
  return n;
 80017a0:	68fb      	ldr	r3, [r7, #12]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f813 	bl	80017e4 <send>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <write>:

inline size_t write(uint8_t value) {
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	2101      	movs	r1, #1
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 f805 	bl	80017e4 <send>
  return 1; // assume sucess
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	4613      	mov	r3, r2
 80017f2:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <send+0x6c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a16      	ldr	r2, [pc, #88]	; (8001854 <send+0x70>)
 80017fa:	8811      	ldrh	r1, [r2, #0]
 80017fc:	79ba      	ldrb	r2, [r7, #6]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 ffe6 	bl	80027d0 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <send+0x74>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	2bff      	cmp	r3, #255	; 0xff
 800180a:	d007      	beq.n	800181c <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <send+0x6c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <send+0x74>)
 8001812:	8811      	ldrh	r1, [r2, #0]
 8001814:	2200      	movs	r2, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f000 ffda 	bl	80027d0 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <send+0x78>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <send+0x4e>
    write8bits(value); 
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f86c 	bl	8001908 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8001830:	e009      	b.n	8001846 <send+0x62>
    write4bits(value>>4);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	b2db      	uxtb	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f83b 	bl	80018b4 <write4bits>
    write4bits(value);
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f837 	bl	80018b4 <write4bits>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000288 	.word	0x20000288
 8001854:	200002a4 	.word	0x200002a4
 8001858:	20000284 	.word	0x20000284
 800185c:	200002a1 	.word	0x200002a1

08001860 <pulseEnable>:

void pulseEnable(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <pulseEnable+0x4c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <pulseEnable+0x50>)
 800186a:	8811      	ldrh	r1, [r2, #0]
 800186c:	2200      	movs	r2, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f000 ffae 	bl	80027d0 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8001874:	2001      	movs	r0, #1
 8001876:	f000 fcc1 	bl	80021fc <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <pulseEnable+0x4c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a0c      	ldr	r2, [pc, #48]	; (80018b0 <pulseEnable+0x50>)
 8001880:	8811      	ldrh	r1, [r2, #0]
 8001882:	2201      	movs	r2, #1
 8001884:	4618      	mov	r0, r3
 8001886:	f000 ffa3 	bl	80027d0 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800188a:	2001      	movs	r0, #1
 800188c:	f000 fcb6 	bl	80021fc <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <pulseEnable+0x4c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <pulseEnable+0x50>)
 8001896:	8811      	ldrh	r1, [r2, #0]
 8001898:	2200      	movs	r2, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f000 ff98 	bl	80027d0 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80018a0:	2001      	movs	r0, #1
 80018a2:	f000 fcab 	bl	80021fc <HAL_Delay>
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000288 	.word	0x20000288
 80018b0:	200002a2 	.word	0x200002a2

080018b4 <write4bits>:

void write4bits(uint8_t value) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e013      	b.n	80018ec <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <write4bits+0x4c>)
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <write4bits+0x50>)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	fa42 f303 	asr.w	r3, r2, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	461a      	mov	r2, r3
 80018e2:	f000 ff75 	bl	80027d0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3301      	adds	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	dde8      	ble.n	80018c4 <write4bits+0x10>
  }

  pulseEnable();
 80018f2:	f7ff ffb5 	bl	8001860 <pulseEnable>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000288 	.word	0x20000288
 8001904:	20000290 	.word	0x20000290

08001908 <write8bits>:

void write8bits(uint8_t value) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e013      	b.n	8001940 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <write8bits+0x4c>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <write8bits+0x50>)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001924:	79fa      	ldrb	r2, [r7, #7]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	fa42 f303 	asr.w	r3, r2, r3
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	f000 ff4b 	bl	80027d0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3301      	adds	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b07      	cmp	r3, #7
 8001944:	dde8      	ble.n	8001918 <write8bits+0x10>
  }
  
  pulseEnable();
 8001946:	f7ff ff8b 	bl	8001860 <pulseEnable>
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000288 	.word	0x20000288
 8001958:	20000290 	.word	0x20000290

0800195c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	ed2d 8b02 	vpush	{d8}
 8001962:	b084      	sub	sp, #16
 8001964:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001966:	f000 fbd7 	bl	8002118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196a:	f000 f8e1 	bl	8001b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196e:	f000 f993 	bl	8001c98 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001972:	f000 f945 	bl	8001c00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001976:	4860      	ldr	r0, [pc, #384]	; (8001af8 <main+0x19c>)
 8001978:	f001 fc56 	bl	8003228 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 800197c:	485e      	ldr	r0, [pc, #376]	; (8001af8 <main+0x19c>)
 800197e:	f001 fbeb 	bl	8003158 <HAL_TIM_Base_Start>
  LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8001982:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001986:	9303      	str	r3, [sp, #12]
 8001988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800199e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a6:	4855      	ldr	r0, [pc, #340]	; (8001afc <main+0x1a0>)
 80019a8:	f7ff fc16 	bl	80011d8 <LiquidCrystal>
  begin(16, 2);
 80019ac:	2102      	movs	r1, #2
 80019ae:	2010      	movs	r0, #16
 80019b0:	f7ff fcaa 	bl	8001308 <begin>
  clear();
 80019b4:	f7ff fe7c 	bl	80016b0 <clear>
  print("Hello World!");
 80019b8:	4851      	ldr	r0, [pc, #324]	; (8001b00 <main+0x1a4>)
 80019ba:	f7ff fecb 	bl	8001754 <print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(5000);
 80019be:	f241 3088 	movw	r0, #5000	; 0x1388
 80019c2:	f000 fc1b 	bl	80021fc <HAL_Delay>
  clear();
 80019c6:	f7ff fe73 	bl	80016b0 <clear>
//  char str1[30];
  while (1)
  {
	  display_Temp(tCelsius);
 80019ca:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <main+0x1a8>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	eeb0 0a67 	vmov.f32	s0, s15
 80019d4:	f7ff face 	bl	8000f74 <display_Temp>
	  display_Humid(RH);
 80019d8:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <main+0x1ac>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	eeb0 0a67 	vmov.f32	s0, s15
 80019e2:	f7ff faeb 	bl	8000fbc <display_Humid>

	  if(DHT11_Start())
 80019e6:	f7ff fb0d 	bl	8001004 <DHT11_Start>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d079      	beq.n	8001ae4 <main+0x188>
	  {
		RHI = DHT11_Read(); // Relative humidity integral
 80019f0:	f7ff fb7a 	bl	80010e8 <DHT11_Read>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b44      	ldr	r3, [pc, #272]	; (8001b0c <main+0x1b0>)
 80019fa:	701a      	strb	r2, [r3, #0]
		RHD = DHT11_Read(); // Relative humidity decimal
 80019fc:	f7ff fb74 	bl	80010e8 <DHT11_Read>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <main+0x1b4>)
 8001a06:	701a      	strb	r2, [r3, #0]
		TCI = DHT11_Read(); // Celsius integral
 8001a08:	f7ff fb6e 	bl	80010e8 <DHT11_Read>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b40      	ldr	r3, [pc, #256]	; (8001b14 <main+0x1b8>)
 8001a12:	701a      	strb	r2, [r3, #0]
		TCD = DHT11_Read(); // Celsius decimal
 8001a14:	f7ff fb68 	bl	80010e8 <DHT11_Read>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <main+0x1bc>)
 8001a1e:	701a      	strb	r2, [r3, #0]
		SUM = DHT11_Read(); // Check sum
 8001a20:	f7ff fb62 	bl	80010e8 <DHT11_Read>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b3c      	ldr	r3, [pc, #240]	; (8001b1c <main+0x1c0>)
 8001a2a:	701a      	strb	r2, [r3, #0]
		if (RHI + RHD + TCI + TCD == SUM)
 8001a2c:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <main+0x1b0>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <main+0x1b4>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a36      	ldr	r2, [pc, #216]	; (8001b14 <main+0x1b8>)
 8001a3a:	7812      	ldrb	r2, [r2, #0]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a36      	ldr	r2, [pc, #216]	; (8001b18 <main+0x1bc>)
 8001a40:	7812      	ldrb	r2, [r2, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a35      	ldr	r2, [pc, #212]	; (8001b1c <main+0x1c0>)
 8001a46:	7812      	ldrb	r2, [r2, #0]
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d14b      	bne.n	8001ae4 <main+0x188>
		{
		  // Can use RHI and TCI for any purposes if whole number only needed
		  tCelsius = (float)TCI + (float)(TCD/10.0);
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <main+0x1b8>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <main+0x1bc>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fd61 	bl	8000524 <__aeabi_i2d>
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <main+0x1c4>)
 8001a68:	f7fe fef0 	bl	800084c <__aeabi_ddiv>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff f898 	bl	8000ba8 <__aeabi_d2f>
 8001a78:	ee07 0a90 	vmov	s15, r0
 8001a7c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <main+0x1a8>)
 8001a82:	edc3 7a00 	vstr	s15, [r3]
		  tFahrenheit = tCelsius * 9/5 + 32;
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <main+0x1a8>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001a90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a94:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a9c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001b24 <main+0x1c8>
 8001aa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <main+0x1cc>)
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
		  RH = (float)RHI + (float)(RHD/10.0);
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <main+0x1b0>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <main+0x1b4>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd32 	bl	8000524 <__aeabi_i2d>
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <main+0x1c4>)
 8001ac6:	f7fe fec1 	bl	800084c <__aeabi_ddiv>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff f869 	bl	8000ba8 <__aeabi_d2f>
 8001ad6:	ee07 0a90 	vmov	s15, r0
 8001ada:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <main+0x1ac>)
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
		  // Can use tCelsius, tFahrenheit and RH for any purposes
		}
	  }
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	4811      	ldr	r0, [pc, #68]	; (8001b2c <main+0x1d0>)
 8001ae8:	f000 fe8b 	bl	8002802 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 8001aec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001af0:	f000 fb84 	bl	80021fc <HAL_Delay>
	  display_Temp(tCelsius);
 8001af4:	e769      	b.n	80019ca <main+0x6e>
 8001af6:	bf00      	nop
 8001af8:	20000238 	.word	0x20000238
 8001afc:	40020c00 	.word	0x40020c00
 8001b00:	08006854 	.word	0x08006854
 8001b04:	20000200 	.word	0x20000200
 8001b08:	20000208 	.word	0x20000208
 8001b0c:	200002a8 	.word	0x200002a8
 8001b10:	200002a9 	.word	0x200002a9
 8001b14:	200002ab 	.word	0x200002ab
 8001b18:	200002a7 	.word	0x200002a7
 8001b1c:	200002aa 	.word	0x200002aa
 8001b20:	40240000 	.word	0x40240000
 8001b24:	42000000 	.word	0x42000000
 8001b28:	20000204 	.word	0x20000204
 8001b2c:	40020000 	.word	0x40020000

08001b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b094      	sub	sp, #80	; 0x50
 8001b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b36:	f107 0320 	add.w	r3, r7, #32
 8001b3a:	2230      	movs	r2, #48	; 0x30
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f001 ffce 	bl	8003ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <SystemClock_Config+0xc8>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	4a26      	ldr	r2, [pc, #152]	; (8001bf8 <SystemClock_Config+0xc8>)
 8001b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b62:	6413      	str	r3, [r2, #64]	; 0x40
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <SystemClock_Config+0xc8>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <SystemClock_Config+0xcc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <SystemClock_Config+0xcc>)
 8001b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <SystemClock_Config+0xcc>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b96:	2302      	movs	r3, #2
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001ba4:	2354      	movs	r3, #84	; 0x54
 8001ba6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bac:	2304      	movs	r3, #4
 8001bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb0:	f107 0320 	add.w	r3, r7, #32
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 fe3f 	bl	8002838 <HAL_RCC_OscConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bc0:	f000 f8dc 	bl	8001d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc4:	230f      	movs	r3, #15
 8001bc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 f8a2 	bl	8002d28 <HAL_RCC_ClockConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001bea:	f000 f8c7 	bl	8001d7c <Error_Handler>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3750      	adds	r7, #80	; 0x50
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40007000 	.word	0x40007000

08001c00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	463b      	mov	r3, r7
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_TIM2_Init+0x94>)
 8001c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_TIM2_Init+0x94>)
 8001c26:	2229      	movs	r2, #41	; 0x29
 8001c28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_TIM2_Init+0x94>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_TIM2_Init+0x94>)
 8001c32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001c36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_TIM2_Init+0x94>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_TIM2_Init+0x94>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c44:	4813      	ldr	r0, [pc, #76]	; (8001c94 <MX_TIM2_Init+0x94>)
 8001c46:	f001 fa37 	bl	80030b8 <HAL_TIM_Base_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c50:	f000 f894 	bl	8001d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480c      	ldr	r0, [pc, #48]	; (8001c94 <MX_TIM2_Init+0x94>)
 8001c62:	f001 fc59 	bl	8003518 <HAL_TIM_ConfigClockSource>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c6c:	f000 f886 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c78:	463b      	mov	r3, r7
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_TIM2_Init+0x94>)
 8001c7e:	f001 fe75 	bl	800396c <HAL_TIMEx_MasterConfigSynchronization>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c88:	f000 f878 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000238 	.word	0x20000238

08001c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a29      	ldr	r2, [pc, #164]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|LED_RED_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2114      	movs	r1, #20
 8001d06:	4816      	ldr	r0, [pc, #88]	; (8001d60 <MX_GPIO_Init+0xc8>)
 8001d08:	f000 fd62 	bl	80027d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8001d12:	4814      	ldr	r0, [pc, #80]	; (8001d64 <MX_GPIO_Init+0xcc>)
 8001d14:	f000 fd5c 	bl	80027d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 LED_RED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LED_RED_Pin;
 8001d18:	2314      	movs	r3, #20
 8001d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480c      	ldr	r0, [pc, #48]	; (8001d60 <MX_GPIO_Init+0xc8>)
 8001d30:	f000 fb9a 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d34:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8001d38:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_GPIO_Init+0xcc>)
 8001d4e:	f000 fb8b 	bl	8002468 <HAL_GPIO_Init>

}
 8001d52:	bf00      	nop
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020c00 	.word	0x40020c00

08001d68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001d70:	f000 f80a 	bl	8001d88 <timerRun>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d80:	b672      	cpsid	i
}
 8001d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <Error_Handler+0x8>
	...

08001d88 <timerRun>:
void setTimer3(int duration) {
	timer3_counter = duration;
	timer3_flag = 0;
}

void timerRun() {
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <timerRun+0x70>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	dd0b      	ble.n	8001dac <timerRun+0x24>
		timer1_counter--;
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <timerRun+0x70>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <timerRun+0x70>)
 8001d9c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <timerRun+0x70>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	dc02      	bgt.n	8001dac <timerRun+0x24>
			timer1_flag = 1;
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <timerRun+0x74>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <timerRun+0x78>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	dd0b      	ble.n	8001dcc <timerRun+0x44>
		timer2_counter--;
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <timerRun+0x78>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <timerRun+0x78>)
 8001dbc:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <timerRun+0x78>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	dc02      	bgt.n	8001dcc <timerRun+0x44>
			timer2_flag = 1;
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <timerRun+0x7c>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <timerRun+0x80>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dd0b      	ble.n	8001dec <timerRun+0x64>
		timer3_counter--;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <timerRun+0x80>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <timerRun+0x80>)
 8001ddc:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <timerRun+0x80>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	dc02      	bgt.n	8001dec <timerRun+0x64>
			timer3_flag = 1;
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <timerRun+0x84>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000210 	.word	0x20000210
 8001dfc:	2000020c 	.word	0x2000020c
 8001e00:	20000218 	.word	0x20000218
 8001e04:	20000214 	.word	0x20000214
 8001e08:	20000220 	.word	0x20000220
 8001e0c:	2000021c 	.word	0x2000021c

08001e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800

08001e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e70:	d115      	bne.n	8001e9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_TIM_Base_MspInit+0x48>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <HAL_TIM_Base_MspInit+0x48>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_TIM_Base_MspInit+0x48>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	201c      	movs	r0, #28
 8001e94:	f000 fab1 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e98:	201c      	movs	r0, #28
 8001e9a:	f000 faca 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <HardFault_Handler+0x4>

08001eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <MemManage_Handler+0x4>

08001ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <BusFault_Handler+0x4>

08001ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <UsageFault_Handler+0x4>

08001eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef8:	f000 f960 	bl	80021bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <TIM2_IRQHandler+0x10>)
 8001f06:	f001 f9ff 	bl	8003308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000238 	.word	0x20000238

08001f14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
	return 1;
 8001f18:	2301      	movs	r3, #1
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_kill>:

int _kill(int pid, int sig)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f2e:	f001 fdad 	bl	8003a8c <__errno>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2216      	movs	r2, #22
 8001f36:	601a      	str	r2, [r3, #0]
	return -1;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_exit>:

void _exit (int status)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ffe7 	bl	8001f24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f56:	e7fe      	b.n	8001f56 <_exit+0x12>

08001f58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	e00a      	b.n	8001f80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f6a:	f3af 8000 	nop.w
 8001f6e:	4601      	mov	r1, r0
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	60ba      	str	r2, [r7, #8]
 8001f76:	b2ca      	uxtb	r2, r1
 8001f78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dbf0      	blt.n	8001f6a <_read+0x12>
	}

return len;
 8001f88:	687b      	ldr	r3, [r7, #4]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e009      	b.n	8001fb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	60ba      	str	r2, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dbf1      	blt.n	8001fa4 <_write+0x12>
	}
	return len;
 8001fc0:	687b      	ldr	r3, [r7, #4]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_close>:

int _close(int file)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
	return -1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <_isatty>:

int _isatty(int file)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
	return 1;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
	return 0;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <_sbrk+0x5c>)
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <_sbrk+0x60>)
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <_sbrk+0x64>)
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <_sbrk+0x68>)
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	d207      	bcs.n	8002074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002064:	f001 fd12 	bl	8003a8c <__errno>
 8002068:	4603      	mov	r3, r0
 800206a:	220c      	movs	r2, #12
 800206c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	e009      	b.n	8002088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	4a05      	ldr	r2, [pc, #20]	; (8002098 <_sbrk+0x64>)
 8002084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20020000 	.word	0x20020000
 8002094:	00000400 	.word	0x00000400
 8002098:	20000224 	.word	0x20000224
 800209c:	200002c0 	.word	0x200002c0

080020a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <SystemInit+0x20>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <SystemInit+0x20>)
 80020ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c8:	480d      	ldr	r0, [pc, #52]	; (8002100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ca:	490e      	ldr	r1, [pc, #56]	; (8002104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020cc:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d0:	e002      	b.n	80020d8 <LoopCopyDataInit>

080020d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d6:	3304      	adds	r3, #4

080020d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020dc:	d3f9      	bcc.n	80020d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020de:	4a0b      	ldr	r2, [pc, #44]	; (800210c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020e0:	4c0b      	ldr	r4, [pc, #44]	; (8002110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e4:	e001      	b.n	80020ea <LoopFillZerobss>

080020e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e8:	3204      	adds	r2, #4

080020ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ec:	d3fb      	bcc.n	80020e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020ee:	f7ff ffd7 	bl	80020a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020f2:	f001 fcd1 	bl	8003a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f6:	f7ff fc31 	bl	800195c <main>
  bx  lr    
 80020fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002108:	08006c64 	.word	0x08006c64
  ldr r2, =_sbss
 800210c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002110:	200002c0 	.word	0x200002c0

08002114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC_IRQHandler>
	...

08002118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <HAL_Init+0x40>)
 8002122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_Init+0x40>)
 800212e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <HAL_Init+0x40>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002140:	2003      	movs	r0, #3
 8002142:	f000 f94f 	bl	80023e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002146:	200f      	movs	r0, #15
 8002148:	f000 f808 	bl	800215c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800214c:	f7ff fe60 	bl	8001e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023c00 	.word	0x40023c00

0800215c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_InitTick+0x54>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_InitTick+0x58>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002172:	fbb3 f3f1 	udiv	r3, r3, r1
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f967 	bl	800244e <HAL_SYSTICK_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e00e      	b.n	80021a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b0f      	cmp	r3, #15
 800218e:	d80a      	bhi.n	80021a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002190:	2200      	movs	r2, #0
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f000 f92f 	bl	80023fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800219c:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <HAL_InitTick+0x5c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000004 	.word	0x20000004
 80021b4:	2000000c 	.word	0x2000000c
 80021b8:	20000008 	.word	0x20000008

080021bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_IncTick+0x20>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_IncTick+0x24>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_IncTick+0x24>)
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	2000000c 	.word	0x2000000c
 80021e0:	200002ac 	.word	0x200002ac

080021e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return uwTick;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_GetTick+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	200002ac 	.word	0x200002ac

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff ffee 	bl	80021e4 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d005      	beq.n	8002222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_Delay+0x44>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002222:	bf00      	nop
 8002224:	f7ff ffde 	bl	80021e4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d8f7      	bhi.n	8002224 <HAL_Delay+0x28>
  {
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000000c 	.word	0x2000000c

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <__NVIC_EnableIRQ+0x38>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b0:	d301      	bcc.n	80023b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00f      	b.n	80023d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <SysTick_Config+0x40>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023be:	210f      	movs	r1, #15
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	f7ff ff8e 	bl	80022e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <SysTick_Config+0x40>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <SysTick_Config+0x40>)
 80023d0:	2207      	movs	r2, #7
 80023d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	e000e010 	.word	0xe000e010

080023e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ff29 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800240c:	f7ff ff3e 	bl	800228c <__NVIC_GetPriorityGrouping>
 8002410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f7ff ff8e 	bl	8002338 <NVIC_EncodePriority>
 800241c:	4602      	mov	r2, r0
 800241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff5d 	bl	80022e4 <__NVIC_SetPriority>
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff31 	bl	80022a8 <__NVIC_EnableIRQ>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffa2 	bl	80023a0 <SysTick_Config>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e16b      	b.n	800275c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	f040 815a 	bne.w	8002756 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d005      	beq.n	80024ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d130      	bne.n	800251c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f0:	2201      	movs	r2, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 0201 	and.w	r2, r3, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b03      	cmp	r3, #3
 8002526:	d017      	beq.n	8002558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d123      	bne.n	80025ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80b4 	beq.w	8002756 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b60      	ldr	r3, [pc, #384]	; (8002774 <HAL_GPIO_Init+0x30c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4a5f      	ldr	r2, [pc, #380]	; (8002774 <HAL_GPIO_Init+0x30c>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	; 0x44
 80025fe:	4b5d      	ldr	r3, [pc, #372]	; (8002774 <HAL_GPIO_Init+0x30c>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260a:	4a5b      	ldr	r2, [pc, #364]	; (8002778 <HAL_GPIO_Init+0x310>)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	220f      	movs	r2, #15
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a52      	ldr	r2, [pc, #328]	; (800277c <HAL_GPIO_Init+0x314>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02b      	beq.n	800268e <HAL_GPIO_Init+0x226>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a51      	ldr	r2, [pc, #324]	; (8002780 <HAL_GPIO_Init+0x318>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d025      	beq.n	800268a <HAL_GPIO_Init+0x222>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a50      	ldr	r2, [pc, #320]	; (8002784 <HAL_GPIO_Init+0x31c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01f      	beq.n	8002686 <HAL_GPIO_Init+0x21e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4f      	ldr	r2, [pc, #316]	; (8002788 <HAL_GPIO_Init+0x320>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d019      	beq.n	8002682 <HAL_GPIO_Init+0x21a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4e      	ldr	r2, [pc, #312]	; (800278c <HAL_GPIO_Init+0x324>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0x216>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4d      	ldr	r2, [pc, #308]	; (8002790 <HAL_GPIO_Init+0x328>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_GPIO_Init+0x212>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4c      	ldr	r2, [pc, #304]	; (8002794 <HAL_GPIO_Init+0x32c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x20e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4b      	ldr	r2, [pc, #300]	; (8002798 <HAL_GPIO_Init+0x330>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_GPIO_Init+0x20a>
 800266e:	2307      	movs	r3, #7
 8002670:	e00e      	b.n	8002690 <HAL_GPIO_Init+0x228>
 8002672:	2308      	movs	r3, #8
 8002674:	e00c      	b.n	8002690 <HAL_GPIO_Init+0x228>
 8002676:	2306      	movs	r3, #6
 8002678:	e00a      	b.n	8002690 <HAL_GPIO_Init+0x228>
 800267a:	2305      	movs	r3, #5
 800267c:	e008      	b.n	8002690 <HAL_GPIO_Init+0x228>
 800267e:	2304      	movs	r3, #4
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x228>
 8002682:	2303      	movs	r3, #3
 8002684:	e004      	b.n	8002690 <HAL_GPIO_Init+0x228>
 8002686:	2302      	movs	r3, #2
 8002688:	e002      	b.n	8002690 <HAL_GPIO_Init+0x228>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_GPIO_Init+0x228>
 800268e:	2300      	movs	r3, #0
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	f002 0203 	and.w	r2, r2, #3
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	4093      	lsls	r3, r2
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a0:	4935      	ldr	r1, [pc, #212]	; (8002778 <HAL_GPIO_Init+0x310>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3302      	adds	r3, #2
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ae:	4b3b      	ldr	r3, [pc, #236]	; (800279c <HAL_GPIO_Init+0x334>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d2:	4a32      	ldr	r2, [pc, #200]	; (800279c <HAL_GPIO_Init+0x334>)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026d8:	4b30      	ldr	r3, [pc, #192]	; (800279c <HAL_GPIO_Init+0x334>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fc:	4a27      	ldr	r2, [pc, #156]	; (800279c <HAL_GPIO_Init+0x334>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002702:	4b26      	ldr	r3, [pc, #152]	; (800279c <HAL_GPIO_Init+0x334>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002726:	4a1d      	ldr	r2, [pc, #116]	; (800279c <HAL_GPIO_Init+0x334>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_GPIO_Init+0x334>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002750:	4a12      	ldr	r2, [pc, #72]	; (800279c <HAL_GPIO_Init+0x334>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3301      	adds	r3, #1
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b0f      	cmp	r3, #15
 8002760:	f67f ae90 	bls.w	8002484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	40013800 	.word	0x40013800
 800277c:	40020000 	.word	0x40020000
 8002780:	40020400 	.word	0x40020400
 8002784:	40020800 	.word	0x40020800
 8002788:	40020c00 	.word	0x40020c00
 800278c:	40021000 	.word	0x40021000
 8002790:	40021400 	.word	0x40021400
 8002794:	40021800 	.word	0x40021800
 8002798:	40021c00 	.word	0x40021c00
 800279c:	40013c00 	.word	0x40013c00

080027a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	887b      	ldrh	r3, [r7, #2]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	e001      	b.n	80027c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
 80027dc:	4613      	mov	r3, r2
 80027de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e0:	787b      	ldrb	r3, [r7, #1]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027ec:	e003      	b.n	80027f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	041a      	lsls	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	619a      	str	r2, [r3, #24]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002814:	887a      	ldrh	r2, [r7, #2]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4013      	ands	r3, r2
 800281a:	041a      	lsls	r2, r3, #16
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	43d9      	mvns	r1, r3
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	400b      	ands	r3, r1
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	619a      	str	r2, [r3, #24]
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e264      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d075      	beq.n	8002942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002856:	4ba3      	ldr	r3, [pc, #652]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b04      	cmp	r3, #4
 8002860:	d00c      	beq.n	800287c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002862:	4ba0      	ldr	r3, [pc, #640]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286a:	2b08      	cmp	r3, #8
 800286c:	d112      	bne.n	8002894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800286e:	4b9d      	ldr	r3, [pc, #628]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287a:	d10b      	bne.n	8002894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287c:	4b99      	ldr	r3, [pc, #612]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d05b      	beq.n	8002940 <HAL_RCC_OscConfig+0x108>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d157      	bne.n	8002940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e23f      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289c:	d106      	bne.n	80028ac <HAL_RCC_OscConfig+0x74>
 800289e:	4b91      	ldr	r3, [pc, #580]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a90      	ldr	r2, [pc, #576]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e01d      	b.n	80028e8 <HAL_RCC_OscConfig+0xb0>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x98>
 80028b6:	4b8b      	ldr	r3, [pc, #556]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a8a      	ldr	r2, [pc, #552]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b88      	ldr	r3, [pc, #544]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a87      	ldr	r2, [pc, #540]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e00b      	b.n	80028e8 <HAL_RCC_OscConfig+0xb0>
 80028d0:	4b84      	ldr	r3, [pc, #528]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a83      	ldr	r2, [pc, #524]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b81      	ldr	r3, [pc, #516]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a80      	ldr	r2, [pc, #512]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7ff fc78 	bl	80021e4 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f8:	f7ff fc74 	bl	80021e4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e204      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4b76      	ldr	r3, [pc, #472]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0xc0>
 8002916:	e014      	b.n	8002942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff fc64 	bl	80021e4 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002920:	f7ff fc60 	bl	80021e4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1f0      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	4b6c      	ldr	r3, [pc, #432]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0xe8>
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d063      	beq.n	8002a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800294e:	4b65      	ldr	r3, [pc, #404]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295a:	4b62      	ldr	r3, [pc, #392]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002962:	2b08      	cmp	r3, #8
 8002964:	d11c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002966:	4b5f      	ldr	r3, [pc, #380]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d116      	bne.n	80029a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	4b5c      	ldr	r3, [pc, #368]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_RCC_OscConfig+0x152>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d001      	beq.n	800298a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e1c4      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	4b56      	ldr	r3, [pc, #344]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4952      	ldr	r1, [pc, #328]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299e:	e03a      	b.n	8002a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a8:	4b4f      	ldr	r3, [pc, #316]	; (8002ae8 <HAL_RCC_OscConfig+0x2b0>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7ff fc19 	bl	80021e4 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b6:	f7ff fc15 	bl	80021e4 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e1a5      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4940      	ldr	r1, [pc, #256]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]
 80029e8:	e015      	b.n	8002a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ea:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <HAL_RCC_OscConfig+0x2b0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7ff fbf8 	bl	80021e4 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f8:	f7ff fbf4 	bl	80021e4 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e184      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d030      	beq.n	8002a84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2a:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_RCC_OscConfig+0x2b4>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a30:	f7ff fbd8 	bl	80021e4 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a38:	f7ff fbd4 	bl	80021e4 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e164      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x200>
 8002a56:	e015      	b.n	8002a84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCC_OscConfig+0x2b4>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5e:	f7ff fbc1 	bl	80021e4 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a66:	f7ff fbbd 	bl	80021e4 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e14d      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80a0 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_OscConfig+0x2b8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d121      	bne.n	8002b12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_RCC_OscConfig+0x2b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <HAL_RCC_OscConfig+0x2b8>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ada:	f7ff fb83 	bl	80021e4 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae0:	e011      	b.n	8002b06 <HAL_RCC_OscConfig+0x2ce>
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	42470000 	.word	0x42470000
 8002aec:	42470e80 	.word	0x42470e80
 8002af0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af4:	f7ff fb76 	bl	80021e4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e106      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b06:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <HAL_RCC_OscConfig+0x4e4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d106      	bne.n	8002b28 <HAL_RCC_OscConfig+0x2f0>
 8002b1a:	4b81      	ldr	r3, [pc, #516]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	4a80      	ldr	r2, [pc, #512]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70
 8002b26:	e01c      	b.n	8002b62 <HAL_RCC_OscConfig+0x32a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d10c      	bne.n	8002b4a <HAL_RCC_OscConfig+0x312>
 8002b30:	4b7b      	ldr	r3, [pc, #492]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	4a7a      	ldr	r2, [pc, #488]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b36:	f043 0304 	orr.w	r3, r3, #4
 8002b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3c:	4b78      	ldr	r3, [pc, #480]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	4a77      	ldr	r2, [pc, #476]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6713      	str	r3, [r2, #112]	; 0x70
 8002b48:	e00b      	b.n	8002b62 <HAL_RCC_OscConfig+0x32a>
 8002b4a:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	4a74      	ldr	r2, [pc, #464]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	6713      	str	r3, [r2, #112]	; 0x70
 8002b56:	4b72      	ldr	r3, [pc, #456]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	4a71      	ldr	r2, [pc, #452]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b5c:	f023 0304 	bic.w	r3, r3, #4
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d015      	beq.n	8002b96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6a:	f7ff fb3b 	bl	80021e4 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7ff fb37 	bl	80021e4 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e0c5      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ee      	beq.n	8002b72 <HAL_RCC_OscConfig+0x33a>
 8002b94:	e014      	b.n	8002bc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b96:	f7ff fb25 	bl	80021e4 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9e:	f7ff fb21 	bl	80021e4 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e0af      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb4:	4b5a      	ldr	r3, [pc, #360]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ee      	bne.n	8002b9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc6:	4b56      	ldr	r3, [pc, #344]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a55      	ldr	r2, [pc, #340]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 809b 	beq.w	8002d12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d05c      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d141      	bne.n	8002c74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf0:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <HAL_RCC_OscConfig+0x4ec>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf6:	f7ff faf5 	bl	80021e4 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7ff faf1 	bl	80021e4 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e081      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c10:	4b43      	ldr	r3, [pc, #268]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f0      	bne.n	8002bfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	019b      	lsls	r3, r3, #6
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	3b01      	subs	r3, #1
 8002c36:	041b      	lsls	r3, r3, #16
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	061b      	lsls	r3, r3, #24
 8002c40:	4937      	ldr	r1, [pc, #220]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c46:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <HAL_RCC_OscConfig+0x4ec>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7ff faca 	bl	80021e4 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c54:	f7ff fac6 	bl	80021e4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e056      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c66:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x41c>
 8002c72:	e04e      	b.n	8002d12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c74:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_RCC_OscConfig+0x4ec>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7ff fab3 	bl	80021e4 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c82:	f7ff faaf 	bl	80021e4 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e03f      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c94:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x44a>
 8002ca0:	e037      	b.n	8002d12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e032      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cae:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d028      	beq.n	8002d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d121      	bne.n	8002d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d11a      	bne.n	8002d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cde:	4013      	ands	r3, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ce4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d111      	bne.n	8002d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	40023800 	.word	0x40023800
 8002d24:	42470060 	.word	0x42470060

08002d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0cc      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b68      	ldr	r3, [pc, #416]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d90c      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b65      	ldr	r3, [pc, #404]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b63      	ldr	r3, [pc, #396]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0b8      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d020      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d7c:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4a58      	ldr	r2, [pc, #352]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d94:	4b53      	ldr	r3, [pc, #332]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4a52      	ldr	r2, [pc, #328]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da0:	4b50      	ldr	r3, [pc, #320]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	494d      	ldr	r1, [pc, #308]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d044      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	4b47      	ldr	r3, [pc, #284]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d119      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e07f      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de6:	4b3f      	ldr	r3, [pc, #252]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e06f      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df6:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e067      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e06:	4b37      	ldr	r3, [pc, #220]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f023 0203 	bic.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4934      	ldr	r1, [pc, #208]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e18:	f7ff f9e4 	bl	80021e4 <HAL_GetTick>
 8002e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e20:	f7ff f9e0 	bl	80021e4 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e04f      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 020c 	and.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d1eb      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d20c      	bcs.n	8002e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e032      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4916      	ldr	r1, [pc, #88]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9a:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	490e      	ldr	r1, [pc, #56]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eae:	f000 f821 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	490a      	ldr	r1, [pc, #40]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	5ccb      	ldrb	r3, [r1, r3]
 8002ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec6:	4a09      	ldr	r2, [pc, #36]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eca:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f944 	bl	800215c <HAL_InitTick>

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023c00 	.word	0x40023c00
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	08006864 	.word	0x08006864
 8002eec:	20000004 	.word	0x20000004
 8002ef0:	20000008 	.word	0x20000008

08002ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	607b      	str	r3, [r7, #4]
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	2300      	movs	r3, #0
 8002f06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f0c:	4b67      	ldr	r3, [pc, #412]	; (80030ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d00d      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x40>
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	f200 80bd 	bhi.w	8003098 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x34>
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d003      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f26:	e0b7      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f28:	4b61      	ldr	r3, [pc, #388]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f2a:	60bb      	str	r3, [r7, #8]
       break;
 8002f2c:	e0b7      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f2e:	4b61      	ldr	r3, [pc, #388]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f30:	60bb      	str	r3, [r7, #8]
      break;
 8002f32:	e0b4      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f34:	4b5d      	ldr	r3, [pc, #372]	; (80030ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f3e:	4b5b      	ldr	r3, [pc, #364]	; (80030ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d04d      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4a:	4b58      	ldr	r3, [pc, #352]	; (80030ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	099b      	lsrs	r3, r3, #6
 8002f50:	461a      	mov	r2, r3
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f5a:	f04f 0100 	mov.w	r1, #0
 8002f5e:	ea02 0800 	and.w	r8, r2, r0
 8002f62:	ea03 0901 	and.w	r9, r3, r1
 8002f66:	4640      	mov	r0, r8
 8002f68:	4649      	mov	r1, r9
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	014b      	lsls	r3, r1, #5
 8002f74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f78:	0142      	lsls	r2, r0, #5
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	ebb0 0008 	subs.w	r0, r0, r8
 8002f82:	eb61 0109 	sbc.w	r1, r1, r9
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	018b      	lsls	r3, r1, #6
 8002f90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f94:	0182      	lsls	r2, r0, #6
 8002f96:	1a12      	subs	r2, r2, r0
 8002f98:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9c:	f04f 0000 	mov.w	r0, #0
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	00d9      	lsls	r1, r3, #3
 8002fa6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002faa:	00d0      	lsls	r0, r2, #3
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	eb12 0208 	adds.w	r2, r2, r8
 8002fb4:	eb43 0309 	adc.w	r3, r3, r9
 8002fb8:	f04f 0000 	mov.w	r0, #0
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	0259      	lsls	r1, r3, #9
 8002fc2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002fc6:	0250      	lsls	r0, r2, #9
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	f7fd fe36 	bl	8000c48 <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e04a      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe6:	4b31      	ldr	r3, [pc, #196]	; (80030ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	461a      	mov	r2, r3
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	ea02 0400 	and.w	r4, r2, r0
 8002ffe:	ea03 0501 	and.w	r5, r3, r1
 8003002:	4620      	mov	r0, r4
 8003004:	4629      	mov	r1, r5
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	014b      	lsls	r3, r1, #5
 8003010:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003014:	0142      	lsls	r2, r0, #5
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	1b00      	subs	r0, r0, r4
 800301c:	eb61 0105 	sbc.w	r1, r1, r5
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	018b      	lsls	r3, r1, #6
 800302a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800302e:	0182      	lsls	r2, r0, #6
 8003030:	1a12      	subs	r2, r2, r0
 8003032:	eb63 0301 	sbc.w	r3, r3, r1
 8003036:	f04f 0000 	mov.w	r0, #0
 800303a:	f04f 0100 	mov.w	r1, #0
 800303e:	00d9      	lsls	r1, r3, #3
 8003040:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003044:	00d0      	lsls	r0, r2, #3
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	1912      	adds	r2, r2, r4
 800304c:	eb45 0303 	adc.w	r3, r5, r3
 8003050:	f04f 0000 	mov.w	r0, #0
 8003054:	f04f 0100 	mov.w	r1, #0
 8003058:	0299      	lsls	r1, r3, #10
 800305a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800305e:	0290      	lsls	r0, r2, #10
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	461a      	mov	r2, r3
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	f7fd fdea 	bl	8000c48 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	3301      	adds	r3, #1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	60bb      	str	r3, [r7, #8]
      break;
 8003096:	e002      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800309a:	60bb      	str	r3, [r7, #8]
      break;
 800309c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309e:	68bb      	ldr	r3, [r7, #8]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	00f42400 	.word	0x00f42400
 80030b4:	007a1200 	.word	0x007a1200

080030b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e041      	b.n	800314e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fe febe 	bl	8001e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f000 fafe 	bl	80036f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d001      	beq.n	8003170 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e046      	b.n	80031fe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a23      	ldr	r2, [pc, #140]	; (800320c <HAL_TIM_Base_Start+0xb4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d022      	beq.n	80031c8 <HAL_TIM_Base_Start+0x70>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318a:	d01d      	beq.n	80031c8 <HAL_TIM_Base_Start+0x70>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1f      	ldr	r2, [pc, #124]	; (8003210 <HAL_TIM_Base_Start+0xb8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d018      	beq.n	80031c8 <HAL_TIM_Base_Start+0x70>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1e      	ldr	r2, [pc, #120]	; (8003214 <HAL_TIM_Base_Start+0xbc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d013      	beq.n	80031c8 <HAL_TIM_Base_Start+0x70>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <HAL_TIM_Base_Start+0xc0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00e      	beq.n	80031c8 <HAL_TIM_Base_Start+0x70>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1b      	ldr	r2, [pc, #108]	; (800321c <HAL_TIM_Base_Start+0xc4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d009      	beq.n	80031c8 <HAL_TIM_Base_Start+0x70>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a19      	ldr	r2, [pc, #100]	; (8003220 <HAL_TIM_Base_Start+0xc8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d004      	beq.n	80031c8 <HAL_TIM_Base_Start+0x70>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a18      	ldr	r2, [pc, #96]	; (8003224 <HAL_TIM_Base_Start+0xcc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d111      	bne.n	80031ec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d010      	beq.n	80031fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ea:	e007      	b.n	80031fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40010000 	.word	0x40010000
 8003210:	40000400 	.word	0x40000400
 8003214:	40000800 	.word	0x40000800
 8003218:	40000c00 	.word	0x40000c00
 800321c:	40010400 	.word	0x40010400
 8003220:	40014000 	.word	0x40014000
 8003224:	40001800 	.word	0x40001800

08003228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d001      	beq.n	8003240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e04e      	b.n	80032de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a23      	ldr	r2, [pc, #140]	; (80032ec <HAL_TIM_Base_Start_IT+0xc4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d022      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d01d      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d018      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d013      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00e      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d009      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a19      	ldr	r2, [pc, #100]	; (8003300 <HAL_TIM_Base_Start_IT+0xd8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a18      	ldr	r2, [pc, #96]	; (8003304 <HAL_TIM_Base_Start_IT+0xdc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d111      	bne.n	80032cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d010      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ca:	e007      	b.n	80032dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800
 80032f8:	40000c00 	.word	0x40000c00
 80032fc:	40010400 	.word	0x40010400
 8003300:	40014000 	.word	0x40014000
 8003304:	40001800 	.word	0x40001800

08003308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d122      	bne.n	8003364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d11b      	bne.n	8003364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0202 	mvn.w	r2, #2
 8003334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f9b5 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 8003350:	e005      	b.n	800335e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f9a7 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f9b8 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d122      	bne.n	80033b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b04      	cmp	r3, #4
 800337e:	d11b      	bne.n	80033b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0204 	mvn.w	r2, #4
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f98b 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f97d 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f98e 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d122      	bne.n	800340c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d11b      	bne.n	800340c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0208 	mvn.w	r2, #8
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2204      	movs	r2, #4
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f961 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f953 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f964 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b10      	cmp	r3, #16
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b10      	cmp	r3, #16
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0210 	mvn.w	r2, #16
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2208      	movs	r2, #8
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f937 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f929 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f93a 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10e      	bne.n	800348c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d107      	bne.n	800348c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0201 	mvn.w	r2, #1
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe fc6e 	bl	8001d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003496:	2b80      	cmp	r3, #128	; 0x80
 8003498:	d10e      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d107      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fae0 	bl	8003a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b40      	cmp	r3, #64	; 0x40
 80034c4:	d10e      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d107      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8ff 	bl	80036e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d10e      	bne.n	8003510 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d107      	bne.n	8003510 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0220 	mvn.w	r2, #32
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 faaa 	bl	8003a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_TIM_ConfigClockSource+0x1c>
 8003530:	2302      	movs	r3, #2
 8003532:	e0b4      	b.n	800369e <HAL_TIM_ConfigClockSource+0x186>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800355a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356c:	d03e      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0xd4>
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	f200 8087 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	f000 8086 	beq.w	800368a <HAL_TIM_ConfigClockSource+0x172>
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	d87f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b70      	cmp	r3, #112	; 0x70
 8003586:	d01a      	beq.n	80035be <HAL_TIM_ConfigClockSource+0xa6>
 8003588:	2b70      	cmp	r3, #112	; 0x70
 800358a:	d87b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b60      	cmp	r3, #96	; 0x60
 800358e:	d050      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x11a>
 8003590:	2b60      	cmp	r3, #96	; 0x60
 8003592:	d877      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b50      	cmp	r3, #80	; 0x50
 8003596:	d03c      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0xfa>
 8003598:	2b50      	cmp	r3, #80	; 0x50
 800359a:	d873      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d058      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x13a>
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d86f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b30      	cmp	r3, #48	; 0x30
 80035a6:	d064      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035a8:	2b30      	cmp	r3, #48	; 0x30
 80035aa:	d86b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d060      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d867      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d05c      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d05a      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035bc:	e062      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6899      	ldr	r1, [r3, #8]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f000 f9ad 	bl	800392c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	609a      	str	r2, [r3, #8]
      break;
 80035ea:	e04f      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f000 f996 	bl	800392c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800360e:	609a      	str	r2, [r3, #8]
      break;
 8003610:	e03c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	461a      	mov	r2, r3
 8003620:	f000 f90a 	bl	8003838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2150      	movs	r1, #80	; 0x50
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f963 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 8003630:	e02c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	461a      	mov	r2, r3
 8003640:	f000 f929 	bl	8003896 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2160      	movs	r1, #96	; 0x60
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f953 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 8003650:	e01c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	461a      	mov	r2, r3
 8003660:	f000 f8ea 	bl	8003838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	4618      	mov	r0, r3
 800366c:	f000 f943 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 8003670:	e00c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f000 f93a 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 8003682:	e003      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      break;
 8003688:	e000      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800368a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a40      	ldr	r2, [pc, #256]	; (800380c <TIM_Base_SetConfig+0x114>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003716:	d00f      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3d      	ldr	r2, [pc, #244]	; (8003810 <TIM_Base_SetConfig+0x118>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00b      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3c      	ldr	r2, [pc, #240]	; (8003814 <TIM_Base_SetConfig+0x11c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <TIM_Base_SetConfig+0x120>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3a      	ldr	r2, [pc, #232]	; (800381c <TIM_Base_SetConfig+0x124>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2f      	ldr	r2, [pc, #188]	; (800380c <TIM_Base_SetConfig+0x114>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d02b      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d027      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <TIM_Base_SetConfig+0x118>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d023      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2b      	ldr	r2, [pc, #172]	; (8003814 <TIM_Base_SetConfig+0x11c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01f      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <TIM_Base_SetConfig+0x120>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01b      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a29      	ldr	r2, [pc, #164]	; (800381c <TIM_Base_SetConfig+0x124>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d017      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a28      	ldr	r2, [pc, #160]	; (8003820 <TIM_Base_SetConfig+0x128>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a27      	ldr	r2, [pc, #156]	; (8003824 <TIM_Base_SetConfig+0x12c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00f      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a26      	ldr	r2, [pc, #152]	; (8003828 <TIM_Base_SetConfig+0x130>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00b      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a25      	ldr	r2, [pc, #148]	; (800382c <TIM_Base_SetConfig+0x134>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d007      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a24      	ldr	r2, [pc, #144]	; (8003830 <TIM_Base_SetConfig+0x138>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d003      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a23      	ldr	r2, [pc, #140]	; (8003834 <TIM_Base_SetConfig+0x13c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d108      	bne.n	80037bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a0a      	ldr	r2, [pc, #40]	; (800380c <TIM_Base_SetConfig+0x114>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_Base_SetConfig+0xf8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0c      	ldr	r2, [pc, #48]	; (800381c <TIM_Base_SetConfig+0x124>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d103      	bne.n	80037f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	615a      	str	r2, [r3, #20]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40010000 	.word	0x40010000
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40010400 	.word	0x40010400
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800
 800382c:	40001800 	.word	0x40001800
 8003830:	40001c00 	.word	0x40001c00
 8003834:	40002000 	.word	0x40002000

08003838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f023 0201 	bic.w	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 030a 	bic.w	r3, r3, #10
 8003874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003896:	b480      	push	{r7}
 8003898:	b087      	sub	sp, #28
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f023 0210 	bic.w	r2, r3, #16
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	031b      	lsls	r3, r3, #12
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	f043 0307 	orr.w	r3, r3, #7
 8003918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	021a      	lsls	r2, r3, #8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	431a      	orrs	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4313      	orrs	r3, r2
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	609a      	str	r2, [r3, #8]
}
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003980:	2302      	movs	r3, #2
 8003982:	e05a      	b.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a21      	ldr	r2, [pc, #132]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d022      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d0:	d01d      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d018      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10c      	bne.n	8003a28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40010400 	.word	0x40010400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40001800 	.word	0x40001800

08003a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <__errno>:
 8003a8c:	4b01      	ldr	r3, [pc, #4]	; (8003a94 <__errno+0x8>)
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000010 	.word	0x20000010

08003a98 <__libc_init_array>:
 8003a98:	b570      	push	{r4, r5, r6, lr}
 8003a9a:	4d0d      	ldr	r5, [pc, #52]	; (8003ad0 <__libc_init_array+0x38>)
 8003a9c:	4c0d      	ldr	r4, [pc, #52]	; (8003ad4 <__libc_init_array+0x3c>)
 8003a9e:	1b64      	subs	r4, r4, r5
 8003aa0:	10a4      	asrs	r4, r4, #2
 8003aa2:	2600      	movs	r6, #0
 8003aa4:	42a6      	cmp	r6, r4
 8003aa6:	d109      	bne.n	8003abc <__libc_init_array+0x24>
 8003aa8:	4d0b      	ldr	r5, [pc, #44]	; (8003ad8 <__libc_init_array+0x40>)
 8003aaa:	4c0c      	ldr	r4, [pc, #48]	; (8003adc <__libc_init_array+0x44>)
 8003aac:	f002 feb6 	bl	800681c <_init>
 8003ab0:	1b64      	subs	r4, r4, r5
 8003ab2:	10a4      	asrs	r4, r4, #2
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	42a6      	cmp	r6, r4
 8003ab8:	d105      	bne.n	8003ac6 <__libc_init_array+0x2e>
 8003aba:	bd70      	pop	{r4, r5, r6, pc}
 8003abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac0:	4798      	blx	r3
 8003ac2:	3601      	adds	r6, #1
 8003ac4:	e7ee      	b.n	8003aa4 <__libc_init_array+0xc>
 8003ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aca:	4798      	blx	r3
 8003acc:	3601      	adds	r6, #1
 8003ace:	e7f2      	b.n	8003ab6 <__libc_init_array+0x1e>
 8003ad0:	08006c5c 	.word	0x08006c5c
 8003ad4:	08006c5c 	.word	0x08006c5c
 8003ad8:	08006c5c 	.word	0x08006c5c
 8003adc:	08006c60 	.word	0x08006c60

08003ae0 <memset>:
 8003ae0:	4402      	add	r2, r0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d100      	bne.n	8003aea <memset+0xa>
 8003ae8:	4770      	bx	lr
 8003aea:	f803 1b01 	strb.w	r1, [r3], #1
 8003aee:	e7f9      	b.n	8003ae4 <memset+0x4>

08003af0 <__cvt>:
 8003af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003af4:	ec55 4b10 	vmov	r4, r5, d0
 8003af8:	2d00      	cmp	r5, #0
 8003afa:	460e      	mov	r6, r1
 8003afc:	4619      	mov	r1, r3
 8003afe:	462b      	mov	r3, r5
 8003b00:	bfbb      	ittet	lt
 8003b02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b06:	461d      	movlt	r5, r3
 8003b08:	2300      	movge	r3, #0
 8003b0a:	232d      	movlt	r3, #45	; 0x2d
 8003b0c:	700b      	strb	r3, [r1, #0]
 8003b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b14:	4691      	mov	r9, r2
 8003b16:	f023 0820 	bic.w	r8, r3, #32
 8003b1a:	bfbc      	itt	lt
 8003b1c:	4622      	movlt	r2, r4
 8003b1e:	4614      	movlt	r4, r2
 8003b20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b24:	d005      	beq.n	8003b32 <__cvt+0x42>
 8003b26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b2a:	d100      	bne.n	8003b2e <__cvt+0x3e>
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	2102      	movs	r1, #2
 8003b30:	e000      	b.n	8003b34 <__cvt+0x44>
 8003b32:	2103      	movs	r1, #3
 8003b34:	ab03      	add	r3, sp, #12
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	ab02      	add	r3, sp, #8
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	ec45 4b10 	vmov	d0, r4, r5
 8003b40:	4653      	mov	r3, sl
 8003b42:	4632      	mov	r2, r6
 8003b44:	f000 fcec 	bl	8004520 <_dtoa_r>
 8003b48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b4c:	4607      	mov	r7, r0
 8003b4e:	d102      	bne.n	8003b56 <__cvt+0x66>
 8003b50:	f019 0f01 	tst.w	r9, #1
 8003b54:	d022      	beq.n	8003b9c <__cvt+0xac>
 8003b56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b5a:	eb07 0906 	add.w	r9, r7, r6
 8003b5e:	d110      	bne.n	8003b82 <__cvt+0x92>
 8003b60:	783b      	ldrb	r3, [r7, #0]
 8003b62:	2b30      	cmp	r3, #48	; 0x30
 8003b64:	d10a      	bne.n	8003b7c <__cvt+0x8c>
 8003b66:	2200      	movs	r2, #0
 8003b68:	2300      	movs	r3, #0
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	f7fc ffab 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b72:	b918      	cbnz	r0, 8003b7c <__cvt+0x8c>
 8003b74:	f1c6 0601 	rsb	r6, r6, #1
 8003b78:	f8ca 6000 	str.w	r6, [sl]
 8003b7c:	f8da 3000 	ldr.w	r3, [sl]
 8003b80:	4499      	add	r9, r3
 8003b82:	2200      	movs	r2, #0
 8003b84:	2300      	movs	r3, #0
 8003b86:	4620      	mov	r0, r4
 8003b88:	4629      	mov	r1, r5
 8003b8a:	f7fc ff9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b8e:	b108      	cbz	r0, 8003b94 <__cvt+0xa4>
 8003b90:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b94:	2230      	movs	r2, #48	; 0x30
 8003b96:	9b03      	ldr	r3, [sp, #12]
 8003b98:	454b      	cmp	r3, r9
 8003b9a:	d307      	bcc.n	8003bac <__cvt+0xbc>
 8003b9c:	9b03      	ldr	r3, [sp, #12]
 8003b9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ba0:	1bdb      	subs	r3, r3, r7
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	b004      	add	sp, #16
 8003ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bac:	1c59      	adds	r1, r3, #1
 8003bae:	9103      	str	r1, [sp, #12]
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	e7f0      	b.n	8003b96 <__cvt+0xa6>

08003bb4 <__exponent>:
 8003bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2900      	cmp	r1, #0
 8003bba:	bfb8      	it	lt
 8003bbc:	4249      	neglt	r1, r1
 8003bbe:	f803 2b02 	strb.w	r2, [r3], #2
 8003bc2:	bfb4      	ite	lt
 8003bc4:	222d      	movlt	r2, #45	; 0x2d
 8003bc6:	222b      	movge	r2, #43	; 0x2b
 8003bc8:	2909      	cmp	r1, #9
 8003bca:	7042      	strb	r2, [r0, #1]
 8003bcc:	dd2a      	ble.n	8003c24 <__exponent+0x70>
 8003bce:	f10d 0407 	add.w	r4, sp, #7
 8003bd2:	46a4      	mov	ip, r4
 8003bd4:	270a      	movs	r7, #10
 8003bd6:	46a6      	mov	lr, r4
 8003bd8:	460a      	mov	r2, r1
 8003bda:	fb91 f6f7 	sdiv	r6, r1, r7
 8003bde:	fb07 1516 	mls	r5, r7, r6, r1
 8003be2:	3530      	adds	r5, #48	; 0x30
 8003be4:	2a63      	cmp	r2, #99	; 0x63
 8003be6:	f104 34ff 	add.w	r4, r4, #4294967295
 8003bea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003bee:	4631      	mov	r1, r6
 8003bf0:	dcf1      	bgt.n	8003bd6 <__exponent+0x22>
 8003bf2:	3130      	adds	r1, #48	; 0x30
 8003bf4:	f1ae 0502 	sub.w	r5, lr, #2
 8003bf8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003bfc:	1c44      	adds	r4, r0, #1
 8003bfe:	4629      	mov	r1, r5
 8003c00:	4561      	cmp	r1, ip
 8003c02:	d30a      	bcc.n	8003c1a <__exponent+0x66>
 8003c04:	f10d 0209 	add.w	r2, sp, #9
 8003c08:	eba2 020e 	sub.w	r2, r2, lr
 8003c0c:	4565      	cmp	r5, ip
 8003c0e:	bf88      	it	hi
 8003c10:	2200      	movhi	r2, #0
 8003c12:	4413      	add	r3, r2
 8003c14:	1a18      	subs	r0, r3, r0
 8003c16:	b003      	add	sp, #12
 8003c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c22:	e7ed      	b.n	8003c00 <__exponent+0x4c>
 8003c24:	2330      	movs	r3, #48	; 0x30
 8003c26:	3130      	adds	r1, #48	; 0x30
 8003c28:	7083      	strb	r3, [r0, #2]
 8003c2a:	70c1      	strb	r1, [r0, #3]
 8003c2c:	1d03      	adds	r3, r0, #4
 8003c2e:	e7f1      	b.n	8003c14 <__exponent+0x60>

08003c30 <_printf_float>:
 8003c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c34:	ed2d 8b02 	vpush	{d8}
 8003c38:	b08d      	sub	sp, #52	; 0x34
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003c40:	4616      	mov	r6, r2
 8003c42:	461f      	mov	r7, r3
 8003c44:	4605      	mov	r5, r0
 8003c46:	f001 fa57 	bl	80050f8 <_localeconv_r>
 8003c4a:	f8d0 a000 	ldr.w	sl, [r0]
 8003c4e:	4650      	mov	r0, sl
 8003c50:	f7fc fabe 	bl	80001d0 <strlen>
 8003c54:	2300      	movs	r3, #0
 8003c56:	930a      	str	r3, [sp, #40]	; 0x28
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	9305      	str	r3, [sp, #20]
 8003c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003c64:	3307      	adds	r3, #7
 8003c66:	f023 0307 	bic.w	r3, r3, #7
 8003c6a:	f103 0208 	add.w	r2, r3, #8
 8003c6e:	f8c8 2000 	str.w	r2, [r8]
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003c7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c82:	9307      	str	r3, [sp, #28]
 8003c84:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c88:	ee08 0a10 	vmov	s16, r0
 8003c8c:	4b9f      	ldr	r3, [pc, #636]	; (8003f0c <_printf_float+0x2dc>)
 8003c8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c92:	f04f 32ff 	mov.w	r2, #4294967295
 8003c96:	f7fc ff49 	bl	8000b2c <__aeabi_dcmpun>
 8003c9a:	bb88      	cbnz	r0, 8003d00 <_printf_float+0xd0>
 8003c9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ca0:	4b9a      	ldr	r3, [pc, #616]	; (8003f0c <_printf_float+0x2dc>)
 8003ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca6:	f7fc ff23 	bl	8000af0 <__aeabi_dcmple>
 8003caa:	bb48      	cbnz	r0, 8003d00 <_printf_float+0xd0>
 8003cac:	2200      	movs	r2, #0
 8003cae:	2300      	movs	r3, #0
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	f7fc ff12 	bl	8000adc <__aeabi_dcmplt>
 8003cb8:	b110      	cbz	r0, 8003cc0 <_printf_float+0x90>
 8003cba:	232d      	movs	r3, #45	; 0x2d
 8003cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cc0:	4b93      	ldr	r3, [pc, #588]	; (8003f10 <_printf_float+0x2e0>)
 8003cc2:	4894      	ldr	r0, [pc, #592]	; (8003f14 <_printf_float+0x2e4>)
 8003cc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003cc8:	bf94      	ite	ls
 8003cca:	4698      	movls	r8, r3
 8003ccc:	4680      	movhi	r8, r0
 8003cce:	2303      	movs	r3, #3
 8003cd0:	6123      	str	r3, [r4, #16]
 8003cd2:	9b05      	ldr	r3, [sp, #20]
 8003cd4:	f023 0204 	bic.w	r2, r3, #4
 8003cd8:	6022      	str	r2, [r4, #0]
 8003cda:	f04f 0900 	mov.w	r9, #0
 8003cde:	9700      	str	r7, [sp, #0]
 8003ce0:	4633      	mov	r3, r6
 8003ce2:	aa0b      	add	r2, sp, #44	; 0x2c
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f000 f9d8 	bl	800409c <_printf_common>
 8003cec:	3001      	adds	r0, #1
 8003cee:	f040 8090 	bne.w	8003e12 <_printf_float+0x1e2>
 8003cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf6:	b00d      	add	sp, #52	; 0x34
 8003cf8:	ecbd 8b02 	vpop	{d8}
 8003cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d00:	4642      	mov	r2, r8
 8003d02:	464b      	mov	r3, r9
 8003d04:	4640      	mov	r0, r8
 8003d06:	4649      	mov	r1, r9
 8003d08:	f7fc ff10 	bl	8000b2c <__aeabi_dcmpun>
 8003d0c:	b140      	cbz	r0, 8003d20 <_printf_float+0xf0>
 8003d0e:	464b      	mov	r3, r9
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bfbc      	itt	lt
 8003d14:	232d      	movlt	r3, #45	; 0x2d
 8003d16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d1a:	487f      	ldr	r0, [pc, #508]	; (8003f18 <_printf_float+0x2e8>)
 8003d1c:	4b7f      	ldr	r3, [pc, #508]	; (8003f1c <_printf_float+0x2ec>)
 8003d1e:	e7d1      	b.n	8003cc4 <_printf_float+0x94>
 8003d20:	6863      	ldr	r3, [r4, #4]
 8003d22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d26:	9206      	str	r2, [sp, #24]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	d13f      	bne.n	8003dac <_printf_float+0x17c>
 8003d2c:	2306      	movs	r3, #6
 8003d2e:	6063      	str	r3, [r4, #4]
 8003d30:	9b05      	ldr	r3, [sp, #20]
 8003d32:	6861      	ldr	r1, [r4, #4]
 8003d34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9303      	str	r3, [sp, #12]
 8003d3c:	ab0a      	add	r3, sp, #40	; 0x28
 8003d3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003d42:	ab09      	add	r3, sp, #36	; 0x24
 8003d44:	ec49 8b10 	vmov	d0, r8, r9
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	6022      	str	r2, [r4, #0]
 8003d4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d50:	4628      	mov	r0, r5
 8003d52:	f7ff fecd 	bl	8003af0 <__cvt>
 8003d56:	9b06      	ldr	r3, [sp, #24]
 8003d58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d5a:	2b47      	cmp	r3, #71	; 0x47
 8003d5c:	4680      	mov	r8, r0
 8003d5e:	d108      	bne.n	8003d72 <_printf_float+0x142>
 8003d60:	1cc8      	adds	r0, r1, #3
 8003d62:	db02      	blt.n	8003d6a <_printf_float+0x13a>
 8003d64:	6863      	ldr	r3, [r4, #4]
 8003d66:	4299      	cmp	r1, r3
 8003d68:	dd41      	ble.n	8003dee <_printf_float+0x1be>
 8003d6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8003d6e:	fa5f fb8b 	uxtb.w	fp, fp
 8003d72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d76:	d820      	bhi.n	8003dba <_printf_float+0x18a>
 8003d78:	3901      	subs	r1, #1
 8003d7a:	465a      	mov	r2, fp
 8003d7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d80:	9109      	str	r1, [sp, #36]	; 0x24
 8003d82:	f7ff ff17 	bl	8003bb4 <__exponent>
 8003d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d88:	1813      	adds	r3, r2, r0
 8003d8a:	2a01      	cmp	r2, #1
 8003d8c:	4681      	mov	r9, r0
 8003d8e:	6123      	str	r3, [r4, #16]
 8003d90:	dc02      	bgt.n	8003d98 <_printf_float+0x168>
 8003d92:	6822      	ldr	r2, [r4, #0]
 8003d94:	07d2      	lsls	r2, r2, #31
 8003d96:	d501      	bpl.n	8003d9c <_printf_float+0x16c>
 8003d98:	3301      	adds	r3, #1
 8003d9a:	6123      	str	r3, [r4, #16]
 8003d9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d09c      	beq.n	8003cde <_printf_float+0xae>
 8003da4:	232d      	movs	r3, #45	; 0x2d
 8003da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003daa:	e798      	b.n	8003cde <_printf_float+0xae>
 8003dac:	9a06      	ldr	r2, [sp, #24]
 8003dae:	2a47      	cmp	r2, #71	; 0x47
 8003db0:	d1be      	bne.n	8003d30 <_printf_float+0x100>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1bc      	bne.n	8003d30 <_printf_float+0x100>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e7b9      	b.n	8003d2e <_printf_float+0xfe>
 8003dba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003dbe:	d118      	bne.n	8003df2 <_printf_float+0x1c2>
 8003dc0:	2900      	cmp	r1, #0
 8003dc2:	6863      	ldr	r3, [r4, #4]
 8003dc4:	dd0b      	ble.n	8003dde <_printf_float+0x1ae>
 8003dc6:	6121      	str	r1, [r4, #16]
 8003dc8:	b913      	cbnz	r3, 8003dd0 <_printf_float+0x1a0>
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	07d0      	lsls	r0, r2, #31
 8003dce:	d502      	bpl.n	8003dd6 <_printf_float+0x1a6>
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	440b      	add	r3, r1
 8003dd4:	6123      	str	r3, [r4, #16]
 8003dd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003dd8:	f04f 0900 	mov.w	r9, #0
 8003ddc:	e7de      	b.n	8003d9c <_printf_float+0x16c>
 8003dde:	b913      	cbnz	r3, 8003de6 <_printf_float+0x1b6>
 8003de0:	6822      	ldr	r2, [r4, #0]
 8003de2:	07d2      	lsls	r2, r2, #31
 8003de4:	d501      	bpl.n	8003dea <_printf_float+0x1ba>
 8003de6:	3302      	adds	r3, #2
 8003de8:	e7f4      	b.n	8003dd4 <_printf_float+0x1a4>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e7f2      	b.n	8003dd4 <_printf_float+0x1a4>
 8003dee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003df4:	4299      	cmp	r1, r3
 8003df6:	db05      	blt.n	8003e04 <_printf_float+0x1d4>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	6121      	str	r1, [r4, #16]
 8003dfc:	07d8      	lsls	r0, r3, #31
 8003dfe:	d5ea      	bpl.n	8003dd6 <_printf_float+0x1a6>
 8003e00:	1c4b      	adds	r3, r1, #1
 8003e02:	e7e7      	b.n	8003dd4 <_printf_float+0x1a4>
 8003e04:	2900      	cmp	r1, #0
 8003e06:	bfd4      	ite	le
 8003e08:	f1c1 0202 	rsble	r2, r1, #2
 8003e0c:	2201      	movgt	r2, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	e7e0      	b.n	8003dd4 <_printf_float+0x1a4>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	055a      	lsls	r2, r3, #21
 8003e16:	d407      	bmi.n	8003e28 <_printf_float+0x1f8>
 8003e18:	6923      	ldr	r3, [r4, #16]
 8003e1a:	4642      	mov	r2, r8
 8003e1c:	4631      	mov	r1, r6
 8003e1e:	4628      	mov	r0, r5
 8003e20:	47b8      	blx	r7
 8003e22:	3001      	adds	r0, #1
 8003e24:	d12c      	bne.n	8003e80 <_printf_float+0x250>
 8003e26:	e764      	b.n	8003cf2 <_printf_float+0xc2>
 8003e28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e2c:	f240 80e0 	bls.w	8003ff0 <_printf_float+0x3c0>
 8003e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e34:	2200      	movs	r2, #0
 8003e36:	2300      	movs	r3, #0
 8003e38:	f7fc fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d034      	beq.n	8003eaa <_printf_float+0x27a>
 8003e40:	4a37      	ldr	r2, [pc, #220]	; (8003f20 <_printf_float+0x2f0>)
 8003e42:	2301      	movs	r3, #1
 8003e44:	4631      	mov	r1, r6
 8003e46:	4628      	mov	r0, r5
 8003e48:	47b8      	blx	r7
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	f43f af51 	beq.w	8003cf2 <_printf_float+0xc2>
 8003e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e54:	429a      	cmp	r2, r3
 8003e56:	db02      	blt.n	8003e5e <_printf_float+0x22e>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	07d8      	lsls	r0, r3, #31
 8003e5c:	d510      	bpl.n	8003e80 <_printf_float+0x250>
 8003e5e:	ee18 3a10 	vmov	r3, s16
 8003e62:	4652      	mov	r2, sl
 8003e64:	4631      	mov	r1, r6
 8003e66:	4628      	mov	r0, r5
 8003e68:	47b8      	blx	r7
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	f43f af41 	beq.w	8003cf2 <_printf_float+0xc2>
 8003e70:	f04f 0800 	mov.w	r8, #0
 8003e74:	f104 091a 	add.w	r9, r4, #26
 8003e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	4543      	cmp	r3, r8
 8003e7e:	dc09      	bgt.n	8003e94 <_printf_float+0x264>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	079b      	lsls	r3, r3, #30
 8003e84:	f100 8105 	bmi.w	8004092 <_printf_float+0x462>
 8003e88:	68e0      	ldr	r0, [r4, #12]
 8003e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e8c:	4298      	cmp	r0, r3
 8003e8e:	bfb8      	it	lt
 8003e90:	4618      	movlt	r0, r3
 8003e92:	e730      	b.n	8003cf6 <_printf_float+0xc6>
 8003e94:	2301      	movs	r3, #1
 8003e96:	464a      	mov	r2, r9
 8003e98:	4631      	mov	r1, r6
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	47b8      	blx	r7
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	f43f af27 	beq.w	8003cf2 <_printf_float+0xc2>
 8003ea4:	f108 0801 	add.w	r8, r8, #1
 8003ea8:	e7e6      	b.n	8003e78 <_printf_float+0x248>
 8003eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	dc39      	bgt.n	8003f24 <_printf_float+0x2f4>
 8003eb0:	4a1b      	ldr	r2, [pc, #108]	; (8003f20 <_printf_float+0x2f0>)
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	4631      	mov	r1, r6
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	47b8      	blx	r7
 8003eba:	3001      	adds	r0, #1
 8003ebc:	f43f af19 	beq.w	8003cf2 <_printf_float+0xc2>
 8003ec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	d102      	bne.n	8003ece <_printf_float+0x29e>
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	07d9      	lsls	r1, r3, #31
 8003ecc:	d5d8      	bpl.n	8003e80 <_printf_float+0x250>
 8003ece:	ee18 3a10 	vmov	r3, s16
 8003ed2:	4652      	mov	r2, sl
 8003ed4:	4631      	mov	r1, r6
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	47b8      	blx	r7
 8003eda:	3001      	adds	r0, #1
 8003edc:	f43f af09 	beq.w	8003cf2 <_printf_float+0xc2>
 8003ee0:	f04f 0900 	mov.w	r9, #0
 8003ee4:	f104 0a1a 	add.w	sl, r4, #26
 8003ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eea:	425b      	negs	r3, r3
 8003eec:	454b      	cmp	r3, r9
 8003eee:	dc01      	bgt.n	8003ef4 <_printf_float+0x2c4>
 8003ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ef2:	e792      	b.n	8003e1a <_printf_float+0x1ea>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	4652      	mov	r2, sl
 8003ef8:	4631      	mov	r1, r6
 8003efa:	4628      	mov	r0, r5
 8003efc:	47b8      	blx	r7
 8003efe:	3001      	adds	r0, #1
 8003f00:	f43f aef7 	beq.w	8003cf2 <_printf_float+0xc2>
 8003f04:	f109 0901 	add.w	r9, r9, #1
 8003f08:	e7ee      	b.n	8003ee8 <_printf_float+0x2b8>
 8003f0a:	bf00      	nop
 8003f0c:	7fefffff 	.word	0x7fefffff
 8003f10:	08006878 	.word	0x08006878
 8003f14:	0800687c 	.word	0x0800687c
 8003f18:	08006884 	.word	0x08006884
 8003f1c:	08006880 	.word	0x08006880
 8003f20:	08006888 	.word	0x08006888
 8003f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	bfa8      	it	ge
 8003f2c:	461a      	movge	r2, r3
 8003f2e:	2a00      	cmp	r2, #0
 8003f30:	4691      	mov	r9, r2
 8003f32:	dc37      	bgt.n	8003fa4 <_printf_float+0x374>
 8003f34:	f04f 0b00 	mov.w	fp, #0
 8003f38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f3c:	f104 021a 	add.w	r2, r4, #26
 8003f40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f42:	9305      	str	r3, [sp, #20]
 8003f44:	eba3 0309 	sub.w	r3, r3, r9
 8003f48:	455b      	cmp	r3, fp
 8003f4a:	dc33      	bgt.n	8003fb4 <_printf_float+0x384>
 8003f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f50:	429a      	cmp	r2, r3
 8003f52:	db3b      	blt.n	8003fcc <_printf_float+0x39c>
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	07da      	lsls	r2, r3, #31
 8003f58:	d438      	bmi.n	8003fcc <_printf_float+0x39c>
 8003f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f5c:	9b05      	ldr	r3, [sp, #20]
 8003f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	eba2 0901 	sub.w	r9, r2, r1
 8003f66:	4599      	cmp	r9, r3
 8003f68:	bfa8      	it	ge
 8003f6a:	4699      	movge	r9, r3
 8003f6c:	f1b9 0f00 	cmp.w	r9, #0
 8003f70:	dc35      	bgt.n	8003fde <_printf_float+0x3ae>
 8003f72:	f04f 0800 	mov.w	r8, #0
 8003f76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f7a:	f104 0a1a 	add.w	sl, r4, #26
 8003f7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	eba3 0309 	sub.w	r3, r3, r9
 8003f88:	4543      	cmp	r3, r8
 8003f8a:	f77f af79 	ble.w	8003e80 <_printf_float+0x250>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4652      	mov	r2, sl
 8003f92:	4631      	mov	r1, r6
 8003f94:	4628      	mov	r0, r5
 8003f96:	47b8      	blx	r7
 8003f98:	3001      	adds	r0, #1
 8003f9a:	f43f aeaa 	beq.w	8003cf2 <_printf_float+0xc2>
 8003f9e:	f108 0801 	add.w	r8, r8, #1
 8003fa2:	e7ec      	b.n	8003f7e <_printf_float+0x34e>
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4642      	mov	r2, r8
 8003faa:	4628      	mov	r0, r5
 8003fac:	47b8      	blx	r7
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d1c0      	bne.n	8003f34 <_printf_float+0x304>
 8003fb2:	e69e      	b.n	8003cf2 <_printf_float+0xc2>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4628      	mov	r0, r5
 8003fba:	9205      	str	r2, [sp, #20]
 8003fbc:	47b8      	blx	r7
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	f43f ae97 	beq.w	8003cf2 <_printf_float+0xc2>
 8003fc4:	9a05      	ldr	r2, [sp, #20]
 8003fc6:	f10b 0b01 	add.w	fp, fp, #1
 8003fca:	e7b9      	b.n	8003f40 <_printf_float+0x310>
 8003fcc:	ee18 3a10 	vmov	r3, s16
 8003fd0:	4652      	mov	r2, sl
 8003fd2:	4631      	mov	r1, r6
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	47b8      	blx	r7
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d1be      	bne.n	8003f5a <_printf_float+0x32a>
 8003fdc:	e689      	b.n	8003cf2 <_printf_float+0xc2>
 8003fde:	9a05      	ldr	r2, [sp, #20]
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	4442      	add	r2, r8
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	47b8      	blx	r7
 8003fea:	3001      	adds	r0, #1
 8003fec:	d1c1      	bne.n	8003f72 <_printf_float+0x342>
 8003fee:	e680      	b.n	8003cf2 <_printf_float+0xc2>
 8003ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ff2:	2a01      	cmp	r2, #1
 8003ff4:	dc01      	bgt.n	8003ffa <_printf_float+0x3ca>
 8003ff6:	07db      	lsls	r3, r3, #31
 8003ff8:	d538      	bpl.n	800406c <_printf_float+0x43c>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	4631      	mov	r1, r6
 8004000:	4628      	mov	r0, r5
 8004002:	47b8      	blx	r7
 8004004:	3001      	adds	r0, #1
 8004006:	f43f ae74 	beq.w	8003cf2 <_printf_float+0xc2>
 800400a:	ee18 3a10 	vmov	r3, s16
 800400e:	4652      	mov	r2, sl
 8004010:	4631      	mov	r1, r6
 8004012:	4628      	mov	r0, r5
 8004014:	47b8      	blx	r7
 8004016:	3001      	adds	r0, #1
 8004018:	f43f ae6b 	beq.w	8003cf2 <_printf_float+0xc2>
 800401c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004020:	2200      	movs	r2, #0
 8004022:	2300      	movs	r3, #0
 8004024:	f7fc fd50 	bl	8000ac8 <__aeabi_dcmpeq>
 8004028:	b9d8      	cbnz	r0, 8004062 <_printf_float+0x432>
 800402a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800402c:	f108 0201 	add.w	r2, r8, #1
 8004030:	3b01      	subs	r3, #1
 8004032:	4631      	mov	r1, r6
 8004034:	4628      	mov	r0, r5
 8004036:	47b8      	blx	r7
 8004038:	3001      	adds	r0, #1
 800403a:	d10e      	bne.n	800405a <_printf_float+0x42a>
 800403c:	e659      	b.n	8003cf2 <_printf_float+0xc2>
 800403e:	2301      	movs	r3, #1
 8004040:	4652      	mov	r2, sl
 8004042:	4631      	mov	r1, r6
 8004044:	4628      	mov	r0, r5
 8004046:	47b8      	blx	r7
 8004048:	3001      	adds	r0, #1
 800404a:	f43f ae52 	beq.w	8003cf2 <_printf_float+0xc2>
 800404e:	f108 0801 	add.w	r8, r8, #1
 8004052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004054:	3b01      	subs	r3, #1
 8004056:	4543      	cmp	r3, r8
 8004058:	dcf1      	bgt.n	800403e <_printf_float+0x40e>
 800405a:	464b      	mov	r3, r9
 800405c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004060:	e6dc      	b.n	8003e1c <_printf_float+0x1ec>
 8004062:	f04f 0800 	mov.w	r8, #0
 8004066:	f104 0a1a 	add.w	sl, r4, #26
 800406a:	e7f2      	b.n	8004052 <_printf_float+0x422>
 800406c:	2301      	movs	r3, #1
 800406e:	4642      	mov	r2, r8
 8004070:	e7df      	b.n	8004032 <_printf_float+0x402>
 8004072:	2301      	movs	r3, #1
 8004074:	464a      	mov	r2, r9
 8004076:	4631      	mov	r1, r6
 8004078:	4628      	mov	r0, r5
 800407a:	47b8      	blx	r7
 800407c:	3001      	adds	r0, #1
 800407e:	f43f ae38 	beq.w	8003cf2 <_printf_float+0xc2>
 8004082:	f108 0801 	add.w	r8, r8, #1
 8004086:	68e3      	ldr	r3, [r4, #12]
 8004088:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800408a:	1a5b      	subs	r3, r3, r1
 800408c:	4543      	cmp	r3, r8
 800408e:	dcf0      	bgt.n	8004072 <_printf_float+0x442>
 8004090:	e6fa      	b.n	8003e88 <_printf_float+0x258>
 8004092:	f04f 0800 	mov.w	r8, #0
 8004096:	f104 0919 	add.w	r9, r4, #25
 800409a:	e7f4      	b.n	8004086 <_printf_float+0x456>

0800409c <_printf_common>:
 800409c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a0:	4616      	mov	r6, r2
 80040a2:	4699      	mov	r9, r3
 80040a4:	688a      	ldr	r2, [r1, #8]
 80040a6:	690b      	ldr	r3, [r1, #16]
 80040a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040ac:	4293      	cmp	r3, r2
 80040ae:	bfb8      	it	lt
 80040b0:	4613      	movlt	r3, r2
 80040b2:	6033      	str	r3, [r6, #0]
 80040b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040b8:	4607      	mov	r7, r0
 80040ba:	460c      	mov	r4, r1
 80040bc:	b10a      	cbz	r2, 80040c2 <_printf_common+0x26>
 80040be:	3301      	adds	r3, #1
 80040c0:	6033      	str	r3, [r6, #0]
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	0699      	lsls	r1, r3, #26
 80040c6:	bf42      	ittt	mi
 80040c8:	6833      	ldrmi	r3, [r6, #0]
 80040ca:	3302      	addmi	r3, #2
 80040cc:	6033      	strmi	r3, [r6, #0]
 80040ce:	6825      	ldr	r5, [r4, #0]
 80040d0:	f015 0506 	ands.w	r5, r5, #6
 80040d4:	d106      	bne.n	80040e4 <_printf_common+0x48>
 80040d6:	f104 0a19 	add.w	sl, r4, #25
 80040da:	68e3      	ldr	r3, [r4, #12]
 80040dc:	6832      	ldr	r2, [r6, #0]
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	42ab      	cmp	r3, r5
 80040e2:	dc26      	bgt.n	8004132 <_printf_common+0x96>
 80040e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040e8:	1e13      	subs	r3, r2, #0
 80040ea:	6822      	ldr	r2, [r4, #0]
 80040ec:	bf18      	it	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	0692      	lsls	r2, r2, #26
 80040f2:	d42b      	bmi.n	800414c <_printf_common+0xb0>
 80040f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040f8:	4649      	mov	r1, r9
 80040fa:	4638      	mov	r0, r7
 80040fc:	47c0      	blx	r8
 80040fe:	3001      	adds	r0, #1
 8004100:	d01e      	beq.n	8004140 <_printf_common+0xa4>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	68e5      	ldr	r5, [r4, #12]
 8004106:	6832      	ldr	r2, [r6, #0]
 8004108:	f003 0306 	and.w	r3, r3, #6
 800410c:	2b04      	cmp	r3, #4
 800410e:	bf08      	it	eq
 8004110:	1aad      	subeq	r5, r5, r2
 8004112:	68a3      	ldr	r3, [r4, #8]
 8004114:	6922      	ldr	r2, [r4, #16]
 8004116:	bf0c      	ite	eq
 8004118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800411c:	2500      	movne	r5, #0
 800411e:	4293      	cmp	r3, r2
 8004120:	bfc4      	itt	gt
 8004122:	1a9b      	subgt	r3, r3, r2
 8004124:	18ed      	addgt	r5, r5, r3
 8004126:	2600      	movs	r6, #0
 8004128:	341a      	adds	r4, #26
 800412a:	42b5      	cmp	r5, r6
 800412c:	d11a      	bne.n	8004164 <_printf_common+0xc8>
 800412e:	2000      	movs	r0, #0
 8004130:	e008      	b.n	8004144 <_printf_common+0xa8>
 8004132:	2301      	movs	r3, #1
 8004134:	4652      	mov	r2, sl
 8004136:	4649      	mov	r1, r9
 8004138:	4638      	mov	r0, r7
 800413a:	47c0      	blx	r8
 800413c:	3001      	adds	r0, #1
 800413e:	d103      	bne.n	8004148 <_printf_common+0xac>
 8004140:	f04f 30ff 	mov.w	r0, #4294967295
 8004144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004148:	3501      	adds	r5, #1
 800414a:	e7c6      	b.n	80040da <_printf_common+0x3e>
 800414c:	18e1      	adds	r1, r4, r3
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	2030      	movs	r0, #48	; 0x30
 8004152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004156:	4422      	add	r2, r4
 8004158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800415c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004160:	3302      	adds	r3, #2
 8004162:	e7c7      	b.n	80040f4 <_printf_common+0x58>
 8004164:	2301      	movs	r3, #1
 8004166:	4622      	mov	r2, r4
 8004168:	4649      	mov	r1, r9
 800416a:	4638      	mov	r0, r7
 800416c:	47c0      	blx	r8
 800416e:	3001      	adds	r0, #1
 8004170:	d0e6      	beq.n	8004140 <_printf_common+0xa4>
 8004172:	3601      	adds	r6, #1
 8004174:	e7d9      	b.n	800412a <_printf_common+0x8e>
	...

08004178 <_printf_i>:
 8004178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800417c:	460c      	mov	r4, r1
 800417e:	4691      	mov	r9, r2
 8004180:	7e27      	ldrb	r7, [r4, #24]
 8004182:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004184:	2f78      	cmp	r7, #120	; 0x78
 8004186:	4680      	mov	r8, r0
 8004188:	469a      	mov	sl, r3
 800418a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800418e:	d807      	bhi.n	80041a0 <_printf_i+0x28>
 8004190:	2f62      	cmp	r7, #98	; 0x62
 8004192:	d80a      	bhi.n	80041aa <_printf_i+0x32>
 8004194:	2f00      	cmp	r7, #0
 8004196:	f000 80d8 	beq.w	800434a <_printf_i+0x1d2>
 800419a:	2f58      	cmp	r7, #88	; 0x58
 800419c:	f000 80a3 	beq.w	80042e6 <_printf_i+0x16e>
 80041a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041a8:	e03a      	b.n	8004220 <_printf_i+0xa8>
 80041aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ae:	2b15      	cmp	r3, #21
 80041b0:	d8f6      	bhi.n	80041a0 <_printf_i+0x28>
 80041b2:	a001      	add	r0, pc, #4	; (adr r0, 80041b8 <_printf_i+0x40>)
 80041b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041b8:	08004211 	.word	0x08004211
 80041bc:	08004225 	.word	0x08004225
 80041c0:	080041a1 	.word	0x080041a1
 80041c4:	080041a1 	.word	0x080041a1
 80041c8:	080041a1 	.word	0x080041a1
 80041cc:	080041a1 	.word	0x080041a1
 80041d0:	08004225 	.word	0x08004225
 80041d4:	080041a1 	.word	0x080041a1
 80041d8:	080041a1 	.word	0x080041a1
 80041dc:	080041a1 	.word	0x080041a1
 80041e0:	080041a1 	.word	0x080041a1
 80041e4:	08004331 	.word	0x08004331
 80041e8:	08004255 	.word	0x08004255
 80041ec:	08004313 	.word	0x08004313
 80041f0:	080041a1 	.word	0x080041a1
 80041f4:	080041a1 	.word	0x080041a1
 80041f8:	08004353 	.word	0x08004353
 80041fc:	080041a1 	.word	0x080041a1
 8004200:	08004255 	.word	0x08004255
 8004204:	080041a1 	.word	0x080041a1
 8004208:	080041a1 	.word	0x080041a1
 800420c:	0800431b 	.word	0x0800431b
 8004210:	680b      	ldr	r3, [r1, #0]
 8004212:	1d1a      	adds	r2, r3, #4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	600a      	str	r2, [r1, #0]
 8004218:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800421c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004220:	2301      	movs	r3, #1
 8004222:	e0a3      	b.n	800436c <_printf_i+0x1f4>
 8004224:	6825      	ldr	r5, [r4, #0]
 8004226:	6808      	ldr	r0, [r1, #0]
 8004228:	062e      	lsls	r6, r5, #24
 800422a:	f100 0304 	add.w	r3, r0, #4
 800422e:	d50a      	bpl.n	8004246 <_printf_i+0xce>
 8004230:	6805      	ldr	r5, [r0, #0]
 8004232:	600b      	str	r3, [r1, #0]
 8004234:	2d00      	cmp	r5, #0
 8004236:	da03      	bge.n	8004240 <_printf_i+0xc8>
 8004238:	232d      	movs	r3, #45	; 0x2d
 800423a:	426d      	negs	r5, r5
 800423c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004240:	485e      	ldr	r0, [pc, #376]	; (80043bc <_printf_i+0x244>)
 8004242:	230a      	movs	r3, #10
 8004244:	e019      	b.n	800427a <_printf_i+0x102>
 8004246:	f015 0f40 	tst.w	r5, #64	; 0x40
 800424a:	6805      	ldr	r5, [r0, #0]
 800424c:	600b      	str	r3, [r1, #0]
 800424e:	bf18      	it	ne
 8004250:	b22d      	sxthne	r5, r5
 8004252:	e7ef      	b.n	8004234 <_printf_i+0xbc>
 8004254:	680b      	ldr	r3, [r1, #0]
 8004256:	6825      	ldr	r5, [r4, #0]
 8004258:	1d18      	adds	r0, r3, #4
 800425a:	6008      	str	r0, [r1, #0]
 800425c:	0628      	lsls	r0, r5, #24
 800425e:	d501      	bpl.n	8004264 <_printf_i+0xec>
 8004260:	681d      	ldr	r5, [r3, #0]
 8004262:	e002      	b.n	800426a <_printf_i+0xf2>
 8004264:	0669      	lsls	r1, r5, #25
 8004266:	d5fb      	bpl.n	8004260 <_printf_i+0xe8>
 8004268:	881d      	ldrh	r5, [r3, #0]
 800426a:	4854      	ldr	r0, [pc, #336]	; (80043bc <_printf_i+0x244>)
 800426c:	2f6f      	cmp	r7, #111	; 0x6f
 800426e:	bf0c      	ite	eq
 8004270:	2308      	moveq	r3, #8
 8004272:	230a      	movne	r3, #10
 8004274:	2100      	movs	r1, #0
 8004276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800427a:	6866      	ldr	r6, [r4, #4]
 800427c:	60a6      	str	r6, [r4, #8]
 800427e:	2e00      	cmp	r6, #0
 8004280:	bfa2      	ittt	ge
 8004282:	6821      	ldrge	r1, [r4, #0]
 8004284:	f021 0104 	bicge.w	r1, r1, #4
 8004288:	6021      	strge	r1, [r4, #0]
 800428a:	b90d      	cbnz	r5, 8004290 <_printf_i+0x118>
 800428c:	2e00      	cmp	r6, #0
 800428e:	d04d      	beq.n	800432c <_printf_i+0x1b4>
 8004290:	4616      	mov	r6, r2
 8004292:	fbb5 f1f3 	udiv	r1, r5, r3
 8004296:	fb03 5711 	mls	r7, r3, r1, r5
 800429a:	5dc7      	ldrb	r7, [r0, r7]
 800429c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042a0:	462f      	mov	r7, r5
 80042a2:	42bb      	cmp	r3, r7
 80042a4:	460d      	mov	r5, r1
 80042a6:	d9f4      	bls.n	8004292 <_printf_i+0x11a>
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d10b      	bne.n	80042c4 <_printf_i+0x14c>
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	07df      	lsls	r7, r3, #31
 80042b0:	d508      	bpl.n	80042c4 <_printf_i+0x14c>
 80042b2:	6923      	ldr	r3, [r4, #16]
 80042b4:	6861      	ldr	r1, [r4, #4]
 80042b6:	4299      	cmp	r1, r3
 80042b8:	bfde      	ittt	le
 80042ba:	2330      	movle	r3, #48	; 0x30
 80042bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042c4:	1b92      	subs	r2, r2, r6
 80042c6:	6122      	str	r2, [r4, #16]
 80042c8:	f8cd a000 	str.w	sl, [sp]
 80042cc:	464b      	mov	r3, r9
 80042ce:	aa03      	add	r2, sp, #12
 80042d0:	4621      	mov	r1, r4
 80042d2:	4640      	mov	r0, r8
 80042d4:	f7ff fee2 	bl	800409c <_printf_common>
 80042d8:	3001      	adds	r0, #1
 80042da:	d14c      	bne.n	8004376 <_printf_i+0x1fe>
 80042dc:	f04f 30ff 	mov.w	r0, #4294967295
 80042e0:	b004      	add	sp, #16
 80042e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e6:	4835      	ldr	r0, [pc, #212]	; (80043bc <_printf_i+0x244>)
 80042e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	680e      	ldr	r6, [r1, #0]
 80042f0:	061f      	lsls	r7, r3, #24
 80042f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80042f6:	600e      	str	r6, [r1, #0]
 80042f8:	d514      	bpl.n	8004324 <_printf_i+0x1ac>
 80042fa:	07d9      	lsls	r1, r3, #31
 80042fc:	bf44      	itt	mi
 80042fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004302:	6023      	strmi	r3, [r4, #0]
 8004304:	b91d      	cbnz	r5, 800430e <_printf_i+0x196>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f023 0320 	bic.w	r3, r3, #32
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	2310      	movs	r3, #16
 8004310:	e7b0      	b.n	8004274 <_printf_i+0xfc>
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	f043 0320 	orr.w	r3, r3, #32
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	2378      	movs	r3, #120	; 0x78
 800431c:	4828      	ldr	r0, [pc, #160]	; (80043c0 <_printf_i+0x248>)
 800431e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004322:	e7e3      	b.n	80042ec <_printf_i+0x174>
 8004324:	065e      	lsls	r6, r3, #25
 8004326:	bf48      	it	mi
 8004328:	b2ad      	uxthmi	r5, r5
 800432a:	e7e6      	b.n	80042fa <_printf_i+0x182>
 800432c:	4616      	mov	r6, r2
 800432e:	e7bb      	b.n	80042a8 <_printf_i+0x130>
 8004330:	680b      	ldr	r3, [r1, #0]
 8004332:	6826      	ldr	r6, [r4, #0]
 8004334:	6960      	ldr	r0, [r4, #20]
 8004336:	1d1d      	adds	r5, r3, #4
 8004338:	600d      	str	r5, [r1, #0]
 800433a:	0635      	lsls	r5, r6, #24
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	d501      	bpl.n	8004344 <_printf_i+0x1cc>
 8004340:	6018      	str	r0, [r3, #0]
 8004342:	e002      	b.n	800434a <_printf_i+0x1d2>
 8004344:	0671      	lsls	r1, r6, #25
 8004346:	d5fb      	bpl.n	8004340 <_printf_i+0x1c8>
 8004348:	8018      	strh	r0, [r3, #0]
 800434a:	2300      	movs	r3, #0
 800434c:	6123      	str	r3, [r4, #16]
 800434e:	4616      	mov	r6, r2
 8004350:	e7ba      	b.n	80042c8 <_printf_i+0x150>
 8004352:	680b      	ldr	r3, [r1, #0]
 8004354:	1d1a      	adds	r2, r3, #4
 8004356:	600a      	str	r2, [r1, #0]
 8004358:	681e      	ldr	r6, [r3, #0]
 800435a:	6862      	ldr	r2, [r4, #4]
 800435c:	2100      	movs	r1, #0
 800435e:	4630      	mov	r0, r6
 8004360:	f7fb ff3e 	bl	80001e0 <memchr>
 8004364:	b108      	cbz	r0, 800436a <_printf_i+0x1f2>
 8004366:	1b80      	subs	r0, r0, r6
 8004368:	6060      	str	r0, [r4, #4]
 800436a:	6863      	ldr	r3, [r4, #4]
 800436c:	6123      	str	r3, [r4, #16]
 800436e:	2300      	movs	r3, #0
 8004370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004374:	e7a8      	b.n	80042c8 <_printf_i+0x150>
 8004376:	6923      	ldr	r3, [r4, #16]
 8004378:	4632      	mov	r2, r6
 800437a:	4649      	mov	r1, r9
 800437c:	4640      	mov	r0, r8
 800437e:	47d0      	blx	sl
 8004380:	3001      	adds	r0, #1
 8004382:	d0ab      	beq.n	80042dc <_printf_i+0x164>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	079b      	lsls	r3, r3, #30
 8004388:	d413      	bmi.n	80043b2 <_printf_i+0x23a>
 800438a:	68e0      	ldr	r0, [r4, #12]
 800438c:	9b03      	ldr	r3, [sp, #12]
 800438e:	4298      	cmp	r0, r3
 8004390:	bfb8      	it	lt
 8004392:	4618      	movlt	r0, r3
 8004394:	e7a4      	b.n	80042e0 <_printf_i+0x168>
 8004396:	2301      	movs	r3, #1
 8004398:	4632      	mov	r2, r6
 800439a:	4649      	mov	r1, r9
 800439c:	4640      	mov	r0, r8
 800439e:	47d0      	blx	sl
 80043a0:	3001      	adds	r0, #1
 80043a2:	d09b      	beq.n	80042dc <_printf_i+0x164>
 80043a4:	3501      	adds	r5, #1
 80043a6:	68e3      	ldr	r3, [r4, #12]
 80043a8:	9903      	ldr	r1, [sp, #12]
 80043aa:	1a5b      	subs	r3, r3, r1
 80043ac:	42ab      	cmp	r3, r5
 80043ae:	dcf2      	bgt.n	8004396 <_printf_i+0x21e>
 80043b0:	e7eb      	b.n	800438a <_printf_i+0x212>
 80043b2:	2500      	movs	r5, #0
 80043b4:	f104 0619 	add.w	r6, r4, #25
 80043b8:	e7f5      	b.n	80043a6 <_printf_i+0x22e>
 80043ba:	bf00      	nop
 80043bc:	0800688a 	.word	0x0800688a
 80043c0:	0800689b 	.word	0x0800689b

080043c4 <siprintf>:
 80043c4:	b40e      	push	{r1, r2, r3}
 80043c6:	b500      	push	{lr}
 80043c8:	b09c      	sub	sp, #112	; 0x70
 80043ca:	ab1d      	add	r3, sp, #116	; 0x74
 80043cc:	9002      	str	r0, [sp, #8]
 80043ce:	9006      	str	r0, [sp, #24]
 80043d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043d4:	4809      	ldr	r0, [pc, #36]	; (80043fc <siprintf+0x38>)
 80043d6:	9107      	str	r1, [sp, #28]
 80043d8:	9104      	str	r1, [sp, #16]
 80043da:	4909      	ldr	r1, [pc, #36]	; (8004400 <siprintf+0x3c>)
 80043dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80043e0:	9105      	str	r1, [sp, #20]
 80043e2:	6800      	ldr	r0, [r0, #0]
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	a902      	add	r1, sp, #8
 80043e8:	f001 fb34 	bl	8005a54 <_svfiprintf_r>
 80043ec:	9b02      	ldr	r3, [sp, #8]
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	b01c      	add	sp, #112	; 0x70
 80043f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043f8:	b003      	add	sp, #12
 80043fa:	4770      	bx	lr
 80043fc:	20000010 	.word	0x20000010
 8004400:	ffff0208 	.word	0xffff0208

08004404 <quorem>:
 8004404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	6903      	ldr	r3, [r0, #16]
 800440a:	690c      	ldr	r4, [r1, #16]
 800440c:	42a3      	cmp	r3, r4
 800440e:	4607      	mov	r7, r0
 8004410:	f2c0 8081 	blt.w	8004516 <quorem+0x112>
 8004414:	3c01      	subs	r4, #1
 8004416:	f101 0814 	add.w	r8, r1, #20
 800441a:	f100 0514 	add.w	r5, r0, #20
 800441e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004428:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800442c:	3301      	adds	r3, #1
 800442e:	429a      	cmp	r2, r3
 8004430:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004434:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004438:	fbb2 f6f3 	udiv	r6, r2, r3
 800443c:	d331      	bcc.n	80044a2 <quorem+0x9e>
 800443e:	f04f 0e00 	mov.w	lr, #0
 8004442:	4640      	mov	r0, r8
 8004444:	46ac      	mov	ip, r5
 8004446:	46f2      	mov	sl, lr
 8004448:	f850 2b04 	ldr.w	r2, [r0], #4
 800444c:	b293      	uxth	r3, r2
 800444e:	fb06 e303 	mla	r3, r6, r3, lr
 8004452:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004456:	b29b      	uxth	r3, r3
 8004458:	ebaa 0303 	sub.w	r3, sl, r3
 800445c:	0c12      	lsrs	r2, r2, #16
 800445e:	f8dc a000 	ldr.w	sl, [ip]
 8004462:	fb06 e202 	mla	r2, r6, r2, lr
 8004466:	fa13 f38a 	uxtah	r3, r3, sl
 800446a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800446e:	fa1f fa82 	uxth.w	sl, r2
 8004472:	f8dc 2000 	ldr.w	r2, [ip]
 8004476:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800447a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800447e:	b29b      	uxth	r3, r3
 8004480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004484:	4581      	cmp	r9, r0
 8004486:	f84c 3b04 	str.w	r3, [ip], #4
 800448a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800448e:	d2db      	bcs.n	8004448 <quorem+0x44>
 8004490:	f855 300b 	ldr.w	r3, [r5, fp]
 8004494:	b92b      	cbnz	r3, 80044a2 <quorem+0x9e>
 8004496:	9b01      	ldr	r3, [sp, #4]
 8004498:	3b04      	subs	r3, #4
 800449a:	429d      	cmp	r5, r3
 800449c:	461a      	mov	r2, r3
 800449e:	d32e      	bcc.n	80044fe <quorem+0xfa>
 80044a0:	613c      	str	r4, [r7, #16]
 80044a2:	4638      	mov	r0, r7
 80044a4:	f001 f8c0 	bl	8005628 <__mcmp>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	db24      	blt.n	80044f6 <quorem+0xf2>
 80044ac:	3601      	adds	r6, #1
 80044ae:	4628      	mov	r0, r5
 80044b0:	f04f 0c00 	mov.w	ip, #0
 80044b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80044b8:	f8d0 e000 	ldr.w	lr, [r0]
 80044bc:	b293      	uxth	r3, r2
 80044be:	ebac 0303 	sub.w	r3, ip, r3
 80044c2:	0c12      	lsrs	r2, r2, #16
 80044c4:	fa13 f38e 	uxtah	r3, r3, lr
 80044c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80044cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044d6:	45c1      	cmp	r9, r8
 80044d8:	f840 3b04 	str.w	r3, [r0], #4
 80044dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80044e0:	d2e8      	bcs.n	80044b4 <quorem+0xb0>
 80044e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044ea:	b922      	cbnz	r2, 80044f6 <quorem+0xf2>
 80044ec:	3b04      	subs	r3, #4
 80044ee:	429d      	cmp	r5, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	d30a      	bcc.n	800450a <quorem+0x106>
 80044f4:	613c      	str	r4, [r7, #16]
 80044f6:	4630      	mov	r0, r6
 80044f8:	b003      	add	sp, #12
 80044fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	3b04      	subs	r3, #4
 8004502:	2a00      	cmp	r2, #0
 8004504:	d1cc      	bne.n	80044a0 <quorem+0x9c>
 8004506:	3c01      	subs	r4, #1
 8004508:	e7c7      	b.n	800449a <quorem+0x96>
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	3b04      	subs	r3, #4
 800450e:	2a00      	cmp	r2, #0
 8004510:	d1f0      	bne.n	80044f4 <quorem+0xf0>
 8004512:	3c01      	subs	r4, #1
 8004514:	e7eb      	b.n	80044ee <quorem+0xea>
 8004516:	2000      	movs	r0, #0
 8004518:	e7ee      	b.n	80044f8 <quorem+0xf4>
 800451a:	0000      	movs	r0, r0
 800451c:	0000      	movs	r0, r0
	...

08004520 <_dtoa_r>:
 8004520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004524:	ed2d 8b02 	vpush	{d8}
 8004528:	ec57 6b10 	vmov	r6, r7, d0
 800452c:	b095      	sub	sp, #84	; 0x54
 800452e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004530:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004534:	9105      	str	r1, [sp, #20]
 8004536:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800453a:	4604      	mov	r4, r0
 800453c:	9209      	str	r2, [sp, #36]	; 0x24
 800453e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004540:	b975      	cbnz	r5, 8004560 <_dtoa_r+0x40>
 8004542:	2010      	movs	r0, #16
 8004544:	f000 fddc 	bl	8005100 <malloc>
 8004548:	4602      	mov	r2, r0
 800454a:	6260      	str	r0, [r4, #36]	; 0x24
 800454c:	b920      	cbnz	r0, 8004558 <_dtoa_r+0x38>
 800454e:	4bb2      	ldr	r3, [pc, #712]	; (8004818 <_dtoa_r+0x2f8>)
 8004550:	21ea      	movs	r1, #234	; 0xea
 8004552:	48b2      	ldr	r0, [pc, #712]	; (800481c <_dtoa_r+0x2fc>)
 8004554:	f001 fb8e 	bl	8005c74 <__assert_func>
 8004558:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800455c:	6005      	str	r5, [r0, #0]
 800455e:	60c5      	str	r5, [r0, #12]
 8004560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	b151      	cbz	r1, 800457c <_dtoa_r+0x5c>
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	604a      	str	r2, [r1, #4]
 800456a:	2301      	movs	r3, #1
 800456c:	4093      	lsls	r3, r2
 800456e:	608b      	str	r3, [r1, #8]
 8004570:	4620      	mov	r0, r4
 8004572:	f000 fe1b 	bl	80051ac <_Bfree>
 8004576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	1e3b      	subs	r3, r7, #0
 800457e:	bfb9      	ittee	lt
 8004580:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004584:	9303      	strlt	r3, [sp, #12]
 8004586:	2300      	movge	r3, #0
 8004588:	f8c8 3000 	strge.w	r3, [r8]
 800458c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004590:	4ba3      	ldr	r3, [pc, #652]	; (8004820 <_dtoa_r+0x300>)
 8004592:	bfbc      	itt	lt
 8004594:	2201      	movlt	r2, #1
 8004596:	f8c8 2000 	strlt.w	r2, [r8]
 800459a:	ea33 0309 	bics.w	r3, r3, r9
 800459e:	d11b      	bne.n	80045d8 <_dtoa_r+0xb8>
 80045a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80045ac:	4333      	orrs	r3, r6
 80045ae:	f000 857a 	beq.w	80050a6 <_dtoa_r+0xb86>
 80045b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045b4:	b963      	cbnz	r3, 80045d0 <_dtoa_r+0xb0>
 80045b6:	4b9b      	ldr	r3, [pc, #620]	; (8004824 <_dtoa_r+0x304>)
 80045b8:	e024      	b.n	8004604 <_dtoa_r+0xe4>
 80045ba:	4b9b      	ldr	r3, [pc, #620]	; (8004828 <_dtoa_r+0x308>)
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	3308      	adds	r3, #8
 80045c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	9800      	ldr	r0, [sp, #0]
 80045c6:	b015      	add	sp, #84	; 0x54
 80045c8:	ecbd 8b02 	vpop	{d8}
 80045cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d0:	4b94      	ldr	r3, [pc, #592]	; (8004824 <_dtoa_r+0x304>)
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	3303      	adds	r3, #3
 80045d6:	e7f3      	b.n	80045c0 <_dtoa_r+0xa0>
 80045d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80045dc:	2200      	movs	r2, #0
 80045de:	ec51 0b17 	vmov	r0, r1, d7
 80045e2:	2300      	movs	r3, #0
 80045e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80045e8:	f7fc fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80045ec:	4680      	mov	r8, r0
 80045ee:	b158      	cbz	r0, 8004608 <_dtoa_r+0xe8>
 80045f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045f2:	2301      	movs	r3, #1
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8551 	beq.w	80050a0 <_dtoa_r+0xb80>
 80045fe:	488b      	ldr	r0, [pc, #556]	; (800482c <_dtoa_r+0x30c>)
 8004600:	6018      	str	r0, [r3, #0]
 8004602:	1e43      	subs	r3, r0, #1
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	e7dd      	b.n	80045c4 <_dtoa_r+0xa4>
 8004608:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800460c:	aa12      	add	r2, sp, #72	; 0x48
 800460e:	a913      	add	r1, sp, #76	; 0x4c
 8004610:	4620      	mov	r0, r4
 8004612:	f001 f8ad 	bl	8005770 <__d2b>
 8004616:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800461a:	4683      	mov	fp, r0
 800461c:	2d00      	cmp	r5, #0
 800461e:	d07c      	beq.n	800471a <_dtoa_r+0x1fa>
 8004620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004622:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004626:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800462a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800462e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004632:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004636:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800463a:	4b7d      	ldr	r3, [pc, #500]	; (8004830 <_dtoa_r+0x310>)
 800463c:	2200      	movs	r2, #0
 800463e:	4630      	mov	r0, r6
 8004640:	4639      	mov	r1, r7
 8004642:	f7fb fe21 	bl	8000288 <__aeabi_dsub>
 8004646:	a36e      	add	r3, pc, #440	; (adr r3, 8004800 <_dtoa_r+0x2e0>)
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fb ffd4 	bl	80005f8 <__aeabi_dmul>
 8004650:	a36d      	add	r3, pc, #436	; (adr r3, 8004808 <_dtoa_r+0x2e8>)
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f7fb fe19 	bl	800028c <__adddf3>
 800465a:	4606      	mov	r6, r0
 800465c:	4628      	mov	r0, r5
 800465e:	460f      	mov	r7, r1
 8004660:	f7fb ff60 	bl	8000524 <__aeabi_i2d>
 8004664:	a36a      	add	r3, pc, #424	; (adr r3, 8004810 <_dtoa_r+0x2f0>)
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	f7fb ffc5 	bl	80005f8 <__aeabi_dmul>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4630      	mov	r0, r6
 8004674:	4639      	mov	r1, r7
 8004676:	f7fb fe09 	bl	800028c <__adddf3>
 800467a:	4606      	mov	r6, r0
 800467c:	460f      	mov	r7, r1
 800467e:	f7fc fa6b 	bl	8000b58 <__aeabi_d2iz>
 8004682:	2200      	movs	r2, #0
 8004684:	4682      	mov	sl, r0
 8004686:	2300      	movs	r3, #0
 8004688:	4630      	mov	r0, r6
 800468a:	4639      	mov	r1, r7
 800468c:	f7fc fa26 	bl	8000adc <__aeabi_dcmplt>
 8004690:	b148      	cbz	r0, 80046a6 <_dtoa_r+0x186>
 8004692:	4650      	mov	r0, sl
 8004694:	f7fb ff46 	bl	8000524 <__aeabi_i2d>
 8004698:	4632      	mov	r2, r6
 800469a:	463b      	mov	r3, r7
 800469c:	f7fc fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 80046a0:	b908      	cbnz	r0, 80046a6 <_dtoa_r+0x186>
 80046a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046a6:	f1ba 0f16 	cmp.w	sl, #22
 80046aa:	d854      	bhi.n	8004756 <_dtoa_r+0x236>
 80046ac:	4b61      	ldr	r3, [pc, #388]	; (8004834 <_dtoa_r+0x314>)
 80046ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80046ba:	f7fc fa0f 	bl	8000adc <__aeabi_dcmplt>
 80046be:	2800      	cmp	r0, #0
 80046c0:	d04b      	beq.n	800475a <_dtoa_r+0x23a>
 80046c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046c6:	2300      	movs	r3, #0
 80046c8:	930e      	str	r3, [sp, #56]	; 0x38
 80046ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046cc:	1b5d      	subs	r5, r3, r5
 80046ce:	1e6b      	subs	r3, r5, #1
 80046d0:	9304      	str	r3, [sp, #16]
 80046d2:	bf43      	ittte	mi
 80046d4:	2300      	movmi	r3, #0
 80046d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80046da:	9304      	strmi	r3, [sp, #16]
 80046dc:	f04f 0800 	movpl.w	r8, #0
 80046e0:	f1ba 0f00 	cmp.w	sl, #0
 80046e4:	db3b      	blt.n	800475e <_dtoa_r+0x23e>
 80046e6:	9b04      	ldr	r3, [sp, #16]
 80046e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80046ec:	4453      	add	r3, sl
 80046ee:	9304      	str	r3, [sp, #16]
 80046f0:	2300      	movs	r3, #0
 80046f2:	9306      	str	r3, [sp, #24]
 80046f4:	9b05      	ldr	r3, [sp, #20]
 80046f6:	2b09      	cmp	r3, #9
 80046f8:	d869      	bhi.n	80047ce <_dtoa_r+0x2ae>
 80046fa:	2b05      	cmp	r3, #5
 80046fc:	bfc4      	itt	gt
 80046fe:	3b04      	subgt	r3, #4
 8004700:	9305      	strgt	r3, [sp, #20]
 8004702:	9b05      	ldr	r3, [sp, #20]
 8004704:	f1a3 0302 	sub.w	r3, r3, #2
 8004708:	bfcc      	ite	gt
 800470a:	2500      	movgt	r5, #0
 800470c:	2501      	movle	r5, #1
 800470e:	2b03      	cmp	r3, #3
 8004710:	d869      	bhi.n	80047e6 <_dtoa_r+0x2c6>
 8004712:	e8df f003 	tbb	[pc, r3]
 8004716:	4e2c      	.short	0x4e2c
 8004718:	5a4c      	.short	0x5a4c
 800471a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800471e:	441d      	add	r5, r3
 8004720:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004724:	2b20      	cmp	r3, #32
 8004726:	bfc1      	itttt	gt
 8004728:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800472c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004730:	fa09 f303 	lslgt.w	r3, r9, r3
 8004734:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004738:	bfda      	itte	le
 800473a:	f1c3 0320 	rsble	r3, r3, #32
 800473e:	fa06 f003 	lslle.w	r0, r6, r3
 8004742:	4318      	orrgt	r0, r3
 8004744:	f7fb fede 	bl	8000504 <__aeabi_ui2d>
 8004748:	2301      	movs	r3, #1
 800474a:	4606      	mov	r6, r0
 800474c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004750:	3d01      	subs	r5, #1
 8004752:	9310      	str	r3, [sp, #64]	; 0x40
 8004754:	e771      	b.n	800463a <_dtoa_r+0x11a>
 8004756:	2301      	movs	r3, #1
 8004758:	e7b6      	b.n	80046c8 <_dtoa_r+0x1a8>
 800475a:	900e      	str	r0, [sp, #56]	; 0x38
 800475c:	e7b5      	b.n	80046ca <_dtoa_r+0x1aa>
 800475e:	f1ca 0300 	rsb	r3, sl, #0
 8004762:	9306      	str	r3, [sp, #24]
 8004764:	2300      	movs	r3, #0
 8004766:	eba8 080a 	sub.w	r8, r8, sl
 800476a:	930d      	str	r3, [sp, #52]	; 0x34
 800476c:	e7c2      	b.n	80046f4 <_dtoa_r+0x1d4>
 800476e:	2300      	movs	r3, #0
 8004770:	9308      	str	r3, [sp, #32]
 8004772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004774:	2b00      	cmp	r3, #0
 8004776:	dc39      	bgt.n	80047ec <_dtoa_r+0x2cc>
 8004778:	f04f 0901 	mov.w	r9, #1
 800477c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004780:	464b      	mov	r3, r9
 8004782:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004786:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004788:	2200      	movs	r2, #0
 800478a:	6042      	str	r2, [r0, #4]
 800478c:	2204      	movs	r2, #4
 800478e:	f102 0614 	add.w	r6, r2, #20
 8004792:	429e      	cmp	r6, r3
 8004794:	6841      	ldr	r1, [r0, #4]
 8004796:	d92f      	bls.n	80047f8 <_dtoa_r+0x2d8>
 8004798:	4620      	mov	r0, r4
 800479a:	f000 fcc7 	bl	800512c <_Balloc>
 800479e:	9000      	str	r0, [sp, #0]
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d14b      	bne.n	800483c <_dtoa_r+0x31c>
 80047a4:	4b24      	ldr	r3, [pc, #144]	; (8004838 <_dtoa_r+0x318>)
 80047a6:	4602      	mov	r2, r0
 80047a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80047ac:	e6d1      	b.n	8004552 <_dtoa_r+0x32>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e7de      	b.n	8004770 <_dtoa_r+0x250>
 80047b2:	2300      	movs	r3, #0
 80047b4:	9308      	str	r3, [sp, #32]
 80047b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b8:	eb0a 0903 	add.w	r9, sl, r3
 80047bc:	f109 0301 	add.w	r3, r9, #1
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	bfb8      	it	lt
 80047c6:	2301      	movlt	r3, #1
 80047c8:	e7dd      	b.n	8004786 <_dtoa_r+0x266>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e7f2      	b.n	80047b4 <_dtoa_r+0x294>
 80047ce:	2501      	movs	r5, #1
 80047d0:	2300      	movs	r3, #0
 80047d2:	9305      	str	r3, [sp, #20]
 80047d4:	9508      	str	r5, [sp, #32]
 80047d6:	f04f 39ff 	mov.w	r9, #4294967295
 80047da:	2200      	movs	r2, #0
 80047dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80047e0:	2312      	movs	r3, #18
 80047e2:	9209      	str	r2, [sp, #36]	; 0x24
 80047e4:	e7cf      	b.n	8004786 <_dtoa_r+0x266>
 80047e6:	2301      	movs	r3, #1
 80047e8:	9308      	str	r3, [sp, #32]
 80047ea:	e7f4      	b.n	80047d6 <_dtoa_r+0x2b6>
 80047ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80047f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80047f4:	464b      	mov	r3, r9
 80047f6:	e7c6      	b.n	8004786 <_dtoa_r+0x266>
 80047f8:	3101      	adds	r1, #1
 80047fa:	6041      	str	r1, [r0, #4]
 80047fc:	0052      	lsls	r2, r2, #1
 80047fe:	e7c6      	b.n	800478e <_dtoa_r+0x26e>
 8004800:	636f4361 	.word	0x636f4361
 8004804:	3fd287a7 	.word	0x3fd287a7
 8004808:	8b60c8b3 	.word	0x8b60c8b3
 800480c:	3fc68a28 	.word	0x3fc68a28
 8004810:	509f79fb 	.word	0x509f79fb
 8004814:	3fd34413 	.word	0x3fd34413
 8004818:	080068b9 	.word	0x080068b9
 800481c:	080068d0 	.word	0x080068d0
 8004820:	7ff00000 	.word	0x7ff00000
 8004824:	080068b5 	.word	0x080068b5
 8004828:	080068ac 	.word	0x080068ac
 800482c:	08006889 	.word	0x08006889
 8004830:	3ff80000 	.word	0x3ff80000
 8004834:	080069c8 	.word	0x080069c8
 8004838:	0800692f 	.word	0x0800692f
 800483c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800483e:	9a00      	ldr	r2, [sp, #0]
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	9b01      	ldr	r3, [sp, #4]
 8004844:	2b0e      	cmp	r3, #14
 8004846:	f200 80ad 	bhi.w	80049a4 <_dtoa_r+0x484>
 800484a:	2d00      	cmp	r5, #0
 800484c:	f000 80aa 	beq.w	80049a4 <_dtoa_r+0x484>
 8004850:	f1ba 0f00 	cmp.w	sl, #0
 8004854:	dd36      	ble.n	80048c4 <_dtoa_r+0x3a4>
 8004856:	4ac3      	ldr	r2, [pc, #780]	; (8004b64 <_dtoa_r+0x644>)
 8004858:	f00a 030f 	and.w	r3, sl, #15
 800485c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004860:	ed93 7b00 	vldr	d7, [r3]
 8004864:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004868:	ea4f 172a 	mov.w	r7, sl, asr #4
 800486c:	eeb0 8a47 	vmov.f32	s16, s14
 8004870:	eef0 8a67 	vmov.f32	s17, s15
 8004874:	d016      	beq.n	80048a4 <_dtoa_r+0x384>
 8004876:	4bbc      	ldr	r3, [pc, #752]	; (8004b68 <_dtoa_r+0x648>)
 8004878:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800487c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004880:	f7fb ffe4 	bl	800084c <__aeabi_ddiv>
 8004884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004888:	f007 070f 	and.w	r7, r7, #15
 800488c:	2503      	movs	r5, #3
 800488e:	4eb6      	ldr	r6, [pc, #728]	; (8004b68 <_dtoa_r+0x648>)
 8004890:	b957      	cbnz	r7, 80048a8 <_dtoa_r+0x388>
 8004892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004896:	ec53 2b18 	vmov	r2, r3, d8
 800489a:	f7fb ffd7 	bl	800084c <__aeabi_ddiv>
 800489e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048a2:	e029      	b.n	80048f8 <_dtoa_r+0x3d8>
 80048a4:	2502      	movs	r5, #2
 80048a6:	e7f2      	b.n	800488e <_dtoa_r+0x36e>
 80048a8:	07f9      	lsls	r1, r7, #31
 80048aa:	d508      	bpl.n	80048be <_dtoa_r+0x39e>
 80048ac:	ec51 0b18 	vmov	r0, r1, d8
 80048b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80048b4:	f7fb fea0 	bl	80005f8 <__aeabi_dmul>
 80048b8:	ec41 0b18 	vmov	d8, r0, r1
 80048bc:	3501      	adds	r5, #1
 80048be:	107f      	asrs	r7, r7, #1
 80048c0:	3608      	adds	r6, #8
 80048c2:	e7e5      	b.n	8004890 <_dtoa_r+0x370>
 80048c4:	f000 80a6 	beq.w	8004a14 <_dtoa_r+0x4f4>
 80048c8:	f1ca 0600 	rsb	r6, sl, #0
 80048cc:	4ba5      	ldr	r3, [pc, #660]	; (8004b64 <_dtoa_r+0x644>)
 80048ce:	4fa6      	ldr	r7, [pc, #664]	; (8004b68 <_dtoa_r+0x648>)
 80048d0:	f006 020f 	and.w	r2, r6, #15
 80048d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048e0:	f7fb fe8a 	bl	80005f8 <__aeabi_dmul>
 80048e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048e8:	1136      	asrs	r6, r6, #4
 80048ea:	2300      	movs	r3, #0
 80048ec:	2502      	movs	r5, #2
 80048ee:	2e00      	cmp	r6, #0
 80048f0:	f040 8085 	bne.w	80049fe <_dtoa_r+0x4de>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1d2      	bne.n	800489e <_dtoa_r+0x37e>
 80048f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 808c 	beq.w	8004a18 <_dtoa_r+0x4f8>
 8004900:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004904:	4b99      	ldr	r3, [pc, #612]	; (8004b6c <_dtoa_r+0x64c>)
 8004906:	2200      	movs	r2, #0
 8004908:	4630      	mov	r0, r6
 800490a:	4639      	mov	r1, r7
 800490c:	f7fc f8e6 	bl	8000adc <__aeabi_dcmplt>
 8004910:	2800      	cmp	r0, #0
 8004912:	f000 8081 	beq.w	8004a18 <_dtoa_r+0x4f8>
 8004916:	9b01      	ldr	r3, [sp, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d07d      	beq.n	8004a18 <_dtoa_r+0x4f8>
 800491c:	f1b9 0f00 	cmp.w	r9, #0
 8004920:	dd3c      	ble.n	800499c <_dtoa_r+0x47c>
 8004922:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004926:	9307      	str	r3, [sp, #28]
 8004928:	2200      	movs	r2, #0
 800492a:	4b91      	ldr	r3, [pc, #580]	; (8004b70 <_dtoa_r+0x650>)
 800492c:	4630      	mov	r0, r6
 800492e:	4639      	mov	r1, r7
 8004930:	f7fb fe62 	bl	80005f8 <__aeabi_dmul>
 8004934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004938:	3501      	adds	r5, #1
 800493a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800493e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004942:	4628      	mov	r0, r5
 8004944:	f7fb fdee 	bl	8000524 <__aeabi_i2d>
 8004948:	4632      	mov	r2, r6
 800494a:	463b      	mov	r3, r7
 800494c:	f7fb fe54 	bl	80005f8 <__aeabi_dmul>
 8004950:	4b88      	ldr	r3, [pc, #544]	; (8004b74 <_dtoa_r+0x654>)
 8004952:	2200      	movs	r2, #0
 8004954:	f7fb fc9a 	bl	800028c <__adddf3>
 8004958:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800495c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004960:	9303      	str	r3, [sp, #12]
 8004962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004964:	2b00      	cmp	r3, #0
 8004966:	d15c      	bne.n	8004a22 <_dtoa_r+0x502>
 8004968:	4b83      	ldr	r3, [pc, #524]	; (8004b78 <_dtoa_r+0x658>)
 800496a:	2200      	movs	r2, #0
 800496c:	4630      	mov	r0, r6
 800496e:	4639      	mov	r1, r7
 8004970:	f7fb fc8a 	bl	8000288 <__aeabi_dsub>
 8004974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004978:	4606      	mov	r6, r0
 800497a:	460f      	mov	r7, r1
 800497c:	f7fc f8cc 	bl	8000b18 <__aeabi_dcmpgt>
 8004980:	2800      	cmp	r0, #0
 8004982:	f040 8296 	bne.w	8004eb2 <_dtoa_r+0x992>
 8004986:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800498a:	4630      	mov	r0, r6
 800498c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004990:	4639      	mov	r1, r7
 8004992:	f7fc f8a3 	bl	8000adc <__aeabi_dcmplt>
 8004996:	2800      	cmp	r0, #0
 8004998:	f040 8288 	bne.w	8004eac <_dtoa_r+0x98c>
 800499c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80049a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f2c0 8158 	blt.w	8004c5c <_dtoa_r+0x73c>
 80049ac:	f1ba 0f0e 	cmp.w	sl, #14
 80049b0:	f300 8154 	bgt.w	8004c5c <_dtoa_r+0x73c>
 80049b4:	4b6b      	ldr	r3, [pc, #428]	; (8004b64 <_dtoa_r+0x644>)
 80049b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80049ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f280 80e3 	bge.w	8004b8c <_dtoa_r+0x66c>
 80049c6:	9b01      	ldr	r3, [sp, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f300 80df 	bgt.w	8004b8c <_dtoa_r+0x66c>
 80049ce:	f040 826d 	bne.w	8004eac <_dtoa_r+0x98c>
 80049d2:	4b69      	ldr	r3, [pc, #420]	; (8004b78 <_dtoa_r+0x658>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	4640      	mov	r0, r8
 80049d8:	4649      	mov	r1, r9
 80049da:	f7fb fe0d 	bl	80005f8 <__aeabi_dmul>
 80049de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049e2:	f7fc f88f 	bl	8000b04 <__aeabi_dcmpge>
 80049e6:	9e01      	ldr	r6, [sp, #4]
 80049e8:	4637      	mov	r7, r6
 80049ea:	2800      	cmp	r0, #0
 80049ec:	f040 8243 	bne.w	8004e76 <_dtoa_r+0x956>
 80049f0:	9d00      	ldr	r5, [sp, #0]
 80049f2:	2331      	movs	r3, #49	; 0x31
 80049f4:	f805 3b01 	strb.w	r3, [r5], #1
 80049f8:	f10a 0a01 	add.w	sl, sl, #1
 80049fc:	e23f      	b.n	8004e7e <_dtoa_r+0x95e>
 80049fe:	07f2      	lsls	r2, r6, #31
 8004a00:	d505      	bpl.n	8004a0e <_dtoa_r+0x4ee>
 8004a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a06:	f7fb fdf7 	bl	80005f8 <__aeabi_dmul>
 8004a0a:	3501      	adds	r5, #1
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	1076      	asrs	r6, r6, #1
 8004a10:	3708      	adds	r7, #8
 8004a12:	e76c      	b.n	80048ee <_dtoa_r+0x3ce>
 8004a14:	2502      	movs	r5, #2
 8004a16:	e76f      	b.n	80048f8 <_dtoa_r+0x3d8>
 8004a18:	9b01      	ldr	r3, [sp, #4]
 8004a1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8004a1e:	930c      	str	r3, [sp, #48]	; 0x30
 8004a20:	e78d      	b.n	800493e <_dtoa_r+0x41e>
 8004a22:	9900      	ldr	r1, [sp, #0]
 8004a24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a28:	4b4e      	ldr	r3, [pc, #312]	; (8004b64 <_dtoa_r+0x644>)
 8004a2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004a2e:	4401      	add	r1, r0
 8004a30:	9102      	str	r1, [sp, #8]
 8004a32:	9908      	ldr	r1, [sp, #32]
 8004a34:	eeb0 8a47 	vmov.f32	s16, s14
 8004a38:	eef0 8a67 	vmov.f32	s17, s15
 8004a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a44:	2900      	cmp	r1, #0
 8004a46:	d045      	beq.n	8004ad4 <_dtoa_r+0x5b4>
 8004a48:	494c      	ldr	r1, [pc, #304]	; (8004b7c <_dtoa_r+0x65c>)
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f7fb fefe 	bl	800084c <__aeabi_ddiv>
 8004a50:	ec53 2b18 	vmov	r2, r3, d8
 8004a54:	f7fb fc18 	bl	8000288 <__aeabi_dsub>
 8004a58:	9d00      	ldr	r5, [sp, #0]
 8004a5a:	ec41 0b18 	vmov	d8, r0, r1
 8004a5e:	4639      	mov	r1, r7
 8004a60:	4630      	mov	r0, r6
 8004a62:	f7fc f879 	bl	8000b58 <__aeabi_d2iz>
 8004a66:	900c      	str	r0, [sp, #48]	; 0x30
 8004a68:	f7fb fd5c 	bl	8000524 <__aeabi_i2d>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4630      	mov	r0, r6
 8004a72:	4639      	mov	r1, r7
 8004a74:	f7fb fc08 	bl	8000288 <__aeabi_dsub>
 8004a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a7a:	3330      	adds	r3, #48	; 0x30
 8004a7c:	f805 3b01 	strb.w	r3, [r5], #1
 8004a80:	ec53 2b18 	vmov	r2, r3, d8
 8004a84:	4606      	mov	r6, r0
 8004a86:	460f      	mov	r7, r1
 8004a88:	f7fc f828 	bl	8000adc <__aeabi_dcmplt>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d165      	bne.n	8004b5c <_dtoa_r+0x63c>
 8004a90:	4632      	mov	r2, r6
 8004a92:	463b      	mov	r3, r7
 8004a94:	4935      	ldr	r1, [pc, #212]	; (8004b6c <_dtoa_r+0x64c>)
 8004a96:	2000      	movs	r0, #0
 8004a98:	f7fb fbf6 	bl	8000288 <__aeabi_dsub>
 8004a9c:	ec53 2b18 	vmov	r2, r3, d8
 8004aa0:	f7fc f81c 	bl	8000adc <__aeabi_dcmplt>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	f040 80b9 	bne.w	8004c1c <_dtoa_r+0x6fc>
 8004aaa:	9b02      	ldr	r3, [sp, #8]
 8004aac:	429d      	cmp	r5, r3
 8004aae:	f43f af75 	beq.w	800499c <_dtoa_r+0x47c>
 8004ab2:	4b2f      	ldr	r3, [pc, #188]	; (8004b70 <_dtoa_r+0x650>)
 8004ab4:	ec51 0b18 	vmov	r0, r1, d8
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f7fb fd9d 	bl	80005f8 <__aeabi_dmul>
 8004abe:	4b2c      	ldr	r3, [pc, #176]	; (8004b70 <_dtoa_r+0x650>)
 8004ac0:	ec41 0b18 	vmov	d8, r0, r1
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	4639      	mov	r1, r7
 8004aca:	f7fb fd95 	bl	80005f8 <__aeabi_dmul>
 8004ace:	4606      	mov	r6, r0
 8004ad0:	460f      	mov	r7, r1
 8004ad2:	e7c4      	b.n	8004a5e <_dtoa_r+0x53e>
 8004ad4:	ec51 0b17 	vmov	r0, r1, d7
 8004ad8:	f7fb fd8e 	bl	80005f8 <__aeabi_dmul>
 8004adc:	9b02      	ldr	r3, [sp, #8]
 8004ade:	9d00      	ldr	r5, [sp, #0]
 8004ae0:	930c      	str	r3, [sp, #48]	; 0x30
 8004ae2:	ec41 0b18 	vmov	d8, r0, r1
 8004ae6:	4639      	mov	r1, r7
 8004ae8:	4630      	mov	r0, r6
 8004aea:	f7fc f835 	bl	8000b58 <__aeabi_d2iz>
 8004aee:	9011      	str	r0, [sp, #68]	; 0x44
 8004af0:	f7fb fd18 	bl	8000524 <__aeabi_i2d>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4630      	mov	r0, r6
 8004afa:	4639      	mov	r1, r7
 8004afc:	f7fb fbc4 	bl	8000288 <__aeabi_dsub>
 8004b00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b02:	3330      	adds	r3, #48	; 0x30
 8004b04:	f805 3b01 	strb.w	r3, [r5], #1
 8004b08:	9b02      	ldr	r3, [sp, #8]
 8004b0a:	429d      	cmp	r5, r3
 8004b0c:	4606      	mov	r6, r0
 8004b0e:	460f      	mov	r7, r1
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	d134      	bne.n	8004b80 <_dtoa_r+0x660>
 8004b16:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <_dtoa_r+0x65c>)
 8004b18:	ec51 0b18 	vmov	r0, r1, d8
 8004b1c:	f7fb fbb6 	bl	800028c <__adddf3>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4630      	mov	r0, r6
 8004b26:	4639      	mov	r1, r7
 8004b28:	f7fb fff6 	bl	8000b18 <__aeabi_dcmpgt>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d175      	bne.n	8004c1c <_dtoa_r+0x6fc>
 8004b30:	ec53 2b18 	vmov	r2, r3, d8
 8004b34:	4911      	ldr	r1, [pc, #68]	; (8004b7c <_dtoa_r+0x65c>)
 8004b36:	2000      	movs	r0, #0
 8004b38:	f7fb fba6 	bl	8000288 <__aeabi_dsub>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4630      	mov	r0, r6
 8004b42:	4639      	mov	r1, r7
 8004b44:	f7fb ffca 	bl	8000adc <__aeabi_dcmplt>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	f43f af27 	beq.w	800499c <_dtoa_r+0x47c>
 8004b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b50:	1e6b      	subs	r3, r5, #1
 8004b52:	930c      	str	r3, [sp, #48]	; 0x30
 8004b54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b58:	2b30      	cmp	r3, #48	; 0x30
 8004b5a:	d0f8      	beq.n	8004b4e <_dtoa_r+0x62e>
 8004b5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004b60:	e04a      	b.n	8004bf8 <_dtoa_r+0x6d8>
 8004b62:	bf00      	nop
 8004b64:	080069c8 	.word	0x080069c8
 8004b68:	080069a0 	.word	0x080069a0
 8004b6c:	3ff00000 	.word	0x3ff00000
 8004b70:	40240000 	.word	0x40240000
 8004b74:	401c0000 	.word	0x401c0000
 8004b78:	40140000 	.word	0x40140000
 8004b7c:	3fe00000 	.word	0x3fe00000
 8004b80:	4baf      	ldr	r3, [pc, #700]	; (8004e40 <_dtoa_r+0x920>)
 8004b82:	f7fb fd39 	bl	80005f8 <__aeabi_dmul>
 8004b86:	4606      	mov	r6, r0
 8004b88:	460f      	mov	r7, r1
 8004b8a:	e7ac      	b.n	8004ae6 <_dtoa_r+0x5c6>
 8004b8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004b90:	9d00      	ldr	r5, [sp, #0]
 8004b92:	4642      	mov	r2, r8
 8004b94:	464b      	mov	r3, r9
 8004b96:	4630      	mov	r0, r6
 8004b98:	4639      	mov	r1, r7
 8004b9a:	f7fb fe57 	bl	800084c <__aeabi_ddiv>
 8004b9e:	f7fb ffdb 	bl	8000b58 <__aeabi_d2iz>
 8004ba2:	9002      	str	r0, [sp, #8]
 8004ba4:	f7fb fcbe 	bl	8000524 <__aeabi_i2d>
 8004ba8:	4642      	mov	r2, r8
 8004baa:	464b      	mov	r3, r9
 8004bac:	f7fb fd24 	bl	80005f8 <__aeabi_dmul>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	4639      	mov	r1, r7
 8004bb8:	f7fb fb66 	bl	8000288 <__aeabi_dsub>
 8004bbc:	9e02      	ldr	r6, [sp, #8]
 8004bbe:	9f01      	ldr	r7, [sp, #4]
 8004bc0:	3630      	adds	r6, #48	; 0x30
 8004bc2:	f805 6b01 	strb.w	r6, [r5], #1
 8004bc6:	9e00      	ldr	r6, [sp, #0]
 8004bc8:	1bae      	subs	r6, r5, r6
 8004bca:	42b7      	cmp	r7, r6
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	d137      	bne.n	8004c42 <_dtoa_r+0x722>
 8004bd2:	f7fb fb5b 	bl	800028c <__adddf3>
 8004bd6:	4642      	mov	r2, r8
 8004bd8:	464b      	mov	r3, r9
 8004bda:	4606      	mov	r6, r0
 8004bdc:	460f      	mov	r7, r1
 8004bde:	f7fb ff9b 	bl	8000b18 <__aeabi_dcmpgt>
 8004be2:	b9c8      	cbnz	r0, 8004c18 <_dtoa_r+0x6f8>
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	4630      	mov	r0, r6
 8004bea:	4639      	mov	r1, r7
 8004bec:	f7fb ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bf0:	b110      	cbz	r0, 8004bf8 <_dtoa_r+0x6d8>
 8004bf2:	9b02      	ldr	r3, [sp, #8]
 8004bf4:	07d9      	lsls	r1, r3, #31
 8004bf6:	d40f      	bmi.n	8004c18 <_dtoa_r+0x6f8>
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	4659      	mov	r1, fp
 8004bfc:	f000 fad6 	bl	80051ac <_Bfree>
 8004c00:	2300      	movs	r3, #0
 8004c02:	702b      	strb	r3, [r5, #0]
 8004c04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c06:	f10a 0001 	add.w	r0, sl, #1
 8004c0a:	6018      	str	r0, [r3, #0]
 8004c0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f43f acd8 	beq.w	80045c4 <_dtoa_r+0xa4>
 8004c14:	601d      	str	r5, [r3, #0]
 8004c16:	e4d5      	b.n	80045c4 <_dtoa_r+0xa4>
 8004c18:	f8cd a01c 	str.w	sl, [sp, #28]
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	461d      	mov	r5, r3
 8004c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c24:	2a39      	cmp	r2, #57	; 0x39
 8004c26:	d108      	bne.n	8004c3a <_dtoa_r+0x71a>
 8004c28:	9a00      	ldr	r2, [sp, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d1f7      	bne.n	8004c1e <_dtoa_r+0x6fe>
 8004c2e:	9a07      	ldr	r2, [sp, #28]
 8004c30:	9900      	ldr	r1, [sp, #0]
 8004c32:	3201      	adds	r2, #1
 8004c34:	9207      	str	r2, [sp, #28]
 8004c36:	2230      	movs	r2, #48	; 0x30
 8004c38:	700a      	strb	r2, [r1, #0]
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	3201      	adds	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	e78c      	b.n	8004b5c <_dtoa_r+0x63c>
 8004c42:	4b7f      	ldr	r3, [pc, #508]	; (8004e40 <_dtoa_r+0x920>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	f7fb fcd7 	bl	80005f8 <__aeabi_dmul>
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4606      	mov	r6, r0
 8004c50:	460f      	mov	r7, r1
 8004c52:	f7fb ff39 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d09b      	beq.n	8004b92 <_dtoa_r+0x672>
 8004c5a:	e7cd      	b.n	8004bf8 <_dtoa_r+0x6d8>
 8004c5c:	9a08      	ldr	r2, [sp, #32]
 8004c5e:	2a00      	cmp	r2, #0
 8004c60:	f000 80c4 	beq.w	8004dec <_dtoa_r+0x8cc>
 8004c64:	9a05      	ldr	r2, [sp, #20]
 8004c66:	2a01      	cmp	r2, #1
 8004c68:	f300 80a8 	bgt.w	8004dbc <_dtoa_r+0x89c>
 8004c6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c6e:	2a00      	cmp	r2, #0
 8004c70:	f000 80a0 	beq.w	8004db4 <_dtoa_r+0x894>
 8004c74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c78:	9e06      	ldr	r6, [sp, #24]
 8004c7a:	4645      	mov	r5, r8
 8004c7c:	9a04      	ldr	r2, [sp, #16]
 8004c7e:	2101      	movs	r1, #1
 8004c80:	441a      	add	r2, r3
 8004c82:	4620      	mov	r0, r4
 8004c84:	4498      	add	r8, r3
 8004c86:	9204      	str	r2, [sp, #16]
 8004c88:	f000 fb4c 	bl	8005324 <__i2b>
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	dd0b      	ble.n	8004caa <_dtoa_r+0x78a>
 8004c92:	9b04      	ldr	r3, [sp, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	dd08      	ble.n	8004caa <_dtoa_r+0x78a>
 8004c98:	42ab      	cmp	r3, r5
 8004c9a:	9a04      	ldr	r2, [sp, #16]
 8004c9c:	bfa8      	it	ge
 8004c9e:	462b      	movge	r3, r5
 8004ca0:	eba8 0803 	sub.w	r8, r8, r3
 8004ca4:	1aed      	subs	r5, r5, r3
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	9304      	str	r3, [sp, #16]
 8004caa:	9b06      	ldr	r3, [sp, #24]
 8004cac:	b1fb      	cbz	r3, 8004cee <_dtoa_r+0x7ce>
 8004cae:	9b08      	ldr	r3, [sp, #32]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 809f 	beq.w	8004df4 <_dtoa_r+0x8d4>
 8004cb6:	2e00      	cmp	r6, #0
 8004cb8:	dd11      	ble.n	8004cde <_dtoa_r+0x7be>
 8004cba:	4639      	mov	r1, r7
 8004cbc:	4632      	mov	r2, r6
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f000 fbec 	bl	800549c <__pow5mult>
 8004cc4:	465a      	mov	r2, fp
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	4607      	mov	r7, r0
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f000 fb40 	bl	8005350 <__multiply>
 8004cd0:	4659      	mov	r1, fp
 8004cd2:	9007      	str	r0, [sp, #28]
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f000 fa69 	bl	80051ac <_Bfree>
 8004cda:	9b07      	ldr	r3, [sp, #28]
 8004cdc:	469b      	mov	fp, r3
 8004cde:	9b06      	ldr	r3, [sp, #24]
 8004ce0:	1b9a      	subs	r2, r3, r6
 8004ce2:	d004      	beq.n	8004cee <_dtoa_r+0x7ce>
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f000 fbd8 	bl	800549c <__pow5mult>
 8004cec:	4683      	mov	fp, r0
 8004cee:	2101      	movs	r1, #1
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f000 fb17 	bl	8005324 <__i2b>
 8004cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	dd7c      	ble.n	8004df8 <_dtoa_r+0x8d8>
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4601      	mov	r1, r0
 8004d02:	4620      	mov	r0, r4
 8004d04:	f000 fbca 	bl	800549c <__pow5mult>
 8004d08:	9b05      	ldr	r3, [sp, #20]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	4606      	mov	r6, r0
 8004d0e:	dd76      	ble.n	8004dfe <_dtoa_r+0x8de>
 8004d10:	2300      	movs	r3, #0
 8004d12:	9306      	str	r3, [sp, #24]
 8004d14:	6933      	ldr	r3, [r6, #16]
 8004d16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004d1a:	6918      	ldr	r0, [r3, #16]
 8004d1c:	f000 fab2 	bl	8005284 <__hi0bits>
 8004d20:	f1c0 0020 	rsb	r0, r0, #32
 8004d24:	9b04      	ldr	r3, [sp, #16]
 8004d26:	4418      	add	r0, r3
 8004d28:	f010 001f 	ands.w	r0, r0, #31
 8004d2c:	f000 8086 	beq.w	8004e3c <_dtoa_r+0x91c>
 8004d30:	f1c0 0320 	rsb	r3, r0, #32
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	dd7f      	ble.n	8004e38 <_dtoa_r+0x918>
 8004d38:	f1c0 001c 	rsb	r0, r0, #28
 8004d3c:	9b04      	ldr	r3, [sp, #16]
 8004d3e:	4403      	add	r3, r0
 8004d40:	4480      	add	r8, r0
 8004d42:	4405      	add	r5, r0
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	f1b8 0f00 	cmp.w	r8, #0
 8004d4a:	dd05      	ble.n	8004d58 <_dtoa_r+0x838>
 8004d4c:	4659      	mov	r1, fp
 8004d4e:	4642      	mov	r2, r8
 8004d50:	4620      	mov	r0, r4
 8004d52:	f000 fbfd 	bl	8005550 <__lshift>
 8004d56:	4683      	mov	fp, r0
 8004d58:	9b04      	ldr	r3, [sp, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	dd05      	ble.n	8004d6a <_dtoa_r+0x84a>
 8004d5e:	4631      	mov	r1, r6
 8004d60:	461a      	mov	r2, r3
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 fbf4 	bl	8005550 <__lshift>
 8004d68:	4606      	mov	r6, r0
 8004d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d069      	beq.n	8004e44 <_dtoa_r+0x924>
 8004d70:	4631      	mov	r1, r6
 8004d72:	4658      	mov	r0, fp
 8004d74:	f000 fc58 	bl	8005628 <__mcmp>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	da63      	bge.n	8004e44 <_dtoa_r+0x924>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	4659      	mov	r1, fp
 8004d80:	220a      	movs	r2, #10
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 fa34 	bl	80051f0 <__multadd>
 8004d88:	9b08      	ldr	r3, [sp, #32]
 8004d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d8e:	4683      	mov	fp, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 818f 	beq.w	80050b4 <_dtoa_r+0xb94>
 8004d96:	4639      	mov	r1, r7
 8004d98:	2300      	movs	r3, #0
 8004d9a:	220a      	movs	r2, #10
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f000 fa27 	bl	80051f0 <__multadd>
 8004da2:	f1b9 0f00 	cmp.w	r9, #0
 8004da6:	4607      	mov	r7, r0
 8004da8:	f300 808e 	bgt.w	8004ec8 <_dtoa_r+0x9a8>
 8004dac:	9b05      	ldr	r3, [sp, #20]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	dc50      	bgt.n	8004e54 <_dtoa_r+0x934>
 8004db2:	e089      	b.n	8004ec8 <_dtoa_r+0x9a8>
 8004db4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004db6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004dba:	e75d      	b.n	8004c78 <_dtoa_r+0x758>
 8004dbc:	9b01      	ldr	r3, [sp, #4]
 8004dbe:	1e5e      	subs	r6, r3, #1
 8004dc0:	9b06      	ldr	r3, [sp, #24]
 8004dc2:	42b3      	cmp	r3, r6
 8004dc4:	bfbf      	itttt	lt
 8004dc6:	9b06      	ldrlt	r3, [sp, #24]
 8004dc8:	9606      	strlt	r6, [sp, #24]
 8004dca:	1af2      	sublt	r2, r6, r3
 8004dcc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004dce:	bfb6      	itet	lt
 8004dd0:	189b      	addlt	r3, r3, r2
 8004dd2:	1b9e      	subge	r6, r3, r6
 8004dd4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004dd6:	9b01      	ldr	r3, [sp, #4]
 8004dd8:	bfb8      	it	lt
 8004dda:	2600      	movlt	r6, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bfb5      	itete	lt
 8004de0:	eba8 0503 	sublt.w	r5, r8, r3
 8004de4:	9b01      	ldrge	r3, [sp, #4]
 8004de6:	2300      	movlt	r3, #0
 8004de8:	4645      	movge	r5, r8
 8004dea:	e747      	b.n	8004c7c <_dtoa_r+0x75c>
 8004dec:	9e06      	ldr	r6, [sp, #24]
 8004dee:	9f08      	ldr	r7, [sp, #32]
 8004df0:	4645      	mov	r5, r8
 8004df2:	e74c      	b.n	8004c8e <_dtoa_r+0x76e>
 8004df4:	9a06      	ldr	r2, [sp, #24]
 8004df6:	e775      	b.n	8004ce4 <_dtoa_r+0x7c4>
 8004df8:	9b05      	ldr	r3, [sp, #20]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	dc18      	bgt.n	8004e30 <_dtoa_r+0x910>
 8004dfe:	9b02      	ldr	r3, [sp, #8]
 8004e00:	b9b3      	cbnz	r3, 8004e30 <_dtoa_r+0x910>
 8004e02:	9b03      	ldr	r3, [sp, #12]
 8004e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e08:	b9a3      	cbnz	r3, 8004e34 <_dtoa_r+0x914>
 8004e0a:	9b03      	ldr	r3, [sp, #12]
 8004e0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e10:	0d1b      	lsrs	r3, r3, #20
 8004e12:	051b      	lsls	r3, r3, #20
 8004e14:	b12b      	cbz	r3, 8004e22 <_dtoa_r+0x902>
 8004e16:	9b04      	ldr	r3, [sp, #16]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	9304      	str	r3, [sp, #16]
 8004e1c:	f108 0801 	add.w	r8, r8, #1
 8004e20:	2301      	movs	r3, #1
 8004e22:	9306      	str	r3, [sp, #24]
 8004e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f47f af74 	bne.w	8004d14 <_dtoa_r+0x7f4>
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	e779      	b.n	8004d24 <_dtoa_r+0x804>
 8004e30:	2300      	movs	r3, #0
 8004e32:	e7f6      	b.n	8004e22 <_dtoa_r+0x902>
 8004e34:	9b02      	ldr	r3, [sp, #8]
 8004e36:	e7f4      	b.n	8004e22 <_dtoa_r+0x902>
 8004e38:	d085      	beq.n	8004d46 <_dtoa_r+0x826>
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	301c      	adds	r0, #28
 8004e3e:	e77d      	b.n	8004d3c <_dtoa_r+0x81c>
 8004e40:	40240000 	.word	0x40240000
 8004e44:	9b01      	ldr	r3, [sp, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	dc38      	bgt.n	8004ebc <_dtoa_r+0x99c>
 8004e4a:	9b05      	ldr	r3, [sp, #20]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	dd35      	ble.n	8004ebc <_dtoa_r+0x99c>
 8004e50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004e54:	f1b9 0f00 	cmp.w	r9, #0
 8004e58:	d10d      	bne.n	8004e76 <_dtoa_r+0x956>
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	2205      	movs	r2, #5
 8004e60:	4620      	mov	r0, r4
 8004e62:	f000 f9c5 	bl	80051f0 <__multadd>
 8004e66:	4601      	mov	r1, r0
 8004e68:	4606      	mov	r6, r0
 8004e6a:	4658      	mov	r0, fp
 8004e6c:	f000 fbdc 	bl	8005628 <__mcmp>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	f73f adbd 	bgt.w	80049f0 <_dtoa_r+0x4d0>
 8004e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e78:	9d00      	ldr	r5, [sp, #0]
 8004e7a:	ea6f 0a03 	mvn.w	sl, r3
 8004e7e:	f04f 0800 	mov.w	r8, #0
 8004e82:	4631      	mov	r1, r6
 8004e84:	4620      	mov	r0, r4
 8004e86:	f000 f991 	bl	80051ac <_Bfree>
 8004e8a:	2f00      	cmp	r7, #0
 8004e8c:	f43f aeb4 	beq.w	8004bf8 <_dtoa_r+0x6d8>
 8004e90:	f1b8 0f00 	cmp.w	r8, #0
 8004e94:	d005      	beq.n	8004ea2 <_dtoa_r+0x982>
 8004e96:	45b8      	cmp	r8, r7
 8004e98:	d003      	beq.n	8004ea2 <_dtoa_r+0x982>
 8004e9a:	4641      	mov	r1, r8
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f000 f985 	bl	80051ac <_Bfree>
 8004ea2:	4639      	mov	r1, r7
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f000 f981 	bl	80051ac <_Bfree>
 8004eaa:	e6a5      	b.n	8004bf8 <_dtoa_r+0x6d8>
 8004eac:	2600      	movs	r6, #0
 8004eae:	4637      	mov	r7, r6
 8004eb0:	e7e1      	b.n	8004e76 <_dtoa_r+0x956>
 8004eb2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004eb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004eb8:	4637      	mov	r7, r6
 8004eba:	e599      	b.n	80049f0 <_dtoa_r+0x4d0>
 8004ebc:	9b08      	ldr	r3, [sp, #32]
 8004ebe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 80fd 	beq.w	80050c2 <_dtoa_r+0xba2>
 8004ec8:	2d00      	cmp	r5, #0
 8004eca:	dd05      	ble.n	8004ed8 <_dtoa_r+0x9b8>
 8004ecc:	4639      	mov	r1, r7
 8004ece:	462a      	mov	r2, r5
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 fb3d 	bl	8005550 <__lshift>
 8004ed6:	4607      	mov	r7, r0
 8004ed8:	9b06      	ldr	r3, [sp, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d05c      	beq.n	8004f98 <_dtoa_r+0xa78>
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f000 f923 	bl	800512c <_Balloc>
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	b928      	cbnz	r0, 8004ef6 <_dtoa_r+0x9d6>
 8004eea:	4b80      	ldr	r3, [pc, #512]	; (80050ec <_dtoa_r+0xbcc>)
 8004eec:	4602      	mov	r2, r0
 8004eee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004ef2:	f7ff bb2e 	b.w	8004552 <_dtoa_r+0x32>
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	3202      	adds	r2, #2
 8004efa:	0092      	lsls	r2, r2, #2
 8004efc:	f107 010c 	add.w	r1, r7, #12
 8004f00:	300c      	adds	r0, #12
 8004f02:	f000 f905 	bl	8005110 <memcpy>
 8004f06:	2201      	movs	r2, #1
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f000 fb20 	bl	8005550 <__lshift>
 8004f10:	9b00      	ldr	r3, [sp, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	9b00      	ldr	r3, [sp, #0]
 8004f18:	444b      	add	r3, r9
 8004f1a:	9307      	str	r3, [sp, #28]
 8004f1c:	9b02      	ldr	r3, [sp, #8]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	46b8      	mov	r8, r7
 8004f24:	9306      	str	r3, [sp, #24]
 8004f26:	4607      	mov	r7, r0
 8004f28:	9b01      	ldr	r3, [sp, #4]
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	4658      	mov	r0, fp
 8004f30:	9302      	str	r3, [sp, #8]
 8004f32:	f7ff fa67 	bl	8004404 <quorem>
 8004f36:	4603      	mov	r3, r0
 8004f38:	3330      	adds	r3, #48	; 0x30
 8004f3a:	9004      	str	r0, [sp, #16]
 8004f3c:	4641      	mov	r1, r8
 8004f3e:	4658      	mov	r0, fp
 8004f40:	9308      	str	r3, [sp, #32]
 8004f42:	f000 fb71 	bl	8005628 <__mcmp>
 8004f46:	463a      	mov	r2, r7
 8004f48:	4681      	mov	r9, r0
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f000 fb87 	bl	8005660 <__mdiff>
 8004f52:	68c2      	ldr	r2, [r0, #12]
 8004f54:	9b08      	ldr	r3, [sp, #32]
 8004f56:	4605      	mov	r5, r0
 8004f58:	bb02      	cbnz	r2, 8004f9c <_dtoa_r+0xa7c>
 8004f5a:	4601      	mov	r1, r0
 8004f5c:	4658      	mov	r0, fp
 8004f5e:	f000 fb63 	bl	8005628 <__mcmp>
 8004f62:	9b08      	ldr	r3, [sp, #32]
 8004f64:	4602      	mov	r2, r0
 8004f66:	4629      	mov	r1, r5
 8004f68:	4620      	mov	r0, r4
 8004f6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004f6e:	f000 f91d 	bl	80051ac <_Bfree>
 8004f72:	9b05      	ldr	r3, [sp, #20]
 8004f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f76:	9d01      	ldr	r5, [sp, #4]
 8004f78:	ea43 0102 	orr.w	r1, r3, r2
 8004f7c:	9b06      	ldr	r3, [sp, #24]
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	9b08      	ldr	r3, [sp, #32]
 8004f82:	d10d      	bne.n	8004fa0 <_dtoa_r+0xa80>
 8004f84:	2b39      	cmp	r3, #57	; 0x39
 8004f86:	d029      	beq.n	8004fdc <_dtoa_r+0xabc>
 8004f88:	f1b9 0f00 	cmp.w	r9, #0
 8004f8c:	dd01      	ble.n	8004f92 <_dtoa_r+0xa72>
 8004f8e:	9b04      	ldr	r3, [sp, #16]
 8004f90:	3331      	adds	r3, #49	; 0x31
 8004f92:	9a02      	ldr	r2, [sp, #8]
 8004f94:	7013      	strb	r3, [r2, #0]
 8004f96:	e774      	b.n	8004e82 <_dtoa_r+0x962>
 8004f98:	4638      	mov	r0, r7
 8004f9a:	e7b9      	b.n	8004f10 <_dtoa_r+0x9f0>
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	e7e2      	b.n	8004f66 <_dtoa_r+0xa46>
 8004fa0:	f1b9 0f00 	cmp.w	r9, #0
 8004fa4:	db06      	blt.n	8004fb4 <_dtoa_r+0xa94>
 8004fa6:	9905      	ldr	r1, [sp, #20]
 8004fa8:	ea41 0909 	orr.w	r9, r1, r9
 8004fac:	9906      	ldr	r1, [sp, #24]
 8004fae:	ea59 0101 	orrs.w	r1, r9, r1
 8004fb2:	d120      	bne.n	8004ff6 <_dtoa_r+0xad6>
 8004fb4:	2a00      	cmp	r2, #0
 8004fb6:	ddec      	ble.n	8004f92 <_dtoa_r+0xa72>
 8004fb8:	4659      	mov	r1, fp
 8004fba:	2201      	movs	r2, #1
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	f000 fac6 	bl	8005550 <__lshift>
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	4683      	mov	fp, r0
 8004fc8:	f000 fb2e 	bl	8005628 <__mcmp>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	9b01      	ldr	r3, [sp, #4]
 8004fd0:	dc02      	bgt.n	8004fd8 <_dtoa_r+0xab8>
 8004fd2:	d1de      	bne.n	8004f92 <_dtoa_r+0xa72>
 8004fd4:	07da      	lsls	r2, r3, #31
 8004fd6:	d5dc      	bpl.n	8004f92 <_dtoa_r+0xa72>
 8004fd8:	2b39      	cmp	r3, #57	; 0x39
 8004fda:	d1d8      	bne.n	8004f8e <_dtoa_r+0xa6e>
 8004fdc:	9a02      	ldr	r2, [sp, #8]
 8004fde:	2339      	movs	r3, #57	; 0x39
 8004fe0:	7013      	strb	r3, [r2, #0]
 8004fe2:	462b      	mov	r3, r5
 8004fe4:	461d      	mov	r5, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004fec:	2a39      	cmp	r2, #57	; 0x39
 8004fee:	d050      	beq.n	8005092 <_dtoa_r+0xb72>
 8004ff0:	3201      	adds	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	e745      	b.n	8004e82 <_dtoa_r+0x962>
 8004ff6:	2a00      	cmp	r2, #0
 8004ff8:	dd03      	ble.n	8005002 <_dtoa_r+0xae2>
 8004ffa:	2b39      	cmp	r3, #57	; 0x39
 8004ffc:	d0ee      	beq.n	8004fdc <_dtoa_r+0xabc>
 8004ffe:	3301      	adds	r3, #1
 8005000:	e7c7      	b.n	8004f92 <_dtoa_r+0xa72>
 8005002:	9a01      	ldr	r2, [sp, #4]
 8005004:	9907      	ldr	r1, [sp, #28]
 8005006:	f802 3c01 	strb.w	r3, [r2, #-1]
 800500a:	428a      	cmp	r2, r1
 800500c:	d02a      	beq.n	8005064 <_dtoa_r+0xb44>
 800500e:	4659      	mov	r1, fp
 8005010:	2300      	movs	r3, #0
 8005012:	220a      	movs	r2, #10
 8005014:	4620      	mov	r0, r4
 8005016:	f000 f8eb 	bl	80051f0 <__multadd>
 800501a:	45b8      	cmp	r8, r7
 800501c:	4683      	mov	fp, r0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	f04f 020a 	mov.w	r2, #10
 8005026:	4641      	mov	r1, r8
 8005028:	4620      	mov	r0, r4
 800502a:	d107      	bne.n	800503c <_dtoa_r+0xb1c>
 800502c:	f000 f8e0 	bl	80051f0 <__multadd>
 8005030:	4680      	mov	r8, r0
 8005032:	4607      	mov	r7, r0
 8005034:	9b01      	ldr	r3, [sp, #4]
 8005036:	3301      	adds	r3, #1
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	e775      	b.n	8004f28 <_dtoa_r+0xa08>
 800503c:	f000 f8d8 	bl	80051f0 <__multadd>
 8005040:	4639      	mov	r1, r7
 8005042:	4680      	mov	r8, r0
 8005044:	2300      	movs	r3, #0
 8005046:	220a      	movs	r2, #10
 8005048:	4620      	mov	r0, r4
 800504a:	f000 f8d1 	bl	80051f0 <__multadd>
 800504e:	4607      	mov	r7, r0
 8005050:	e7f0      	b.n	8005034 <_dtoa_r+0xb14>
 8005052:	f1b9 0f00 	cmp.w	r9, #0
 8005056:	9a00      	ldr	r2, [sp, #0]
 8005058:	bfcc      	ite	gt
 800505a:	464d      	movgt	r5, r9
 800505c:	2501      	movle	r5, #1
 800505e:	4415      	add	r5, r2
 8005060:	f04f 0800 	mov.w	r8, #0
 8005064:	4659      	mov	r1, fp
 8005066:	2201      	movs	r2, #1
 8005068:	4620      	mov	r0, r4
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	f000 fa70 	bl	8005550 <__lshift>
 8005070:	4631      	mov	r1, r6
 8005072:	4683      	mov	fp, r0
 8005074:	f000 fad8 	bl	8005628 <__mcmp>
 8005078:	2800      	cmp	r0, #0
 800507a:	dcb2      	bgt.n	8004fe2 <_dtoa_r+0xac2>
 800507c:	d102      	bne.n	8005084 <_dtoa_r+0xb64>
 800507e:	9b01      	ldr	r3, [sp, #4]
 8005080:	07db      	lsls	r3, r3, #31
 8005082:	d4ae      	bmi.n	8004fe2 <_dtoa_r+0xac2>
 8005084:	462b      	mov	r3, r5
 8005086:	461d      	mov	r5, r3
 8005088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800508c:	2a30      	cmp	r2, #48	; 0x30
 800508e:	d0fa      	beq.n	8005086 <_dtoa_r+0xb66>
 8005090:	e6f7      	b.n	8004e82 <_dtoa_r+0x962>
 8005092:	9a00      	ldr	r2, [sp, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d1a5      	bne.n	8004fe4 <_dtoa_r+0xac4>
 8005098:	f10a 0a01 	add.w	sl, sl, #1
 800509c:	2331      	movs	r3, #49	; 0x31
 800509e:	e779      	b.n	8004f94 <_dtoa_r+0xa74>
 80050a0:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <_dtoa_r+0xbd0>)
 80050a2:	f7ff baaf 	b.w	8004604 <_dtoa_r+0xe4>
 80050a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f47f aa86 	bne.w	80045ba <_dtoa_r+0x9a>
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <_dtoa_r+0xbd4>)
 80050b0:	f7ff baa8 	b.w	8004604 <_dtoa_r+0xe4>
 80050b4:	f1b9 0f00 	cmp.w	r9, #0
 80050b8:	dc03      	bgt.n	80050c2 <_dtoa_r+0xba2>
 80050ba:	9b05      	ldr	r3, [sp, #20]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	f73f aec9 	bgt.w	8004e54 <_dtoa_r+0x934>
 80050c2:	9d00      	ldr	r5, [sp, #0]
 80050c4:	4631      	mov	r1, r6
 80050c6:	4658      	mov	r0, fp
 80050c8:	f7ff f99c 	bl	8004404 <quorem>
 80050cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80050d0:	f805 3b01 	strb.w	r3, [r5], #1
 80050d4:	9a00      	ldr	r2, [sp, #0]
 80050d6:	1aaa      	subs	r2, r5, r2
 80050d8:	4591      	cmp	r9, r2
 80050da:	ddba      	ble.n	8005052 <_dtoa_r+0xb32>
 80050dc:	4659      	mov	r1, fp
 80050de:	2300      	movs	r3, #0
 80050e0:	220a      	movs	r2, #10
 80050e2:	4620      	mov	r0, r4
 80050e4:	f000 f884 	bl	80051f0 <__multadd>
 80050e8:	4683      	mov	fp, r0
 80050ea:	e7eb      	b.n	80050c4 <_dtoa_r+0xba4>
 80050ec:	0800692f 	.word	0x0800692f
 80050f0:	08006888 	.word	0x08006888
 80050f4:	080068ac 	.word	0x080068ac

080050f8 <_localeconv_r>:
 80050f8:	4800      	ldr	r0, [pc, #0]	; (80050fc <_localeconv_r+0x4>)
 80050fa:	4770      	bx	lr
 80050fc:	20000164 	.word	0x20000164

08005100 <malloc>:
 8005100:	4b02      	ldr	r3, [pc, #8]	; (800510c <malloc+0xc>)
 8005102:	4601      	mov	r1, r0
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	f000 bbef 	b.w	80058e8 <_malloc_r>
 800510a:	bf00      	nop
 800510c:	20000010 	.word	0x20000010

08005110 <memcpy>:
 8005110:	440a      	add	r2, r1
 8005112:	4291      	cmp	r1, r2
 8005114:	f100 33ff 	add.w	r3, r0, #4294967295
 8005118:	d100      	bne.n	800511c <memcpy+0xc>
 800511a:	4770      	bx	lr
 800511c:	b510      	push	{r4, lr}
 800511e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005126:	4291      	cmp	r1, r2
 8005128:	d1f9      	bne.n	800511e <memcpy+0xe>
 800512a:	bd10      	pop	{r4, pc}

0800512c <_Balloc>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005130:	4604      	mov	r4, r0
 8005132:	460d      	mov	r5, r1
 8005134:	b976      	cbnz	r6, 8005154 <_Balloc+0x28>
 8005136:	2010      	movs	r0, #16
 8005138:	f7ff ffe2 	bl	8005100 <malloc>
 800513c:	4602      	mov	r2, r0
 800513e:	6260      	str	r0, [r4, #36]	; 0x24
 8005140:	b920      	cbnz	r0, 800514c <_Balloc+0x20>
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <_Balloc+0x78>)
 8005144:	4818      	ldr	r0, [pc, #96]	; (80051a8 <_Balloc+0x7c>)
 8005146:	2166      	movs	r1, #102	; 0x66
 8005148:	f000 fd94 	bl	8005c74 <__assert_func>
 800514c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005150:	6006      	str	r6, [r0, #0]
 8005152:	60c6      	str	r6, [r0, #12]
 8005154:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005156:	68f3      	ldr	r3, [r6, #12]
 8005158:	b183      	cbz	r3, 800517c <_Balloc+0x50>
 800515a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005162:	b9b8      	cbnz	r0, 8005194 <_Balloc+0x68>
 8005164:	2101      	movs	r1, #1
 8005166:	fa01 f605 	lsl.w	r6, r1, r5
 800516a:	1d72      	adds	r2, r6, #5
 800516c:	0092      	lsls	r2, r2, #2
 800516e:	4620      	mov	r0, r4
 8005170:	f000 fb5a 	bl	8005828 <_calloc_r>
 8005174:	b160      	cbz	r0, 8005190 <_Balloc+0x64>
 8005176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800517a:	e00e      	b.n	800519a <_Balloc+0x6e>
 800517c:	2221      	movs	r2, #33	; 0x21
 800517e:	2104      	movs	r1, #4
 8005180:	4620      	mov	r0, r4
 8005182:	f000 fb51 	bl	8005828 <_calloc_r>
 8005186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005188:	60f0      	str	r0, [r6, #12]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e4      	bne.n	800515a <_Balloc+0x2e>
 8005190:	2000      	movs	r0, #0
 8005192:	bd70      	pop	{r4, r5, r6, pc}
 8005194:	6802      	ldr	r2, [r0, #0]
 8005196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800519a:	2300      	movs	r3, #0
 800519c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80051a0:	e7f7      	b.n	8005192 <_Balloc+0x66>
 80051a2:	bf00      	nop
 80051a4:	080068b9 	.word	0x080068b9
 80051a8:	08006940 	.word	0x08006940

080051ac <_Bfree>:
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80051b0:	4605      	mov	r5, r0
 80051b2:	460c      	mov	r4, r1
 80051b4:	b976      	cbnz	r6, 80051d4 <_Bfree+0x28>
 80051b6:	2010      	movs	r0, #16
 80051b8:	f7ff ffa2 	bl	8005100 <malloc>
 80051bc:	4602      	mov	r2, r0
 80051be:	6268      	str	r0, [r5, #36]	; 0x24
 80051c0:	b920      	cbnz	r0, 80051cc <_Bfree+0x20>
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <_Bfree+0x3c>)
 80051c4:	4809      	ldr	r0, [pc, #36]	; (80051ec <_Bfree+0x40>)
 80051c6:	218a      	movs	r1, #138	; 0x8a
 80051c8:	f000 fd54 	bl	8005c74 <__assert_func>
 80051cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051d0:	6006      	str	r6, [r0, #0]
 80051d2:	60c6      	str	r6, [r0, #12]
 80051d4:	b13c      	cbz	r4, 80051e6 <_Bfree+0x3a>
 80051d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051d8:	6862      	ldr	r2, [r4, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051e0:	6021      	str	r1, [r4, #0]
 80051e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051e6:	bd70      	pop	{r4, r5, r6, pc}
 80051e8:	080068b9 	.word	0x080068b9
 80051ec:	08006940 	.word	0x08006940

080051f0 <__multadd>:
 80051f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f4:	690e      	ldr	r6, [r1, #16]
 80051f6:	4607      	mov	r7, r0
 80051f8:	4698      	mov	r8, r3
 80051fa:	460c      	mov	r4, r1
 80051fc:	f101 0014 	add.w	r0, r1, #20
 8005200:	2300      	movs	r3, #0
 8005202:	6805      	ldr	r5, [r0, #0]
 8005204:	b2a9      	uxth	r1, r5
 8005206:	fb02 8101 	mla	r1, r2, r1, r8
 800520a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800520e:	0c2d      	lsrs	r5, r5, #16
 8005210:	fb02 c505 	mla	r5, r2, r5, ip
 8005214:	b289      	uxth	r1, r1
 8005216:	3301      	adds	r3, #1
 8005218:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800521c:	429e      	cmp	r6, r3
 800521e:	f840 1b04 	str.w	r1, [r0], #4
 8005222:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005226:	dcec      	bgt.n	8005202 <__multadd+0x12>
 8005228:	f1b8 0f00 	cmp.w	r8, #0
 800522c:	d022      	beq.n	8005274 <__multadd+0x84>
 800522e:	68a3      	ldr	r3, [r4, #8]
 8005230:	42b3      	cmp	r3, r6
 8005232:	dc19      	bgt.n	8005268 <__multadd+0x78>
 8005234:	6861      	ldr	r1, [r4, #4]
 8005236:	4638      	mov	r0, r7
 8005238:	3101      	adds	r1, #1
 800523a:	f7ff ff77 	bl	800512c <_Balloc>
 800523e:	4605      	mov	r5, r0
 8005240:	b928      	cbnz	r0, 800524e <__multadd+0x5e>
 8005242:	4602      	mov	r2, r0
 8005244:	4b0d      	ldr	r3, [pc, #52]	; (800527c <__multadd+0x8c>)
 8005246:	480e      	ldr	r0, [pc, #56]	; (8005280 <__multadd+0x90>)
 8005248:	21b5      	movs	r1, #181	; 0xb5
 800524a:	f000 fd13 	bl	8005c74 <__assert_func>
 800524e:	6922      	ldr	r2, [r4, #16]
 8005250:	3202      	adds	r2, #2
 8005252:	f104 010c 	add.w	r1, r4, #12
 8005256:	0092      	lsls	r2, r2, #2
 8005258:	300c      	adds	r0, #12
 800525a:	f7ff ff59 	bl	8005110 <memcpy>
 800525e:	4621      	mov	r1, r4
 8005260:	4638      	mov	r0, r7
 8005262:	f7ff ffa3 	bl	80051ac <_Bfree>
 8005266:	462c      	mov	r4, r5
 8005268:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800526c:	3601      	adds	r6, #1
 800526e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005272:	6126      	str	r6, [r4, #16]
 8005274:	4620      	mov	r0, r4
 8005276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800527a:	bf00      	nop
 800527c:	0800692f 	.word	0x0800692f
 8005280:	08006940 	.word	0x08006940

08005284 <__hi0bits>:
 8005284:	0c03      	lsrs	r3, r0, #16
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	b9d3      	cbnz	r3, 80052c0 <__hi0bits+0x3c>
 800528a:	0400      	lsls	r0, r0, #16
 800528c:	2310      	movs	r3, #16
 800528e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005292:	bf04      	itt	eq
 8005294:	0200      	lsleq	r0, r0, #8
 8005296:	3308      	addeq	r3, #8
 8005298:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800529c:	bf04      	itt	eq
 800529e:	0100      	lsleq	r0, r0, #4
 80052a0:	3304      	addeq	r3, #4
 80052a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80052a6:	bf04      	itt	eq
 80052a8:	0080      	lsleq	r0, r0, #2
 80052aa:	3302      	addeq	r3, #2
 80052ac:	2800      	cmp	r0, #0
 80052ae:	db05      	blt.n	80052bc <__hi0bits+0x38>
 80052b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80052b4:	f103 0301 	add.w	r3, r3, #1
 80052b8:	bf08      	it	eq
 80052ba:	2320      	moveq	r3, #32
 80052bc:	4618      	mov	r0, r3
 80052be:	4770      	bx	lr
 80052c0:	2300      	movs	r3, #0
 80052c2:	e7e4      	b.n	800528e <__hi0bits+0xa>

080052c4 <__lo0bits>:
 80052c4:	6803      	ldr	r3, [r0, #0]
 80052c6:	f013 0207 	ands.w	r2, r3, #7
 80052ca:	4601      	mov	r1, r0
 80052cc:	d00b      	beq.n	80052e6 <__lo0bits+0x22>
 80052ce:	07da      	lsls	r2, r3, #31
 80052d0:	d424      	bmi.n	800531c <__lo0bits+0x58>
 80052d2:	0798      	lsls	r0, r3, #30
 80052d4:	bf49      	itett	mi
 80052d6:	085b      	lsrmi	r3, r3, #1
 80052d8:	089b      	lsrpl	r3, r3, #2
 80052da:	2001      	movmi	r0, #1
 80052dc:	600b      	strmi	r3, [r1, #0]
 80052de:	bf5c      	itt	pl
 80052e0:	600b      	strpl	r3, [r1, #0]
 80052e2:	2002      	movpl	r0, #2
 80052e4:	4770      	bx	lr
 80052e6:	b298      	uxth	r0, r3
 80052e8:	b9b0      	cbnz	r0, 8005318 <__lo0bits+0x54>
 80052ea:	0c1b      	lsrs	r3, r3, #16
 80052ec:	2010      	movs	r0, #16
 80052ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80052f2:	bf04      	itt	eq
 80052f4:	0a1b      	lsreq	r3, r3, #8
 80052f6:	3008      	addeq	r0, #8
 80052f8:	071a      	lsls	r2, r3, #28
 80052fa:	bf04      	itt	eq
 80052fc:	091b      	lsreq	r3, r3, #4
 80052fe:	3004      	addeq	r0, #4
 8005300:	079a      	lsls	r2, r3, #30
 8005302:	bf04      	itt	eq
 8005304:	089b      	lsreq	r3, r3, #2
 8005306:	3002      	addeq	r0, #2
 8005308:	07da      	lsls	r2, r3, #31
 800530a:	d403      	bmi.n	8005314 <__lo0bits+0x50>
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	f100 0001 	add.w	r0, r0, #1
 8005312:	d005      	beq.n	8005320 <__lo0bits+0x5c>
 8005314:	600b      	str	r3, [r1, #0]
 8005316:	4770      	bx	lr
 8005318:	4610      	mov	r0, r2
 800531a:	e7e8      	b.n	80052ee <__lo0bits+0x2a>
 800531c:	2000      	movs	r0, #0
 800531e:	4770      	bx	lr
 8005320:	2020      	movs	r0, #32
 8005322:	4770      	bx	lr

08005324 <__i2b>:
 8005324:	b510      	push	{r4, lr}
 8005326:	460c      	mov	r4, r1
 8005328:	2101      	movs	r1, #1
 800532a:	f7ff feff 	bl	800512c <_Balloc>
 800532e:	4602      	mov	r2, r0
 8005330:	b928      	cbnz	r0, 800533e <__i2b+0x1a>
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <__i2b+0x24>)
 8005334:	4805      	ldr	r0, [pc, #20]	; (800534c <__i2b+0x28>)
 8005336:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800533a:	f000 fc9b 	bl	8005c74 <__assert_func>
 800533e:	2301      	movs	r3, #1
 8005340:	6144      	str	r4, [r0, #20]
 8005342:	6103      	str	r3, [r0, #16]
 8005344:	bd10      	pop	{r4, pc}
 8005346:	bf00      	nop
 8005348:	0800692f 	.word	0x0800692f
 800534c:	08006940 	.word	0x08006940

08005350 <__multiply>:
 8005350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005354:	4614      	mov	r4, r2
 8005356:	690a      	ldr	r2, [r1, #16]
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	429a      	cmp	r2, r3
 800535c:	bfb8      	it	lt
 800535e:	460b      	movlt	r3, r1
 8005360:	460d      	mov	r5, r1
 8005362:	bfbc      	itt	lt
 8005364:	4625      	movlt	r5, r4
 8005366:	461c      	movlt	r4, r3
 8005368:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800536c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005370:	68ab      	ldr	r3, [r5, #8]
 8005372:	6869      	ldr	r1, [r5, #4]
 8005374:	eb0a 0709 	add.w	r7, sl, r9
 8005378:	42bb      	cmp	r3, r7
 800537a:	b085      	sub	sp, #20
 800537c:	bfb8      	it	lt
 800537e:	3101      	addlt	r1, #1
 8005380:	f7ff fed4 	bl	800512c <_Balloc>
 8005384:	b930      	cbnz	r0, 8005394 <__multiply+0x44>
 8005386:	4602      	mov	r2, r0
 8005388:	4b42      	ldr	r3, [pc, #264]	; (8005494 <__multiply+0x144>)
 800538a:	4843      	ldr	r0, [pc, #268]	; (8005498 <__multiply+0x148>)
 800538c:	f240 115d 	movw	r1, #349	; 0x15d
 8005390:	f000 fc70 	bl	8005c74 <__assert_func>
 8005394:	f100 0614 	add.w	r6, r0, #20
 8005398:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800539c:	4633      	mov	r3, r6
 800539e:	2200      	movs	r2, #0
 80053a0:	4543      	cmp	r3, r8
 80053a2:	d31e      	bcc.n	80053e2 <__multiply+0x92>
 80053a4:	f105 0c14 	add.w	ip, r5, #20
 80053a8:	f104 0314 	add.w	r3, r4, #20
 80053ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80053b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80053b4:	9202      	str	r2, [sp, #8]
 80053b6:	ebac 0205 	sub.w	r2, ip, r5
 80053ba:	3a15      	subs	r2, #21
 80053bc:	f022 0203 	bic.w	r2, r2, #3
 80053c0:	3204      	adds	r2, #4
 80053c2:	f105 0115 	add.w	r1, r5, #21
 80053c6:	458c      	cmp	ip, r1
 80053c8:	bf38      	it	cc
 80053ca:	2204      	movcc	r2, #4
 80053cc:	9201      	str	r2, [sp, #4]
 80053ce:	9a02      	ldr	r2, [sp, #8]
 80053d0:	9303      	str	r3, [sp, #12]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d808      	bhi.n	80053e8 <__multiply+0x98>
 80053d6:	2f00      	cmp	r7, #0
 80053d8:	dc55      	bgt.n	8005486 <__multiply+0x136>
 80053da:	6107      	str	r7, [r0, #16]
 80053dc:	b005      	add	sp, #20
 80053de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e2:	f843 2b04 	str.w	r2, [r3], #4
 80053e6:	e7db      	b.n	80053a0 <__multiply+0x50>
 80053e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80053ec:	f1ba 0f00 	cmp.w	sl, #0
 80053f0:	d020      	beq.n	8005434 <__multiply+0xe4>
 80053f2:	f105 0e14 	add.w	lr, r5, #20
 80053f6:	46b1      	mov	r9, r6
 80053f8:	2200      	movs	r2, #0
 80053fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80053fe:	f8d9 b000 	ldr.w	fp, [r9]
 8005402:	b2a1      	uxth	r1, r4
 8005404:	fa1f fb8b 	uxth.w	fp, fp
 8005408:	fb0a b101 	mla	r1, sl, r1, fp
 800540c:	4411      	add	r1, r2
 800540e:	f8d9 2000 	ldr.w	r2, [r9]
 8005412:	0c24      	lsrs	r4, r4, #16
 8005414:	0c12      	lsrs	r2, r2, #16
 8005416:	fb0a 2404 	mla	r4, sl, r4, r2
 800541a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800541e:	b289      	uxth	r1, r1
 8005420:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005424:	45f4      	cmp	ip, lr
 8005426:	f849 1b04 	str.w	r1, [r9], #4
 800542a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800542e:	d8e4      	bhi.n	80053fa <__multiply+0xaa>
 8005430:	9901      	ldr	r1, [sp, #4]
 8005432:	5072      	str	r2, [r6, r1]
 8005434:	9a03      	ldr	r2, [sp, #12]
 8005436:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800543a:	3304      	adds	r3, #4
 800543c:	f1b9 0f00 	cmp.w	r9, #0
 8005440:	d01f      	beq.n	8005482 <__multiply+0x132>
 8005442:	6834      	ldr	r4, [r6, #0]
 8005444:	f105 0114 	add.w	r1, r5, #20
 8005448:	46b6      	mov	lr, r6
 800544a:	f04f 0a00 	mov.w	sl, #0
 800544e:	880a      	ldrh	r2, [r1, #0]
 8005450:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005454:	fb09 b202 	mla	r2, r9, r2, fp
 8005458:	4492      	add	sl, r2
 800545a:	b2a4      	uxth	r4, r4
 800545c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005460:	f84e 4b04 	str.w	r4, [lr], #4
 8005464:	f851 4b04 	ldr.w	r4, [r1], #4
 8005468:	f8be 2000 	ldrh.w	r2, [lr]
 800546c:	0c24      	lsrs	r4, r4, #16
 800546e:	fb09 2404 	mla	r4, r9, r4, r2
 8005472:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005476:	458c      	cmp	ip, r1
 8005478:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800547c:	d8e7      	bhi.n	800544e <__multiply+0xfe>
 800547e:	9a01      	ldr	r2, [sp, #4]
 8005480:	50b4      	str	r4, [r6, r2]
 8005482:	3604      	adds	r6, #4
 8005484:	e7a3      	b.n	80053ce <__multiply+0x7e>
 8005486:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1a5      	bne.n	80053da <__multiply+0x8a>
 800548e:	3f01      	subs	r7, #1
 8005490:	e7a1      	b.n	80053d6 <__multiply+0x86>
 8005492:	bf00      	nop
 8005494:	0800692f 	.word	0x0800692f
 8005498:	08006940 	.word	0x08006940

0800549c <__pow5mult>:
 800549c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a0:	4615      	mov	r5, r2
 80054a2:	f012 0203 	ands.w	r2, r2, #3
 80054a6:	4606      	mov	r6, r0
 80054a8:	460f      	mov	r7, r1
 80054aa:	d007      	beq.n	80054bc <__pow5mult+0x20>
 80054ac:	4c25      	ldr	r4, [pc, #148]	; (8005544 <__pow5mult+0xa8>)
 80054ae:	3a01      	subs	r2, #1
 80054b0:	2300      	movs	r3, #0
 80054b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054b6:	f7ff fe9b 	bl	80051f0 <__multadd>
 80054ba:	4607      	mov	r7, r0
 80054bc:	10ad      	asrs	r5, r5, #2
 80054be:	d03d      	beq.n	800553c <__pow5mult+0xa0>
 80054c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80054c2:	b97c      	cbnz	r4, 80054e4 <__pow5mult+0x48>
 80054c4:	2010      	movs	r0, #16
 80054c6:	f7ff fe1b 	bl	8005100 <malloc>
 80054ca:	4602      	mov	r2, r0
 80054cc:	6270      	str	r0, [r6, #36]	; 0x24
 80054ce:	b928      	cbnz	r0, 80054dc <__pow5mult+0x40>
 80054d0:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <__pow5mult+0xac>)
 80054d2:	481e      	ldr	r0, [pc, #120]	; (800554c <__pow5mult+0xb0>)
 80054d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80054d8:	f000 fbcc 	bl	8005c74 <__assert_func>
 80054dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054e0:	6004      	str	r4, [r0, #0]
 80054e2:	60c4      	str	r4, [r0, #12]
 80054e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80054e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054ec:	b94c      	cbnz	r4, 8005502 <__pow5mult+0x66>
 80054ee:	f240 2171 	movw	r1, #625	; 0x271
 80054f2:	4630      	mov	r0, r6
 80054f4:	f7ff ff16 	bl	8005324 <__i2b>
 80054f8:	2300      	movs	r3, #0
 80054fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80054fe:	4604      	mov	r4, r0
 8005500:	6003      	str	r3, [r0, #0]
 8005502:	f04f 0900 	mov.w	r9, #0
 8005506:	07eb      	lsls	r3, r5, #31
 8005508:	d50a      	bpl.n	8005520 <__pow5mult+0x84>
 800550a:	4639      	mov	r1, r7
 800550c:	4622      	mov	r2, r4
 800550e:	4630      	mov	r0, r6
 8005510:	f7ff ff1e 	bl	8005350 <__multiply>
 8005514:	4639      	mov	r1, r7
 8005516:	4680      	mov	r8, r0
 8005518:	4630      	mov	r0, r6
 800551a:	f7ff fe47 	bl	80051ac <_Bfree>
 800551e:	4647      	mov	r7, r8
 8005520:	106d      	asrs	r5, r5, #1
 8005522:	d00b      	beq.n	800553c <__pow5mult+0xa0>
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	b938      	cbnz	r0, 8005538 <__pow5mult+0x9c>
 8005528:	4622      	mov	r2, r4
 800552a:	4621      	mov	r1, r4
 800552c:	4630      	mov	r0, r6
 800552e:	f7ff ff0f 	bl	8005350 <__multiply>
 8005532:	6020      	str	r0, [r4, #0]
 8005534:	f8c0 9000 	str.w	r9, [r0]
 8005538:	4604      	mov	r4, r0
 800553a:	e7e4      	b.n	8005506 <__pow5mult+0x6a>
 800553c:	4638      	mov	r0, r7
 800553e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005542:	bf00      	nop
 8005544:	08006a90 	.word	0x08006a90
 8005548:	080068b9 	.word	0x080068b9
 800554c:	08006940 	.word	0x08006940

08005550 <__lshift>:
 8005550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005554:	460c      	mov	r4, r1
 8005556:	6849      	ldr	r1, [r1, #4]
 8005558:	6923      	ldr	r3, [r4, #16]
 800555a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800555e:	68a3      	ldr	r3, [r4, #8]
 8005560:	4607      	mov	r7, r0
 8005562:	4691      	mov	r9, r2
 8005564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005568:	f108 0601 	add.w	r6, r8, #1
 800556c:	42b3      	cmp	r3, r6
 800556e:	db0b      	blt.n	8005588 <__lshift+0x38>
 8005570:	4638      	mov	r0, r7
 8005572:	f7ff fddb 	bl	800512c <_Balloc>
 8005576:	4605      	mov	r5, r0
 8005578:	b948      	cbnz	r0, 800558e <__lshift+0x3e>
 800557a:	4602      	mov	r2, r0
 800557c:	4b28      	ldr	r3, [pc, #160]	; (8005620 <__lshift+0xd0>)
 800557e:	4829      	ldr	r0, [pc, #164]	; (8005624 <__lshift+0xd4>)
 8005580:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005584:	f000 fb76 	bl	8005c74 <__assert_func>
 8005588:	3101      	adds	r1, #1
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	e7ee      	b.n	800556c <__lshift+0x1c>
 800558e:	2300      	movs	r3, #0
 8005590:	f100 0114 	add.w	r1, r0, #20
 8005594:	f100 0210 	add.w	r2, r0, #16
 8005598:	4618      	mov	r0, r3
 800559a:	4553      	cmp	r3, sl
 800559c:	db33      	blt.n	8005606 <__lshift+0xb6>
 800559e:	6920      	ldr	r0, [r4, #16]
 80055a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055a4:	f104 0314 	add.w	r3, r4, #20
 80055a8:	f019 091f 	ands.w	r9, r9, #31
 80055ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80055b4:	d02b      	beq.n	800560e <__lshift+0xbe>
 80055b6:	f1c9 0e20 	rsb	lr, r9, #32
 80055ba:	468a      	mov	sl, r1
 80055bc:	2200      	movs	r2, #0
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	fa00 f009 	lsl.w	r0, r0, r9
 80055c4:	4302      	orrs	r2, r0
 80055c6:	f84a 2b04 	str.w	r2, [sl], #4
 80055ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ce:	459c      	cmp	ip, r3
 80055d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80055d4:	d8f3      	bhi.n	80055be <__lshift+0x6e>
 80055d6:	ebac 0304 	sub.w	r3, ip, r4
 80055da:	3b15      	subs	r3, #21
 80055dc:	f023 0303 	bic.w	r3, r3, #3
 80055e0:	3304      	adds	r3, #4
 80055e2:	f104 0015 	add.w	r0, r4, #21
 80055e6:	4584      	cmp	ip, r0
 80055e8:	bf38      	it	cc
 80055ea:	2304      	movcc	r3, #4
 80055ec:	50ca      	str	r2, [r1, r3]
 80055ee:	b10a      	cbz	r2, 80055f4 <__lshift+0xa4>
 80055f0:	f108 0602 	add.w	r6, r8, #2
 80055f4:	3e01      	subs	r6, #1
 80055f6:	4638      	mov	r0, r7
 80055f8:	612e      	str	r6, [r5, #16]
 80055fa:	4621      	mov	r1, r4
 80055fc:	f7ff fdd6 	bl	80051ac <_Bfree>
 8005600:	4628      	mov	r0, r5
 8005602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005606:	f842 0f04 	str.w	r0, [r2, #4]!
 800560a:	3301      	adds	r3, #1
 800560c:	e7c5      	b.n	800559a <__lshift+0x4a>
 800560e:	3904      	subs	r1, #4
 8005610:	f853 2b04 	ldr.w	r2, [r3], #4
 8005614:	f841 2f04 	str.w	r2, [r1, #4]!
 8005618:	459c      	cmp	ip, r3
 800561a:	d8f9      	bhi.n	8005610 <__lshift+0xc0>
 800561c:	e7ea      	b.n	80055f4 <__lshift+0xa4>
 800561e:	bf00      	nop
 8005620:	0800692f 	.word	0x0800692f
 8005624:	08006940 	.word	0x08006940

08005628 <__mcmp>:
 8005628:	b530      	push	{r4, r5, lr}
 800562a:	6902      	ldr	r2, [r0, #16]
 800562c:	690c      	ldr	r4, [r1, #16]
 800562e:	1b12      	subs	r2, r2, r4
 8005630:	d10e      	bne.n	8005650 <__mcmp+0x28>
 8005632:	f100 0314 	add.w	r3, r0, #20
 8005636:	3114      	adds	r1, #20
 8005638:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800563c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005640:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005644:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005648:	42a5      	cmp	r5, r4
 800564a:	d003      	beq.n	8005654 <__mcmp+0x2c>
 800564c:	d305      	bcc.n	800565a <__mcmp+0x32>
 800564e:	2201      	movs	r2, #1
 8005650:	4610      	mov	r0, r2
 8005652:	bd30      	pop	{r4, r5, pc}
 8005654:	4283      	cmp	r3, r0
 8005656:	d3f3      	bcc.n	8005640 <__mcmp+0x18>
 8005658:	e7fa      	b.n	8005650 <__mcmp+0x28>
 800565a:	f04f 32ff 	mov.w	r2, #4294967295
 800565e:	e7f7      	b.n	8005650 <__mcmp+0x28>

08005660 <__mdiff>:
 8005660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	460c      	mov	r4, r1
 8005666:	4606      	mov	r6, r0
 8005668:	4611      	mov	r1, r2
 800566a:	4620      	mov	r0, r4
 800566c:	4617      	mov	r7, r2
 800566e:	f7ff ffdb 	bl	8005628 <__mcmp>
 8005672:	1e05      	subs	r5, r0, #0
 8005674:	d110      	bne.n	8005698 <__mdiff+0x38>
 8005676:	4629      	mov	r1, r5
 8005678:	4630      	mov	r0, r6
 800567a:	f7ff fd57 	bl	800512c <_Balloc>
 800567e:	b930      	cbnz	r0, 800568e <__mdiff+0x2e>
 8005680:	4b39      	ldr	r3, [pc, #228]	; (8005768 <__mdiff+0x108>)
 8005682:	4602      	mov	r2, r0
 8005684:	f240 2132 	movw	r1, #562	; 0x232
 8005688:	4838      	ldr	r0, [pc, #224]	; (800576c <__mdiff+0x10c>)
 800568a:	f000 faf3 	bl	8005c74 <__assert_func>
 800568e:	2301      	movs	r3, #1
 8005690:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005698:	bfa4      	itt	ge
 800569a:	463b      	movge	r3, r7
 800569c:	4627      	movge	r7, r4
 800569e:	4630      	mov	r0, r6
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	bfa6      	itte	ge
 80056a4:	461c      	movge	r4, r3
 80056a6:	2500      	movge	r5, #0
 80056a8:	2501      	movlt	r5, #1
 80056aa:	f7ff fd3f 	bl	800512c <_Balloc>
 80056ae:	b920      	cbnz	r0, 80056ba <__mdiff+0x5a>
 80056b0:	4b2d      	ldr	r3, [pc, #180]	; (8005768 <__mdiff+0x108>)
 80056b2:	4602      	mov	r2, r0
 80056b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80056b8:	e7e6      	b.n	8005688 <__mdiff+0x28>
 80056ba:	693e      	ldr	r6, [r7, #16]
 80056bc:	60c5      	str	r5, [r0, #12]
 80056be:	6925      	ldr	r5, [r4, #16]
 80056c0:	f107 0114 	add.w	r1, r7, #20
 80056c4:	f104 0914 	add.w	r9, r4, #20
 80056c8:	f100 0e14 	add.w	lr, r0, #20
 80056cc:	f107 0210 	add.w	r2, r7, #16
 80056d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80056d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80056d8:	46f2      	mov	sl, lr
 80056da:	2700      	movs	r7, #0
 80056dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80056e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80056e4:	fa1f f883 	uxth.w	r8, r3
 80056e8:	fa17 f78b 	uxtah	r7, r7, fp
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	eba7 0808 	sub.w	r8, r7, r8
 80056f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80056f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80056fa:	fa1f f888 	uxth.w	r8, r8
 80056fe:	141f      	asrs	r7, r3, #16
 8005700:	454d      	cmp	r5, r9
 8005702:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005706:	f84a 3b04 	str.w	r3, [sl], #4
 800570a:	d8e7      	bhi.n	80056dc <__mdiff+0x7c>
 800570c:	1b2b      	subs	r3, r5, r4
 800570e:	3b15      	subs	r3, #21
 8005710:	f023 0303 	bic.w	r3, r3, #3
 8005714:	3304      	adds	r3, #4
 8005716:	3415      	adds	r4, #21
 8005718:	42a5      	cmp	r5, r4
 800571a:	bf38      	it	cc
 800571c:	2304      	movcc	r3, #4
 800571e:	4419      	add	r1, r3
 8005720:	4473      	add	r3, lr
 8005722:	469e      	mov	lr, r3
 8005724:	460d      	mov	r5, r1
 8005726:	4565      	cmp	r5, ip
 8005728:	d30e      	bcc.n	8005748 <__mdiff+0xe8>
 800572a:	f10c 0203 	add.w	r2, ip, #3
 800572e:	1a52      	subs	r2, r2, r1
 8005730:	f022 0203 	bic.w	r2, r2, #3
 8005734:	3903      	subs	r1, #3
 8005736:	458c      	cmp	ip, r1
 8005738:	bf38      	it	cc
 800573a:	2200      	movcc	r2, #0
 800573c:	441a      	add	r2, r3
 800573e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005742:	b17b      	cbz	r3, 8005764 <__mdiff+0x104>
 8005744:	6106      	str	r6, [r0, #16]
 8005746:	e7a5      	b.n	8005694 <__mdiff+0x34>
 8005748:	f855 8b04 	ldr.w	r8, [r5], #4
 800574c:	fa17 f488 	uxtah	r4, r7, r8
 8005750:	1422      	asrs	r2, r4, #16
 8005752:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005756:	b2a4      	uxth	r4, r4
 8005758:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800575c:	f84e 4b04 	str.w	r4, [lr], #4
 8005760:	1417      	asrs	r7, r2, #16
 8005762:	e7e0      	b.n	8005726 <__mdiff+0xc6>
 8005764:	3e01      	subs	r6, #1
 8005766:	e7ea      	b.n	800573e <__mdiff+0xde>
 8005768:	0800692f 	.word	0x0800692f
 800576c:	08006940 	.word	0x08006940

08005770 <__d2b>:
 8005770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005774:	4689      	mov	r9, r1
 8005776:	2101      	movs	r1, #1
 8005778:	ec57 6b10 	vmov	r6, r7, d0
 800577c:	4690      	mov	r8, r2
 800577e:	f7ff fcd5 	bl	800512c <_Balloc>
 8005782:	4604      	mov	r4, r0
 8005784:	b930      	cbnz	r0, 8005794 <__d2b+0x24>
 8005786:	4602      	mov	r2, r0
 8005788:	4b25      	ldr	r3, [pc, #148]	; (8005820 <__d2b+0xb0>)
 800578a:	4826      	ldr	r0, [pc, #152]	; (8005824 <__d2b+0xb4>)
 800578c:	f240 310a 	movw	r1, #778	; 0x30a
 8005790:	f000 fa70 	bl	8005c74 <__assert_func>
 8005794:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005798:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800579c:	bb35      	cbnz	r5, 80057ec <__d2b+0x7c>
 800579e:	2e00      	cmp	r6, #0
 80057a0:	9301      	str	r3, [sp, #4]
 80057a2:	d028      	beq.n	80057f6 <__d2b+0x86>
 80057a4:	4668      	mov	r0, sp
 80057a6:	9600      	str	r6, [sp, #0]
 80057a8:	f7ff fd8c 	bl	80052c4 <__lo0bits>
 80057ac:	9900      	ldr	r1, [sp, #0]
 80057ae:	b300      	cbz	r0, 80057f2 <__d2b+0x82>
 80057b0:	9a01      	ldr	r2, [sp, #4]
 80057b2:	f1c0 0320 	rsb	r3, r0, #32
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	430b      	orrs	r3, r1
 80057bc:	40c2      	lsrs	r2, r0
 80057be:	6163      	str	r3, [r4, #20]
 80057c0:	9201      	str	r2, [sp, #4]
 80057c2:	9b01      	ldr	r3, [sp, #4]
 80057c4:	61a3      	str	r3, [r4, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bf14      	ite	ne
 80057ca:	2202      	movne	r2, #2
 80057cc:	2201      	moveq	r2, #1
 80057ce:	6122      	str	r2, [r4, #16]
 80057d0:	b1d5      	cbz	r5, 8005808 <__d2b+0x98>
 80057d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80057d6:	4405      	add	r5, r0
 80057d8:	f8c9 5000 	str.w	r5, [r9]
 80057dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80057e0:	f8c8 0000 	str.w	r0, [r8]
 80057e4:	4620      	mov	r0, r4
 80057e6:	b003      	add	sp, #12
 80057e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057f0:	e7d5      	b.n	800579e <__d2b+0x2e>
 80057f2:	6161      	str	r1, [r4, #20]
 80057f4:	e7e5      	b.n	80057c2 <__d2b+0x52>
 80057f6:	a801      	add	r0, sp, #4
 80057f8:	f7ff fd64 	bl	80052c4 <__lo0bits>
 80057fc:	9b01      	ldr	r3, [sp, #4]
 80057fe:	6163      	str	r3, [r4, #20]
 8005800:	2201      	movs	r2, #1
 8005802:	6122      	str	r2, [r4, #16]
 8005804:	3020      	adds	r0, #32
 8005806:	e7e3      	b.n	80057d0 <__d2b+0x60>
 8005808:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800580c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005810:	f8c9 0000 	str.w	r0, [r9]
 8005814:	6918      	ldr	r0, [r3, #16]
 8005816:	f7ff fd35 	bl	8005284 <__hi0bits>
 800581a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800581e:	e7df      	b.n	80057e0 <__d2b+0x70>
 8005820:	0800692f 	.word	0x0800692f
 8005824:	08006940 	.word	0x08006940

08005828 <_calloc_r>:
 8005828:	b513      	push	{r0, r1, r4, lr}
 800582a:	434a      	muls	r2, r1
 800582c:	4611      	mov	r1, r2
 800582e:	9201      	str	r2, [sp, #4]
 8005830:	f000 f85a 	bl	80058e8 <_malloc_r>
 8005834:	4604      	mov	r4, r0
 8005836:	b118      	cbz	r0, 8005840 <_calloc_r+0x18>
 8005838:	9a01      	ldr	r2, [sp, #4]
 800583a:	2100      	movs	r1, #0
 800583c:	f7fe f950 	bl	8003ae0 <memset>
 8005840:	4620      	mov	r0, r4
 8005842:	b002      	add	sp, #8
 8005844:	bd10      	pop	{r4, pc}
	...

08005848 <_free_r>:
 8005848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800584a:	2900      	cmp	r1, #0
 800584c:	d048      	beq.n	80058e0 <_free_r+0x98>
 800584e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005852:	9001      	str	r0, [sp, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f1a1 0404 	sub.w	r4, r1, #4
 800585a:	bfb8      	it	lt
 800585c:	18e4      	addlt	r4, r4, r3
 800585e:	f000 fa65 	bl	8005d2c <__malloc_lock>
 8005862:	4a20      	ldr	r2, [pc, #128]	; (80058e4 <_free_r+0x9c>)
 8005864:	9801      	ldr	r0, [sp, #4]
 8005866:	6813      	ldr	r3, [r2, #0]
 8005868:	4615      	mov	r5, r2
 800586a:	b933      	cbnz	r3, 800587a <_free_r+0x32>
 800586c:	6063      	str	r3, [r4, #4]
 800586e:	6014      	str	r4, [r2, #0]
 8005870:	b003      	add	sp, #12
 8005872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005876:	f000 ba5f 	b.w	8005d38 <__malloc_unlock>
 800587a:	42a3      	cmp	r3, r4
 800587c:	d90b      	bls.n	8005896 <_free_r+0x4e>
 800587e:	6821      	ldr	r1, [r4, #0]
 8005880:	1862      	adds	r2, r4, r1
 8005882:	4293      	cmp	r3, r2
 8005884:	bf04      	itt	eq
 8005886:	681a      	ldreq	r2, [r3, #0]
 8005888:	685b      	ldreq	r3, [r3, #4]
 800588a:	6063      	str	r3, [r4, #4]
 800588c:	bf04      	itt	eq
 800588e:	1852      	addeq	r2, r2, r1
 8005890:	6022      	streq	r2, [r4, #0]
 8005892:	602c      	str	r4, [r5, #0]
 8005894:	e7ec      	b.n	8005870 <_free_r+0x28>
 8005896:	461a      	mov	r2, r3
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	b10b      	cbz	r3, 80058a0 <_free_r+0x58>
 800589c:	42a3      	cmp	r3, r4
 800589e:	d9fa      	bls.n	8005896 <_free_r+0x4e>
 80058a0:	6811      	ldr	r1, [r2, #0]
 80058a2:	1855      	adds	r5, r2, r1
 80058a4:	42a5      	cmp	r5, r4
 80058a6:	d10b      	bne.n	80058c0 <_free_r+0x78>
 80058a8:	6824      	ldr	r4, [r4, #0]
 80058aa:	4421      	add	r1, r4
 80058ac:	1854      	adds	r4, r2, r1
 80058ae:	42a3      	cmp	r3, r4
 80058b0:	6011      	str	r1, [r2, #0]
 80058b2:	d1dd      	bne.n	8005870 <_free_r+0x28>
 80058b4:	681c      	ldr	r4, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	6053      	str	r3, [r2, #4]
 80058ba:	4421      	add	r1, r4
 80058bc:	6011      	str	r1, [r2, #0]
 80058be:	e7d7      	b.n	8005870 <_free_r+0x28>
 80058c0:	d902      	bls.n	80058c8 <_free_r+0x80>
 80058c2:	230c      	movs	r3, #12
 80058c4:	6003      	str	r3, [r0, #0]
 80058c6:	e7d3      	b.n	8005870 <_free_r+0x28>
 80058c8:	6825      	ldr	r5, [r4, #0]
 80058ca:	1961      	adds	r1, r4, r5
 80058cc:	428b      	cmp	r3, r1
 80058ce:	bf04      	itt	eq
 80058d0:	6819      	ldreq	r1, [r3, #0]
 80058d2:	685b      	ldreq	r3, [r3, #4]
 80058d4:	6063      	str	r3, [r4, #4]
 80058d6:	bf04      	itt	eq
 80058d8:	1949      	addeq	r1, r1, r5
 80058da:	6021      	streq	r1, [r4, #0]
 80058dc:	6054      	str	r4, [r2, #4]
 80058de:	e7c7      	b.n	8005870 <_free_r+0x28>
 80058e0:	b003      	add	sp, #12
 80058e2:	bd30      	pop	{r4, r5, pc}
 80058e4:	20000228 	.word	0x20000228

080058e8 <_malloc_r>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	1ccd      	adds	r5, r1, #3
 80058ec:	f025 0503 	bic.w	r5, r5, #3
 80058f0:	3508      	adds	r5, #8
 80058f2:	2d0c      	cmp	r5, #12
 80058f4:	bf38      	it	cc
 80058f6:	250c      	movcc	r5, #12
 80058f8:	2d00      	cmp	r5, #0
 80058fa:	4606      	mov	r6, r0
 80058fc:	db01      	blt.n	8005902 <_malloc_r+0x1a>
 80058fe:	42a9      	cmp	r1, r5
 8005900:	d903      	bls.n	800590a <_malloc_r+0x22>
 8005902:	230c      	movs	r3, #12
 8005904:	6033      	str	r3, [r6, #0]
 8005906:	2000      	movs	r0, #0
 8005908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800590a:	f000 fa0f 	bl	8005d2c <__malloc_lock>
 800590e:	4921      	ldr	r1, [pc, #132]	; (8005994 <_malloc_r+0xac>)
 8005910:	680a      	ldr	r2, [r1, #0]
 8005912:	4614      	mov	r4, r2
 8005914:	b99c      	cbnz	r4, 800593e <_malloc_r+0x56>
 8005916:	4f20      	ldr	r7, [pc, #128]	; (8005998 <_malloc_r+0xb0>)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	b923      	cbnz	r3, 8005926 <_malloc_r+0x3e>
 800591c:	4621      	mov	r1, r4
 800591e:	4630      	mov	r0, r6
 8005920:	f000 f998 	bl	8005c54 <_sbrk_r>
 8005924:	6038      	str	r0, [r7, #0]
 8005926:	4629      	mov	r1, r5
 8005928:	4630      	mov	r0, r6
 800592a:	f000 f993 	bl	8005c54 <_sbrk_r>
 800592e:	1c43      	adds	r3, r0, #1
 8005930:	d123      	bne.n	800597a <_malloc_r+0x92>
 8005932:	230c      	movs	r3, #12
 8005934:	6033      	str	r3, [r6, #0]
 8005936:	4630      	mov	r0, r6
 8005938:	f000 f9fe 	bl	8005d38 <__malloc_unlock>
 800593c:	e7e3      	b.n	8005906 <_malloc_r+0x1e>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	1b5b      	subs	r3, r3, r5
 8005942:	d417      	bmi.n	8005974 <_malloc_r+0x8c>
 8005944:	2b0b      	cmp	r3, #11
 8005946:	d903      	bls.n	8005950 <_malloc_r+0x68>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	441c      	add	r4, r3
 800594c:	6025      	str	r5, [r4, #0]
 800594e:	e004      	b.n	800595a <_malloc_r+0x72>
 8005950:	6863      	ldr	r3, [r4, #4]
 8005952:	42a2      	cmp	r2, r4
 8005954:	bf0c      	ite	eq
 8005956:	600b      	streq	r3, [r1, #0]
 8005958:	6053      	strne	r3, [r2, #4]
 800595a:	4630      	mov	r0, r6
 800595c:	f000 f9ec 	bl	8005d38 <__malloc_unlock>
 8005960:	f104 000b 	add.w	r0, r4, #11
 8005964:	1d23      	adds	r3, r4, #4
 8005966:	f020 0007 	bic.w	r0, r0, #7
 800596a:	1ac2      	subs	r2, r0, r3
 800596c:	d0cc      	beq.n	8005908 <_malloc_r+0x20>
 800596e:	1a1b      	subs	r3, r3, r0
 8005970:	50a3      	str	r3, [r4, r2]
 8005972:	e7c9      	b.n	8005908 <_malloc_r+0x20>
 8005974:	4622      	mov	r2, r4
 8005976:	6864      	ldr	r4, [r4, #4]
 8005978:	e7cc      	b.n	8005914 <_malloc_r+0x2c>
 800597a:	1cc4      	adds	r4, r0, #3
 800597c:	f024 0403 	bic.w	r4, r4, #3
 8005980:	42a0      	cmp	r0, r4
 8005982:	d0e3      	beq.n	800594c <_malloc_r+0x64>
 8005984:	1a21      	subs	r1, r4, r0
 8005986:	4630      	mov	r0, r6
 8005988:	f000 f964 	bl	8005c54 <_sbrk_r>
 800598c:	3001      	adds	r0, #1
 800598e:	d1dd      	bne.n	800594c <_malloc_r+0x64>
 8005990:	e7cf      	b.n	8005932 <_malloc_r+0x4a>
 8005992:	bf00      	nop
 8005994:	20000228 	.word	0x20000228
 8005998:	2000022c 	.word	0x2000022c

0800599c <__ssputs_r>:
 800599c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	688e      	ldr	r6, [r1, #8]
 80059a2:	429e      	cmp	r6, r3
 80059a4:	4682      	mov	sl, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	4690      	mov	r8, r2
 80059aa:	461f      	mov	r7, r3
 80059ac:	d838      	bhi.n	8005a20 <__ssputs_r+0x84>
 80059ae:	898a      	ldrh	r2, [r1, #12]
 80059b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059b4:	d032      	beq.n	8005a1c <__ssputs_r+0x80>
 80059b6:	6825      	ldr	r5, [r4, #0]
 80059b8:	6909      	ldr	r1, [r1, #16]
 80059ba:	eba5 0901 	sub.w	r9, r5, r1
 80059be:	6965      	ldr	r5, [r4, #20]
 80059c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059c8:	3301      	adds	r3, #1
 80059ca:	444b      	add	r3, r9
 80059cc:	106d      	asrs	r5, r5, #1
 80059ce:	429d      	cmp	r5, r3
 80059d0:	bf38      	it	cc
 80059d2:	461d      	movcc	r5, r3
 80059d4:	0553      	lsls	r3, r2, #21
 80059d6:	d531      	bpl.n	8005a3c <__ssputs_r+0xa0>
 80059d8:	4629      	mov	r1, r5
 80059da:	f7ff ff85 	bl	80058e8 <_malloc_r>
 80059de:	4606      	mov	r6, r0
 80059e0:	b950      	cbnz	r0, 80059f8 <__ssputs_r+0x5c>
 80059e2:	230c      	movs	r3, #12
 80059e4:	f8ca 3000 	str.w	r3, [sl]
 80059e8:	89a3      	ldrh	r3, [r4, #12]
 80059ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ee:	81a3      	strh	r3, [r4, #12]
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f8:	6921      	ldr	r1, [r4, #16]
 80059fa:	464a      	mov	r2, r9
 80059fc:	f7ff fb88 	bl	8005110 <memcpy>
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0a:	81a3      	strh	r3, [r4, #12]
 8005a0c:	6126      	str	r6, [r4, #16]
 8005a0e:	6165      	str	r5, [r4, #20]
 8005a10:	444e      	add	r6, r9
 8005a12:	eba5 0509 	sub.w	r5, r5, r9
 8005a16:	6026      	str	r6, [r4, #0]
 8005a18:	60a5      	str	r5, [r4, #8]
 8005a1a:	463e      	mov	r6, r7
 8005a1c:	42be      	cmp	r6, r7
 8005a1e:	d900      	bls.n	8005a22 <__ssputs_r+0x86>
 8005a20:	463e      	mov	r6, r7
 8005a22:	4632      	mov	r2, r6
 8005a24:	6820      	ldr	r0, [r4, #0]
 8005a26:	4641      	mov	r1, r8
 8005a28:	f000 f966 	bl	8005cf8 <memmove>
 8005a2c:	68a3      	ldr	r3, [r4, #8]
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	1b9b      	subs	r3, r3, r6
 8005a32:	4432      	add	r2, r6
 8005a34:	60a3      	str	r3, [r4, #8]
 8005a36:	6022      	str	r2, [r4, #0]
 8005a38:	2000      	movs	r0, #0
 8005a3a:	e7db      	b.n	80059f4 <__ssputs_r+0x58>
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	f000 f981 	bl	8005d44 <_realloc_r>
 8005a42:	4606      	mov	r6, r0
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d1e1      	bne.n	8005a0c <__ssputs_r+0x70>
 8005a48:	6921      	ldr	r1, [r4, #16]
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	f7ff fefc 	bl	8005848 <_free_r>
 8005a50:	e7c7      	b.n	80059e2 <__ssputs_r+0x46>
	...

08005a54 <_svfiprintf_r>:
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	4698      	mov	r8, r3
 8005a5a:	898b      	ldrh	r3, [r1, #12]
 8005a5c:	061b      	lsls	r3, r3, #24
 8005a5e:	b09d      	sub	sp, #116	; 0x74
 8005a60:	4607      	mov	r7, r0
 8005a62:	460d      	mov	r5, r1
 8005a64:	4614      	mov	r4, r2
 8005a66:	d50e      	bpl.n	8005a86 <_svfiprintf_r+0x32>
 8005a68:	690b      	ldr	r3, [r1, #16]
 8005a6a:	b963      	cbnz	r3, 8005a86 <_svfiprintf_r+0x32>
 8005a6c:	2140      	movs	r1, #64	; 0x40
 8005a6e:	f7ff ff3b 	bl	80058e8 <_malloc_r>
 8005a72:	6028      	str	r0, [r5, #0]
 8005a74:	6128      	str	r0, [r5, #16]
 8005a76:	b920      	cbnz	r0, 8005a82 <_svfiprintf_r+0x2e>
 8005a78:	230c      	movs	r3, #12
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a80:	e0d1      	b.n	8005c26 <_svfiprintf_r+0x1d2>
 8005a82:	2340      	movs	r3, #64	; 0x40
 8005a84:	616b      	str	r3, [r5, #20]
 8005a86:	2300      	movs	r3, #0
 8005a88:	9309      	str	r3, [sp, #36]	; 0x24
 8005a8a:	2320      	movs	r3, #32
 8005a8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a90:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a94:	2330      	movs	r3, #48	; 0x30
 8005a96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c40 <_svfiprintf_r+0x1ec>
 8005a9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a9e:	f04f 0901 	mov.w	r9, #1
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	469a      	mov	sl, r3
 8005aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aaa:	b10a      	cbz	r2, 8005ab0 <_svfiprintf_r+0x5c>
 8005aac:	2a25      	cmp	r2, #37	; 0x25
 8005aae:	d1f9      	bne.n	8005aa4 <_svfiprintf_r+0x50>
 8005ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ab4:	d00b      	beq.n	8005ace <_svfiprintf_r+0x7a>
 8005ab6:	465b      	mov	r3, fp
 8005ab8:	4622      	mov	r2, r4
 8005aba:	4629      	mov	r1, r5
 8005abc:	4638      	mov	r0, r7
 8005abe:	f7ff ff6d 	bl	800599c <__ssputs_r>
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f000 80aa 	beq.w	8005c1c <_svfiprintf_r+0x1c8>
 8005ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aca:	445a      	add	r2, fp
 8005acc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ace:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80a2 	beq.w	8005c1c <_svfiprintf_r+0x1c8>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f04f 32ff 	mov.w	r2, #4294967295
 8005ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ae2:	f10a 0a01 	add.w	sl, sl, #1
 8005ae6:	9304      	str	r3, [sp, #16]
 8005ae8:	9307      	str	r3, [sp, #28]
 8005aea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aee:	931a      	str	r3, [sp, #104]	; 0x68
 8005af0:	4654      	mov	r4, sl
 8005af2:	2205      	movs	r2, #5
 8005af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af8:	4851      	ldr	r0, [pc, #324]	; (8005c40 <_svfiprintf_r+0x1ec>)
 8005afa:	f7fa fb71 	bl	80001e0 <memchr>
 8005afe:	9a04      	ldr	r2, [sp, #16]
 8005b00:	b9d8      	cbnz	r0, 8005b3a <_svfiprintf_r+0xe6>
 8005b02:	06d0      	lsls	r0, r2, #27
 8005b04:	bf44      	itt	mi
 8005b06:	2320      	movmi	r3, #32
 8005b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b0c:	0711      	lsls	r1, r2, #28
 8005b0e:	bf44      	itt	mi
 8005b10:	232b      	movmi	r3, #43	; 0x2b
 8005b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b16:	f89a 3000 	ldrb.w	r3, [sl]
 8005b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b1c:	d015      	beq.n	8005b4a <_svfiprintf_r+0xf6>
 8005b1e:	9a07      	ldr	r2, [sp, #28]
 8005b20:	4654      	mov	r4, sl
 8005b22:	2000      	movs	r0, #0
 8005b24:	f04f 0c0a 	mov.w	ip, #10
 8005b28:	4621      	mov	r1, r4
 8005b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b2e:	3b30      	subs	r3, #48	; 0x30
 8005b30:	2b09      	cmp	r3, #9
 8005b32:	d94e      	bls.n	8005bd2 <_svfiprintf_r+0x17e>
 8005b34:	b1b0      	cbz	r0, 8005b64 <_svfiprintf_r+0x110>
 8005b36:	9207      	str	r2, [sp, #28]
 8005b38:	e014      	b.n	8005b64 <_svfiprintf_r+0x110>
 8005b3a:	eba0 0308 	sub.w	r3, r0, r8
 8005b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8005b42:	4313      	orrs	r3, r2
 8005b44:	9304      	str	r3, [sp, #16]
 8005b46:	46a2      	mov	sl, r4
 8005b48:	e7d2      	b.n	8005af0 <_svfiprintf_r+0x9c>
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	1d19      	adds	r1, r3, #4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	9103      	str	r1, [sp, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bfbb      	ittet	lt
 8005b56:	425b      	neglt	r3, r3
 8005b58:	f042 0202 	orrlt.w	r2, r2, #2
 8005b5c:	9307      	strge	r3, [sp, #28]
 8005b5e:	9307      	strlt	r3, [sp, #28]
 8005b60:	bfb8      	it	lt
 8005b62:	9204      	strlt	r2, [sp, #16]
 8005b64:	7823      	ldrb	r3, [r4, #0]
 8005b66:	2b2e      	cmp	r3, #46	; 0x2e
 8005b68:	d10c      	bne.n	8005b84 <_svfiprintf_r+0x130>
 8005b6a:	7863      	ldrb	r3, [r4, #1]
 8005b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b6e:	d135      	bne.n	8005bdc <_svfiprintf_r+0x188>
 8005b70:	9b03      	ldr	r3, [sp, #12]
 8005b72:	1d1a      	adds	r2, r3, #4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	9203      	str	r2, [sp, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bfb8      	it	lt
 8005b7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b80:	3402      	adds	r4, #2
 8005b82:	9305      	str	r3, [sp, #20]
 8005b84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c50 <_svfiprintf_r+0x1fc>
 8005b88:	7821      	ldrb	r1, [r4, #0]
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	4650      	mov	r0, sl
 8005b8e:	f7fa fb27 	bl	80001e0 <memchr>
 8005b92:	b140      	cbz	r0, 8005ba6 <_svfiprintf_r+0x152>
 8005b94:	2340      	movs	r3, #64	; 0x40
 8005b96:	eba0 000a 	sub.w	r0, r0, sl
 8005b9a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b9e:	9b04      	ldr	r3, [sp, #16]
 8005ba0:	4303      	orrs	r3, r0
 8005ba2:	3401      	adds	r4, #1
 8005ba4:	9304      	str	r3, [sp, #16]
 8005ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005baa:	4826      	ldr	r0, [pc, #152]	; (8005c44 <_svfiprintf_r+0x1f0>)
 8005bac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bb0:	2206      	movs	r2, #6
 8005bb2:	f7fa fb15 	bl	80001e0 <memchr>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d038      	beq.n	8005c2c <_svfiprintf_r+0x1d8>
 8005bba:	4b23      	ldr	r3, [pc, #140]	; (8005c48 <_svfiprintf_r+0x1f4>)
 8005bbc:	bb1b      	cbnz	r3, 8005c06 <_svfiprintf_r+0x1b2>
 8005bbe:	9b03      	ldr	r3, [sp, #12]
 8005bc0:	3307      	adds	r3, #7
 8005bc2:	f023 0307 	bic.w	r3, r3, #7
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	9303      	str	r3, [sp, #12]
 8005bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bcc:	4433      	add	r3, r6
 8005bce:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd0:	e767      	b.n	8005aa2 <_svfiprintf_r+0x4e>
 8005bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	2001      	movs	r0, #1
 8005bda:	e7a5      	b.n	8005b28 <_svfiprintf_r+0xd4>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	3401      	adds	r4, #1
 8005be0:	9305      	str	r3, [sp, #20]
 8005be2:	4619      	mov	r1, r3
 8005be4:	f04f 0c0a 	mov.w	ip, #10
 8005be8:	4620      	mov	r0, r4
 8005bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bee:	3a30      	subs	r2, #48	; 0x30
 8005bf0:	2a09      	cmp	r2, #9
 8005bf2:	d903      	bls.n	8005bfc <_svfiprintf_r+0x1a8>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0c5      	beq.n	8005b84 <_svfiprintf_r+0x130>
 8005bf8:	9105      	str	r1, [sp, #20]
 8005bfa:	e7c3      	b.n	8005b84 <_svfiprintf_r+0x130>
 8005bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c00:	4604      	mov	r4, r0
 8005c02:	2301      	movs	r3, #1
 8005c04:	e7f0      	b.n	8005be8 <_svfiprintf_r+0x194>
 8005c06:	ab03      	add	r3, sp, #12
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	462a      	mov	r2, r5
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <_svfiprintf_r+0x1f8>)
 8005c0e:	a904      	add	r1, sp, #16
 8005c10:	4638      	mov	r0, r7
 8005c12:	f7fe f80d 	bl	8003c30 <_printf_float>
 8005c16:	1c42      	adds	r2, r0, #1
 8005c18:	4606      	mov	r6, r0
 8005c1a:	d1d6      	bne.n	8005bca <_svfiprintf_r+0x176>
 8005c1c:	89ab      	ldrh	r3, [r5, #12]
 8005c1e:	065b      	lsls	r3, r3, #25
 8005c20:	f53f af2c 	bmi.w	8005a7c <_svfiprintf_r+0x28>
 8005c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c26:	b01d      	add	sp, #116	; 0x74
 8005c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2c:	ab03      	add	r3, sp, #12
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	462a      	mov	r2, r5
 8005c32:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <_svfiprintf_r+0x1f8>)
 8005c34:	a904      	add	r1, sp, #16
 8005c36:	4638      	mov	r0, r7
 8005c38:	f7fe fa9e 	bl	8004178 <_printf_i>
 8005c3c:	e7eb      	b.n	8005c16 <_svfiprintf_r+0x1c2>
 8005c3e:	bf00      	nop
 8005c40:	08006a9c 	.word	0x08006a9c
 8005c44:	08006aa6 	.word	0x08006aa6
 8005c48:	08003c31 	.word	0x08003c31
 8005c4c:	0800599d 	.word	0x0800599d
 8005c50:	08006aa2 	.word	0x08006aa2

08005c54 <_sbrk_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4d06      	ldr	r5, [pc, #24]	; (8005c70 <_sbrk_r+0x1c>)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	602b      	str	r3, [r5, #0]
 8005c60:	f7fc f9e8 	bl	8002034 <_sbrk>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_sbrk_r+0x1a>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_sbrk_r+0x1a>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	200002b0 	.word	0x200002b0

08005c74 <__assert_func>:
 8005c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c76:	4614      	mov	r4, r2
 8005c78:	461a      	mov	r2, r3
 8005c7a:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <__assert_func+0x2c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4605      	mov	r5, r0
 8005c80:	68d8      	ldr	r0, [r3, #12]
 8005c82:	b14c      	cbz	r4, 8005c98 <__assert_func+0x24>
 8005c84:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <__assert_func+0x30>)
 8005c86:	9100      	str	r1, [sp, #0]
 8005c88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c8c:	4906      	ldr	r1, [pc, #24]	; (8005ca8 <__assert_func+0x34>)
 8005c8e:	462b      	mov	r3, r5
 8005c90:	f000 f80e 	bl	8005cb0 <fiprintf>
 8005c94:	f000 faa4 	bl	80061e0 <abort>
 8005c98:	4b04      	ldr	r3, [pc, #16]	; (8005cac <__assert_func+0x38>)
 8005c9a:	461c      	mov	r4, r3
 8005c9c:	e7f3      	b.n	8005c86 <__assert_func+0x12>
 8005c9e:	bf00      	nop
 8005ca0:	20000010 	.word	0x20000010
 8005ca4:	08006aad 	.word	0x08006aad
 8005ca8:	08006aba 	.word	0x08006aba
 8005cac:	08006ae8 	.word	0x08006ae8

08005cb0 <fiprintf>:
 8005cb0:	b40e      	push	{r1, r2, r3}
 8005cb2:	b503      	push	{r0, r1, lr}
 8005cb4:	4601      	mov	r1, r0
 8005cb6:	ab03      	add	r3, sp, #12
 8005cb8:	4805      	ldr	r0, [pc, #20]	; (8005cd0 <fiprintf+0x20>)
 8005cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cbe:	6800      	ldr	r0, [r0, #0]
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	f000 f88f 	bl	8005de4 <_vfiprintf_r>
 8005cc6:	b002      	add	sp, #8
 8005cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ccc:	b003      	add	sp, #12
 8005cce:	4770      	bx	lr
 8005cd0:	20000010 	.word	0x20000010

08005cd4 <__ascii_mbtowc>:
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	b901      	cbnz	r1, 8005cda <__ascii_mbtowc+0x6>
 8005cd8:	a901      	add	r1, sp, #4
 8005cda:	b142      	cbz	r2, 8005cee <__ascii_mbtowc+0x1a>
 8005cdc:	b14b      	cbz	r3, 8005cf2 <__ascii_mbtowc+0x1e>
 8005cde:	7813      	ldrb	r3, [r2, #0]
 8005ce0:	600b      	str	r3, [r1, #0]
 8005ce2:	7812      	ldrb	r2, [r2, #0]
 8005ce4:	1e10      	subs	r0, r2, #0
 8005ce6:	bf18      	it	ne
 8005ce8:	2001      	movne	r0, #1
 8005cea:	b002      	add	sp, #8
 8005cec:	4770      	bx	lr
 8005cee:	4610      	mov	r0, r2
 8005cf0:	e7fb      	b.n	8005cea <__ascii_mbtowc+0x16>
 8005cf2:	f06f 0001 	mvn.w	r0, #1
 8005cf6:	e7f8      	b.n	8005cea <__ascii_mbtowc+0x16>

08005cf8 <memmove>:
 8005cf8:	4288      	cmp	r0, r1
 8005cfa:	b510      	push	{r4, lr}
 8005cfc:	eb01 0402 	add.w	r4, r1, r2
 8005d00:	d902      	bls.n	8005d08 <memmove+0x10>
 8005d02:	4284      	cmp	r4, r0
 8005d04:	4623      	mov	r3, r4
 8005d06:	d807      	bhi.n	8005d18 <memmove+0x20>
 8005d08:	1e43      	subs	r3, r0, #1
 8005d0a:	42a1      	cmp	r1, r4
 8005d0c:	d008      	beq.n	8005d20 <memmove+0x28>
 8005d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d16:	e7f8      	b.n	8005d0a <memmove+0x12>
 8005d18:	4402      	add	r2, r0
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	428a      	cmp	r2, r1
 8005d1e:	d100      	bne.n	8005d22 <memmove+0x2a>
 8005d20:	bd10      	pop	{r4, pc}
 8005d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d2a:	e7f7      	b.n	8005d1c <memmove+0x24>

08005d2c <__malloc_lock>:
 8005d2c:	4801      	ldr	r0, [pc, #4]	; (8005d34 <__malloc_lock+0x8>)
 8005d2e:	f000 bc17 	b.w	8006560 <__retarget_lock_acquire_recursive>
 8005d32:	bf00      	nop
 8005d34:	200002b8 	.word	0x200002b8

08005d38 <__malloc_unlock>:
 8005d38:	4801      	ldr	r0, [pc, #4]	; (8005d40 <__malloc_unlock+0x8>)
 8005d3a:	f000 bc12 	b.w	8006562 <__retarget_lock_release_recursive>
 8005d3e:	bf00      	nop
 8005d40:	200002b8 	.word	0x200002b8

08005d44 <_realloc_r>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	4607      	mov	r7, r0
 8005d48:	4614      	mov	r4, r2
 8005d4a:	460e      	mov	r6, r1
 8005d4c:	b921      	cbnz	r1, 8005d58 <_realloc_r+0x14>
 8005d4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d52:	4611      	mov	r1, r2
 8005d54:	f7ff bdc8 	b.w	80058e8 <_malloc_r>
 8005d58:	b922      	cbnz	r2, 8005d64 <_realloc_r+0x20>
 8005d5a:	f7ff fd75 	bl	8005848 <_free_r>
 8005d5e:	4625      	mov	r5, r4
 8005d60:	4628      	mov	r0, r5
 8005d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d64:	f000 fc62 	bl	800662c <_malloc_usable_size_r>
 8005d68:	42a0      	cmp	r0, r4
 8005d6a:	d20f      	bcs.n	8005d8c <_realloc_r+0x48>
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4638      	mov	r0, r7
 8005d70:	f7ff fdba 	bl	80058e8 <_malloc_r>
 8005d74:	4605      	mov	r5, r0
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d0f2      	beq.n	8005d60 <_realloc_r+0x1c>
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	f7ff f9c7 	bl	8005110 <memcpy>
 8005d82:	4631      	mov	r1, r6
 8005d84:	4638      	mov	r0, r7
 8005d86:	f7ff fd5f 	bl	8005848 <_free_r>
 8005d8a:	e7e9      	b.n	8005d60 <_realloc_r+0x1c>
 8005d8c:	4635      	mov	r5, r6
 8005d8e:	e7e7      	b.n	8005d60 <_realloc_r+0x1c>

08005d90 <__sfputc_r>:
 8005d90:	6893      	ldr	r3, [r2, #8]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	b410      	push	{r4}
 8005d98:	6093      	str	r3, [r2, #8]
 8005d9a:	da08      	bge.n	8005dae <__sfputc_r+0x1e>
 8005d9c:	6994      	ldr	r4, [r2, #24]
 8005d9e:	42a3      	cmp	r3, r4
 8005da0:	db01      	blt.n	8005da6 <__sfputc_r+0x16>
 8005da2:	290a      	cmp	r1, #10
 8005da4:	d103      	bne.n	8005dae <__sfputc_r+0x1e>
 8005da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005daa:	f000 b94b 	b.w	8006044 <__swbuf_r>
 8005dae:	6813      	ldr	r3, [r2, #0]
 8005db0:	1c58      	adds	r0, r3, #1
 8005db2:	6010      	str	r0, [r2, #0]
 8005db4:	7019      	strb	r1, [r3, #0]
 8005db6:	4608      	mov	r0, r1
 8005db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <__sfputs_r>:
 8005dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	460f      	mov	r7, r1
 8005dc4:	4614      	mov	r4, r2
 8005dc6:	18d5      	adds	r5, r2, r3
 8005dc8:	42ac      	cmp	r4, r5
 8005dca:	d101      	bne.n	8005dd0 <__sfputs_r+0x12>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	e007      	b.n	8005de0 <__sfputs_r+0x22>
 8005dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd4:	463a      	mov	r2, r7
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f7ff ffda 	bl	8005d90 <__sfputc_r>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d1f3      	bne.n	8005dc8 <__sfputs_r+0xa>
 8005de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005de4 <_vfiprintf_r>:
 8005de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de8:	460d      	mov	r5, r1
 8005dea:	b09d      	sub	sp, #116	; 0x74
 8005dec:	4614      	mov	r4, r2
 8005dee:	4698      	mov	r8, r3
 8005df0:	4606      	mov	r6, r0
 8005df2:	b118      	cbz	r0, 8005dfc <_vfiprintf_r+0x18>
 8005df4:	6983      	ldr	r3, [r0, #24]
 8005df6:	b90b      	cbnz	r3, 8005dfc <_vfiprintf_r+0x18>
 8005df8:	f000 fb14 	bl	8006424 <__sinit>
 8005dfc:	4b89      	ldr	r3, [pc, #548]	; (8006024 <_vfiprintf_r+0x240>)
 8005dfe:	429d      	cmp	r5, r3
 8005e00:	d11b      	bne.n	8005e3a <_vfiprintf_r+0x56>
 8005e02:	6875      	ldr	r5, [r6, #4]
 8005e04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e06:	07d9      	lsls	r1, r3, #31
 8005e08:	d405      	bmi.n	8005e16 <_vfiprintf_r+0x32>
 8005e0a:	89ab      	ldrh	r3, [r5, #12]
 8005e0c:	059a      	lsls	r2, r3, #22
 8005e0e:	d402      	bmi.n	8005e16 <_vfiprintf_r+0x32>
 8005e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e12:	f000 fba5 	bl	8006560 <__retarget_lock_acquire_recursive>
 8005e16:	89ab      	ldrh	r3, [r5, #12]
 8005e18:	071b      	lsls	r3, r3, #28
 8005e1a:	d501      	bpl.n	8005e20 <_vfiprintf_r+0x3c>
 8005e1c:	692b      	ldr	r3, [r5, #16]
 8005e1e:	b9eb      	cbnz	r3, 8005e5c <_vfiprintf_r+0x78>
 8005e20:	4629      	mov	r1, r5
 8005e22:	4630      	mov	r0, r6
 8005e24:	f000 f96e 	bl	8006104 <__swsetup_r>
 8005e28:	b1c0      	cbz	r0, 8005e5c <_vfiprintf_r+0x78>
 8005e2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e2c:	07dc      	lsls	r4, r3, #31
 8005e2e:	d50e      	bpl.n	8005e4e <_vfiprintf_r+0x6a>
 8005e30:	f04f 30ff 	mov.w	r0, #4294967295
 8005e34:	b01d      	add	sp, #116	; 0x74
 8005e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3a:	4b7b      	ldr	r3, [pc, #492]	; (8006028 <_vfiprintf_r+0x244>)
 8005e3c:	429d      	cmp	r5, r3
 8005e3e:	d101      	bne.n	8005e44 <_vfiprintf_r+0x60>
 8005e40:	68b5      	ldr	r5, [r6, #8]
 8005e42:	e7df      	b.n	8005e04 <_vfiprintf_r+0x20>
 8005e44:	4b79      	ldr	r3, [pc, #484]	; (800602c <_vfiprintf_r+0x248>)
 8005e46:	429d      	cmp	r5, r3
 8005e48:	bf08      	it	eq
 8005e4a:	68f5      	ldreq	r5, [r6, #12]
 8005e4c:	e7da      	b.n	8005e04 <_vfiprintf_r+0x20>
 8005e4e:	89ab      	ldrh	r3, [r5, #12]
 8005e50:	0598      	lsls	r0, r3, #22
 8005e52:	d4ed      	bmi.n	8005e30 <_vfiprintf_r+0x4c>
 8005e54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e56:	f000 fb84 	bl	8006562 <__retarget_lock_release_recursive>
 8005e5a:	e7e9      	b.n	8005e30 <_vfiprintf_r+0x4c>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e60:	2320      	movs	r3, #32
 8005e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e66:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e6a:	2330      	movs	r3, #48	; 0x30
 8005e6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006030 <_vfiprintf_r+0x24c>
 8005e70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e74:	f04f 0901 	mov.w	r9, #1
 8005e78:	4623      	mov	r3, r4
 8005e7a:	469a      	mov	sl, r3
 8005e7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e80:	b10a      	cbz	r2, 8005e86 <_vfiprintf_r+0xa2>
 8005e82:	2a25      	cmp	r2, #37	; 0x25
 8005e84:	d1f9      	bne.n	8005e7a <_vfiprintf_r+0x96>
 8005e86:	ebba 0b04 	subs.w	fp, sl, r4
 8005e8a:	d00b      	beq.n	8005ea4 <_vfiprintf_r+0xc0>
 8005e8c:	465b      	mov	r3, fp
 8005e8e:	4622      	mov	r2, r4
 8005e90:	4629      	mov	r1, r5
 8005e92:	4630      	mov	r0, r6
 8005e94:	f7ff ff93 	bl	8005dbe <__sfputs_r>
 8005e98:	3001      	adds	r0, #1
 8005e9a:	f000 80aa 	beq.w	8005ff2 <_vfiprintf_r+0x20e>
 8005e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ea0:	445a      	add	r2, fp
 8005ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80a2 	beq.w	8005ff2 <_vfiprintf_r+0x20e>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eb8:	f10a 0a01 	add.w	sl, sl, #1
 8005ebc:	9304      	str	r3, [sp, #16]
 8005ebe:	9307      	str	r3, [sp, #28]
 8005ec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ec4:	931a      	str	r3, [sp, #104]	; 0x68
 8005ec6:	4654      	mov	r4, sl
 8005ec8:	2205      	movs	r2, #5
 8005eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ece:	4858      	ldr	r0, [pc, #352]	; (8006030 <_vfiprintf_r+0x24c>)
 8005ed0:	f7fa f986 	bl	80001e0 <memchr>
 8005ed4:	9a04      	ldr	r2, [sp, #16]
 8005ed6:	b9d8      	cbnz	r0, 8005f10 <_vfiprintf_r+0x12c>
 8005ed8:	06d1      	lsls	r1, r2, #27
 8005eda:	bf44      	itt	mi
 8005edc:	2320      	movmi	r3, #32
 8005ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee2:	0713      	lsls	r3, r2, #28
 8005ee4:	bf44      	itt	mi
 8005ee6:	232b      	movmi	r3, #43	; 0x2b
 8005ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eec:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ef2:	d015      	beq.n	8005f20 <_vfiprintf_r+0x13c>
 8005ef4:	9a07      	ldr	r2, [sp, #28]
 8005ef6:	4654      	mov	r4, sl
 8005ef8:	2000      	movs	r0, #0
 8005efa:	f04f 0c0a 	mov.w	ip, #10
 8005efe:	4621      	mov	r1, r4
 8005f00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f04:	3b30      	subs	r3, #48	; 0x30
 8005f06:	2b09      	cmp	r3, #9
 8005f08:	d94e      	bls.n	8005fa8 <_vfiprintf_r+0x1c4>
 8005f0a:	b1b0      	cbz	r0, 8005f3a <_vfiprintf_r+0x156>
 8005f0c:	9207      	str	r2, [sp, #28]
 8005f0e:	e014      	b.n	8005f3a <_vfiprintf_r+0x156>
 8005f10:	eba0 0308 	sub.w	r3, r0, r8
 8005f14:	fa09 f303 	lsl.w	r3, r9, r3
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	9304      	str	r3, [sp, #16]
 8005f1c:	46a2      	mov	sl, r4
 8005f1e:	e7d2      	b.n	8005ec6 <_vfiprintf_r+0xe2>
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	1d19      	adds	r1, r3, #4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	9103      	str	r1, [sp, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	bfbb      	ittet	lt
 8005f2c:	425b      	neglt	r3, r3
 8005f2e:	f042 0202 	orrlt.w	r2, r2, #2
 8005f32:	9307      	strge	r3, [sp, #28]
 8005f34:	9307      	strlt	r3, [sp, #28]
 8005f36:	bfb8      	it	lt
 8005f38:	9204      	strlt	r2, [sp, #16]
 8005f3a:	7823      	ldrb	r3, [r4, #0]
 8005f3c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f3e:	d10c      	bne.n	8005f5a <_vfiprintf_r+0x176>
 8005f40:	7863      	ldrb	r3, [r4, #1]
 8005f42:	2b2a      	cmp	r3, #42	; 0x2a
 8005f44:	d135      	bne.n	8005fb2 <_vfiprintf_r+0x1ce>
 8005f46:	9b03      	ldr	r3, [sp, #12]
 8005f48:	1d1a      	adds	r2, r3, #4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	9203      	str	r2, [sp, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	bfb8      	it	lt
 8005f52:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f56:	3402      	adds	r4, #2
 8005f58:	9305      	str	r3, [sp, #20]
 8005f5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006040 <_vfiprintf_r+0x25c>
 8005f5e:	7821      	ldrb	r1, [r4, #0]
 8005f60:	2203      	movs	r2, #3
 8005f62:	4650      	mov	r0, sl
 8005f64:	f7fa f93c 	bl	80001e0 <memchr>
 8005f68:	b140      	cbz	r0, 8005f7c <_vfiprintf_r+0x198>
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	eba0 000a 	sub.w	r0, r0, sl
 8005f70:	fa03 f000 	lsl.w	r0, r3, r0
 8005f74:	9b04      	ldr	r3, [sp, #16]
 8005f76:	4303      	orrs	r3, r0
 8005f78:	3401      	adds	r4, #1
 8005f7a:	9304      	str	r3, [sp, #16]
 8005f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f80:	482c      	ldr	r0, [pc, #176]	; (8006034 <_vfiprintf_r+0x250>)
 8005f82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f86:	2206      	movs	r2, #6
 8005f88:	f7fa f92a 	bl	80001e0 <memchr>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d03f      	beq.n	8006010 <_vfiprintf_r+0x22c>
 8005f90:	4b29      	ldr	r3, [pc, #164]	; (8006038 <_vfiprintf_r+0x254>)
 8005f92:	bb1b      	cbnz	r3, 8005fdc <_vfiprintf_r+0x1f8>
 8005f94:	9b03      	ldr	r3, [sp, #12]
 8005f96:	3307      	adds	r3, #7
 8005f98:	f023 0307 	bic.w	r3, r3, #7
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	9303      	str	r3, [sp, #12]
 8005fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa2:	443b      	add	r3, r7
 8005fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa6:	e767      	b.n	8005e78 <_vfiprintf_r+0x94>
 8005fa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fac:	460c      	mov	r4, r1
 8005fae:	2001      	movs	r0, #1
 8005fb0:	e7a5      	b.n	8005efe <_vfiprintf_r+0x11a>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	3401      	adds	r4, #1
 8005fb6:	9305      	str	r3, [sp, #20]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f04f 0c0a 	mov.w	ip, #10
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fc4:	3a30      	subs	r2, #48	; 0x30
 8005fc6:	2a09      	cmp	r2, #9
 8005fc8:	d903      	bls.n	8005fd2 <_vfiprintf_r+0x1ee>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0c5      	beq.n	8005f5a <_vfiprintf_r+0x176>
 8005fce:	9105      	str	r1, [sp, #20]
 8005fd0:	e7c3      	b.n	8005f5a <_vfiprintf_r+0x176>
 8005fd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e7f0      	b.n	8005fbe <_vfiprintf_r+0x1da>
 8005fdc:	ab03      	add	r3, sp, #12
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	4b16      	ldr	r3, [pc, #88]	; (800603c <_vfiprintf_r+0x258>)
 8005fe4:	a904      	add	r1, sp, #16
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7fd fe22 	bl	8003c30 <_printf_float>
 8005fec:	4607      	mov	r7, r0
 8005fee:	1c78      	adds	r0, r7, #1
 8005ff0:	d1d6      	bne.n	8005fa0 <_vfiprintf_r+0x1bc>
 8005ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ff4:	07d9      	lsls	r1, r3, #31
 8005ff6:	d405      	bmi.n	8006004 <_vfiprintf_r+0x220>
 8005ff8:	89ab      	ldrh	r3, [r5, #12]
 8005ffa:	059a      	lsls	r2, r3, #22
 8005ffc:	d402      	bmi.n	8006004 <_vfiprintf_r+0x220>
 8005ffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006000:	f000 faaf 	bl	8006562 <__retarget_lock_release_recursive>
 8006004:	89ab      	ldrh	r3, [r5, #12]
 8006006:	065b      	lsls	r3, r3, #25
 8006008:	f53f af12 	bmi.w	8005e30 <_vfiprintf_r+0x4c>
 800600c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800600e:	e711      	b.n	8005e34 <_vfiprintf_r+0x50>
 8006010:	ab03      	add	r3, sp, #12
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	462a      	mov	r2, r5
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <_vfiprintf_r+0x258>)
 8006018:	a904      	add	r1, sp, #16
 800601a:	4630      	mov	r0, r6
 800601c:	f7fe f8ac 	bl	8004178 <_printf_i>
 8006020:	e7e4      	b.n	8005fec <_vfiprintf_r+0x208>
 8006022:	bf00      	nop
 8006024:	08006c14 	.word	0x08006c14
 8006028:	08006c34 	.word	0x08006c34
 800602c:	08006bf4 	.word	0x08006bf4
 8006030:	08006a9c 	.word	0x08006a9c
 8006034:	08006aa6 	.word	0x08006aa6
 8006038:	08003c31 	.word	0x08003c31
 800603c:	08005dbf 	.word	0x08005dbf
 8006040:	08006aa2 	.word	0x08006aa2

08006044 <__swbuf_r>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	460e      	mov	r6, r1
 8006048:	4614      	mov	r4, r2
 800604a:	4605      	mov	r5, r0
 800604c:	b118      	cbz	r0, 8006056 <__swbuf_r+0x12>
 800604e:	6983      	ldr	r3, [r0, #24]
 8006050:	b90b      	cbnz	r3, 8006056 <__swbuf_r+0x12>
 8006052:	f000 f9e7 	bl	8006424 <__sinit>
 8006056:	4b21      	ldr	r3, [pc, #132]	; (80060dc <__swbuf_r+0x98>)
 8006058:	429c      	cmp	r4, r3
 800605a:	d12b      	bne.n	80060b4 <__swbuf_r+0x70>
 800605c:	686c      	ldr	r4, [r5, #4]
 800605e:	69a3      	ldr	r3, [r4, #24]
 8006060:	60a3      	str	r3, [r4, #8]
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	071a      	lsls	r2, r3, #28
 8006066:	d52f      	bpl.n	80060c8 <__swbuf_r+0x84>
 8006068:	6923      	ldr	r3, [r4, #16]
 800606a:	b36b      	cbz	r3, 80060c8 <__swbuf_r+0x84>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	6820      	ldr	r0, [r4, #0]
 8006070:	1ac0      	subs	r0, r0, r3
 8006072:	6963      	ldr	r3, [r4, #20]
 8006074:	b2f6      	uxtb	r6, r6
 8006076:	4283      	cmp	r3, r0
 8006078:	4637      	mov	r7, r6
 800607a:	dc04      	bgt.n	8006086 <__swbuf_r+0x42>
 800607c:	4621      	mov	r1, r4
 800607e:	4628      	mov	r0, r5
 8006080:	f000 f93c 	bl	80062fc <_fflush_r>
 8006084:	bb30      	cbnz	r0, 80060d4 <__swbuf_r+0x90>
 8006086:	68a3      	ldr	r3, [r4, #8]
 8006088:	3b01      	subs	r3, #1
 800608a:	60a3      	str	r3, [r4, #8]
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	6022      	str	r2, [r4, #0]
 8006092:	701e      	strb	r6, [r3, #0]
 8006094:	6963      	ldr	r3, [r4, #20]
 8006096:	3001      	adds	r0, #1
 8006098:	4283      	cmp	r3, r0
 800609a:	d004      	beq.n	80060a6 <__swbuf_r+0x62>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	07db      	lsls	r3, r3, #31
 80060a0:	d506      	bpl.n	80060b0 <__swbuf_r+0x6c>
 80060a2:	2e0a      	cmp	r6, #10
 80060a4:	d104      	bne.n	80060b0 <__swbuf_r+0x6c>
 80060a6:	4621      	mov	r1, r4
 80060a8:	4628      	mov	r0, r5
 80060aa:	f000 f927 	bl	80062fc <_fflush_r>
 80060ae:	b988      	cbnz	r0, 80060d4 <__swbuf_r+0x90>
 80060b0:	4638      	mov	r0, r7
 80060b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <__swbuf_r+0x9c>)
 80060b6:	429c      	cmp	r4, r3
 80060b8:	d101      	bne.n	80060be <__swbuf_r+0x7a>
 80060ba:	68ac      	ldr	r4, [r5, #8]
 80060bc:	e7cf      	b.n	800605e <__swbuf_r+0x1a>
 80060be:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <__swbuf_r+0xa0>)
 80060c0:	429c      	cmp	r4, r3
 80060c2:	bf08      	it	eq
 80060c4:	68ec      	ldreq	r4, [r5, #12]
 80060c6:	e7ca      	b.n	800605e <__swbuf_r+0x1a>
 80060c8:	4621      	mov	r1, r4
 80060ca:	4628      	mov	r0, r5
 80060cc:	f000 f81a 	bl	8006104 <__swsetup_r>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	d0cb      	beq.n	800606c <__swbuf_r+0x28>
 80060d4:	f04f 37ff 	mov.w	r7, #4294967295
 80060d8:	e7ea      	b.n	80060b0 <__swbuf_r+0x6c>
 80060da:	bf00      	nop
 80060dc:	08006c14 	.word	0x08006c14
 80060e0:	08006c34 	.word	0x08006c34
 80060e4:	08006bf4 	.word	0x08006bf4

080060e8 <__ascii_wctomb>:
 80060e8:	b149      	cbz	r1, 80060fe <__ascii_wctomb+0x16>
 80060ea:	2aff      	cmp	r2, #255	; 0xff
 80060ec:	bf85      	ittet	hi
 80060ee:	238a      	movhi	r3, #138	; 0x8a
 80060f0:	6003      	strhi	r3, [r0, #0]
 80060f2:	700a      	strbls	r2, [r1, #0]
 80060f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80060f8:	bf98      	it	ls
 80060fa:	2001      	movls	r0, #1
 80060fc:	4770      	bx	lr
 80060fe:	4608      	mov	r0, r1
 8006100:	4770      	bx	lr
	...

08006104 <__swsetup_r>:
 8006104:	4b32      	ldr	r3, [pc, #200]	; (80061d0 <__swsetup_r+0xcc>)
 8006106:	b570      	push	{r4, r5, r6, lr}
 8006108:	681d      	ldr	r5, [r3, #0]
 800610a:	4606      	mov	r6, r0
 800610c:	460c      	mov	r4, r1
 800610e:	b125      	cbz	r5, 800611a <__swsetup_r+0x16>
 8006110:	69ab      	ldr	r3, [r5, #24]
 8006112:	b913      	cbnz	r3, 800611a <__swsetup_r+0x16>
 8006114:	4628      	mov	r0, r5
 8006116:	f000 f985 	bl	8006424 <__sinit>
 800611a:	4b2e      	ldr	r3, [pc, #184]	; (80061d4 <__swsetup_r+0xd0>)
 800611c:	429c      	cmp	r4, r3
 800611e:	d10f      	bne.n	8006140 <__swsetup_r+0x3c>
 8006120:	686c      	ldr	r4, [r5, #4]
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006128:	0719      	lsls	r1, r3, #28
 800612a:	d42c      	bmi.n	8006186 <__swsetup_r+0x82>
 800612c:	06dd      	lsls	r5, r3, #27
 800612e:	d411      	bmi.n	8006154 <__swsetup_r+0x50>
 8006130:	2309      	movs	r3, #9
 8006132:	6033      	str	r3, [r6, #0]
 8006134:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006138:	81a3      	strh	r3, [r4, #12]
 800613a:	f04f 30ff 	mov.w	r0, #4294967295
 800613e:	e03e      	b.n	80061be <__swsetup_r+0xba>
 8006140:	4b25      	ldr	r3, [pc, #148]	; (80061d8 <__swsetup_r+0xd4>)
 8006142:	429c      	cmp	r4, r3
 8006144:	d101      	bne.n	800614a <__swsetup_r+0x46>
 8006146:	68ac      	ldr	r4, [r5, #8]
 8006148:	e7eb      	b.n	8006122 <__swsetup_r+0x1e>
 800614a:	4b24      	ldr	r3, [pc, #144]	; (80061dc <__swsetup_r+0xd8>)
 800614c:	429c      	cmp	r4, r3
 800614e:	bf08      	it	eq
 8006150:	68ec      	ldreq	r4, [r5, #12]
 8006152:	e7e6      	b.n	8006122 <__swsetup_r+0x1e>
 8006154:	0758      	lsls	r0, r3, #29
 8006156:	d512      	bpl.n	800617e <__swsetup_r+0x7a>
 8006158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800615a:	b141      	cbz	r1, 800616e <__swsetup_r+0x6a>
 800615c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006160:	4299      	cmp	r1, r3
 8006162:	d002      	beq.n	800616a <__swsetup_r+0x66>
 8006164:	4630      	mov	r0, r6
 8006166:	f7ff fb6f 	bl	8005848 <_free_r>
 800616a:	2300      	movs	r3, #0
 800616c:	6363      	str	r3, [r4, #52]	; 0x34
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006174:	81a3      	strh	r3, [r4, #12]
 8006176:	2300      	movs	r3, #0
 8006178:	6063      	str	r3, [r4, #4]
 800617a:	6923      	ldr	r3, [r4, #16]
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	f043 0308 	orr.w	r3, r3, #8
 8006184:	81a3      	strh	r3, [r4, #12]
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	b94b      	cbnz	r3, 800619e <__swsetup_r+0x9a>
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006194:	d003      	beq.n	800619e <__swsetup_r+0x9a>
 8006196:	4621      	mov	r1, r4
 8006198:	4630      	mov	r0, r6
 800619a:	f000 fa07 	bl	80065ac <__smakebuf_r>
 800619e:	89a0      	ldrh	r0, [r4, #12]
 80061a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061a4:	f010 0301 	ands.w	r3, r0, #1
 80061a8:	d00a      	beq.n	80061c0 <__swsetup_r+0xbc>
 80061aa:	2300      	movs	r3, #0
 80061ac:	60a3      	str	r3, [r4, #8]
 80061ae:	6963      	ldr	r3, [r4, #20]
 80061b0:	425b      	negs	r3, r3
 80061b2:	61a3      	str	r3, [r4, #24]
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	b943      	cbnz	r3, 80061ca <__swsetup_r+0xc6>
 80061b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061bc:	d1ba      	bne.n	8006134 <__swsetup_r+0x30>
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	0781      	lsls	r1, r0, #30
 80061c2:	bf58      	it	pl
 80061c4:	6963      	ldrpl	r3, [r4, #20]
 80061c6:	60a3      	str	r3, [r4, #8]
 80061c8:	e7f4      	b.n	80061b4 <__swsetup_r+0xb0>
 80061ca:	2000      	movs	r0, #0
 80061cc:	e7f7      	b.n	80061be <__swsetup_r+0xba>
 80061ce:	bf00      	nop
 80061d0:	20000010 	.word	0x20000010
 80061d4:	08006c14 	.word	0x08006c14
 80061d8:	08006c34 	.word	0x08006c34
 80061dc:	08006bf4 	.word	0x08006bf4

080061e0 <abort>:
 80061e0:	b508      	push	{r3, lr}
 80061e2:	2006      	movs	r0, #6
 80061e4:	f000 fa52 	bl	800668c <raise>
 80061e8:	2001      	movs	r0, #1
 80061ea:	f7fb feab 	bl	8001f44 <_exit>
	...

080061f0 <__sflush_r>:
 80061f0:	898a      	ldrh	r2, [r1, #12]
 80061f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f6:	4605      	mov	r5, r0
 80061f8:	0710      	lsls	r0, r2, #28
 80061fa:	460c      	mov	r4, r1
 80061fc:	d458      	bmi.n	80062b0 <__sflush_r+0xc0>
 80061fe:	684b      	ldr	r3, [r1, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	dc05      	bgt.n	8006210 <__sflush_r+0x20>
 8006204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	dc02      	bgt.n	8006210 <__sflush_r+0x20>
 800620a:	2000      	movs	r0, #0
 800620c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006212:	2e00      	cmp	r6, #0
 8006214:	d0f9      	beq.n	800620a <__sflush_r+0x1a>
 8006216:	2300      	movs	r3, #0
 8006218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800621c:	682f      	ldr	r7, [r5, #0]
 800621e:	602b      	str	r3, [r5, #0]
 8006220:	d032      	beq.n	8006288 <__sflush_r+0x98>
 8006222:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	075a      	lsls	r2, r3, #29
 8006228:	d505      	bpl.n	8006236 <__sflush_r+0x46>
 800622a:	6863      	ldr	r3, [r4, #4]
 800622c:	1ac0      	subs	r0, r0, r3
 800622e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006230:	b10b      	cbz	r3, 8006236 <__sflush_r+0x46>
 8006232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006234:	1ac0      	subs	r0, r0, r3
 8006236:	2300      	movs	r3, #0
 8006238:	4602      	mov	r2, r0
 800623a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800623c:	6a21      	ldr	r1, [r4, #32]
 800623e:	4628      	mov	r0, r5
 8006240:	47b0      	blx	r6
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	d106      	bne.n	8006256 <__sflush_r+0x66>
 8006248:	6829      	ldr	r1, [r5, #0]
 800624a:	291d      	cmp	r1, #29
 800624c:	d82c      	bhi.n	80062a8 <__sflush_r+0xb8>
 800624e:	4a2a      	ldr	r2, [pc, #168]	; (80062f8 <__sflush_r+0x108>)
 8006250:	40ca      	lsrs	r2, r1
 8006252:	07d6      	lsls	r6, r2, #31
 8006254:	d528      	bpl.n	80062a8 <__sflush_r+0xb8>
 8006256:	2200      	movs	r2, #0
 8006258:	6062      	str	r2, [r4, #4]
 800625a:	04d9      	lsls	r1, r3, #19
 800625c:	6922      	ldr	r2, [r4, #16]
 800625e:	6022      	str	r2, [r4, #0]
 8006260:	d504      	bpl.n	800626c <__sflush_r+0x7c>
 8006262:	1c42      	adds	r2, r0, #1
 8006264:	d101      	bne.n	800626a <__sflush_r+0x7a>
 8006266:	682b      	ldr	r3, [r5, #0]
 8006268:	b903      	cbnz	r3, 800626c <__sflush_r+0x7c>
 800626a:	6560      	str	r0, [r4, #84]	; 0x54
 800626c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800626e:	602f      	str	r7, [r5, #0]
 8006270:	2900      	cmp	r1, #0
 8006272:	d0ca      	beq.n	800620a <__sflush_r+0x1a>
 8006274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006278:	4299      	cmp	r1, r3
 800627a:	d002      	beq.n	8006282 <__sflush_r+0x92>
 800627c:	4628      	mov	r0, r5
 800627e:	f7ff fae3 	bl	8005848 <_free_r>
 8006282:	2000      	movs	r0, #0
 8006284:	6360      	str	r0, [r4, #52]	; 0x34
 8006286:	e7c1      	b.n	800620c <__sflush_r+0x1c>
 8006288:	6a21      	ldr	r1, [r4, #32]
 800628a:	2301      	movs	r3, #1
 800628c:	4628      	mov	r0, r5
 800628e:	47b0      	blx	r6
 8006290:	1c41      	adds	r1, r0, #1
 8006292:	d1c7      	bne.n	8006224 <__sflush_r+0x34>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0c4      	beq.n	8006224 <__sflush_r+0x34>
 800629a:	2b1d      	cmp	r3, #29
 800629c:	d001      	beq.n	80062a2 <__sflush_r+0xb2>
 800629e:	2b16      	cmp	r3, #22
 80062a0:	d101      	bne.n	80062a6 <__sflush_r+0xb6>
 80062a2:	602f      	str	r7, [r5, #0]
 80062a4:	e7b1      	b.n	800620a <__sflush_r+0x1a>
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ac:	81a3      	strh	r3, [r4, #12]
 80062ae:	e7ad      	b.n	800620c <__sflush_r+0x1c>
 80062b0:	690f      	ldr	r7, [r1, #16]
 80062b2:	2f00      	cmp	r7, #0
 80062b4:	d0a9      	beq.n	800620a <__sflush_r+0x1a>
 80062b6:	0793      	lsls	r3, r2, #30
 80062b8:	680e      	ldr	r6, [r1, #0]
 80062ba:	bf08      	it	eq
 80062bc:	694b      	ldreq	r3, [r1, #20]
 80062be:	600f      	str	r7, [r1, #0]
 80062c0:	bf18      	it	ne
 80062c2:	2300      	movne	r3, #0
 80062c4:	eba6 0807 	sub.w	r8, r6, r7
 80062c8:	608b      	str	r3, [r1, #8]
 80062ca:	f1b8 0f00 	cmp.w	r8, #0
 80062ce:	dd9c      	ble.n	800620a <__sflush_r+0x1a>
 80062d0:	6a21      	ldr	r1, [r4, #32]
 80062d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062d4:	4643      	mov	r3, r8
 80062d6:	463a      	mov	r2, r7
 80062d8:	4628      	mov	r0, r5
 80062da:	47b0      	blx	r6
 80062dc:	2800      	cmp	r0, #0
 80062de:	dc06      	bgt.n	80062ee <__sflush_r+0xfe>
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e6:	81a3      	strh	r3, [r4, #12]
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	e78e      	b.n	800620c <__sflush_r+0x1c>
 80062ee:	4407      	add	r7, r0
 80062f0:	eba8 0800 	sub.w	r8, r8, r0
 80062f4:	e7e9      	b.n	80062ca <__sflush_r+0xda>
 80062f6:	bf00      	nop
 80062f8:	20400001 	.word	0x20400001

080062fc <_fflush_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	690b      	ldr	r3, [r1, #16]
 8006300:	4605      	mov	r5, r0
 8006302:	460c      	mov	r4, r1
 8006304:	b913      	cbnz	r3, 800630c <_fflush_r+0x10>
 8006306:	2500      	movs	r5, #0
 8006308:	4628      	mov	r0, r5
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	b118      	cbz	r0, 8006316 <_fflush_r+0x1a>
 800630e:	6983      	ldr	r3, [r0, #24]
 8006310:	b90b      	cbnz	r3, 8006316 <_fflush_r+0x1a>
 8006312:	f000 f887 	bl	8006424 <__sinit>
 8006316:	4b14      	ldr	r3, [pc, #80]	; (8006368 <_fflush_r+0x6c>)
 8006318:	429c      	cmp	r4, r3
 800631a:	d11b      	bne.n	8006354 <_fflush_r+0x58>
 800631c:	686c      	ldr	r4, [r5, #4]
 800631e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0ef      	beq.n	8006306 <_fflush_r+0xa>
 8006326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006328:	07d0      	lsls	r0, r2, #31
 800632a:	d404      	bmi.n	8006336 <_fflush_r+0x3a>
 800632c:	0599      	lsls	r1, r3, #22
 800632e:	d402      	bmi.n	8006336 <_fflush_r+0x3a>
 8006330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006332:	f000 f915 	bl	8006560 <__retarget_lock_acquire_recursive>
 8006336:	4628      	mov	r0, r5
 8006338:	4621      	mov	r1, r4
 800633a:	f7ff ff59 	bl	80061f0 <__sflush_r>
 800633e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006340:	07da      	lsls	r2, r3, #31
 8006342:	4605      	mov	r5, r0
 8006344:	d4e0      	bmi.n	8006308 <_fflush_r+0xc>
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	059b      	lsls	r3, r3, #22
 800634a:	d4dd      	bmi.n	8006308 <_fflush_r+0xc>
 800634c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800634e:	f000 f908 	bl	8006562 <__retarget_lock_release_recursive>
 8006352:	e7d9      	b.n	8006308 <_fflush_r+0xc>
 8006354:	4b05      	ldr	r3, [pc, #20]	; (800636c <_fflush_r+0x70>)
 8006356:	429c      	cmp	r4, r3
 8006358:	d101      	bne.n	800635e <_fflush_r+0x62>
 800635a:	68ac      	ldr	r4, [r5, #8]
 800635c:	e7df      	b.n	800631e <_fflush_r+0x22>
 800635e:	4b04      	ldr	r3, [pc, #16]	; (8006370 <_fflush_r+0x74>)
 8006360:	429c      	cmp	r4, r3
 8006362:	bf08      	it	eq
 8006364:	68ec      	ldreq	r4, [r5, #12]
 8006366:	e7da      	b.n	800631e <_fflush_r+0x22>
 8006368:	08006c14 	.word	0x08006c14
 800636c:	08006c34 	.word	0x08006c34
 8006370:	08006bf4 	.word	0x08006bf4

08006374 <std>:
 8006374:	2300      	movs	r3, #0
 8006376:	b510      	push	{r4, lr}
 8006378:	4604      	mov	r4, r0
 800637a:	e9c0 3300 	strd	r3, r3, [r0]
 800637e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006382:	6083      	str	r3, [r0, #8]
 8006384:	8181      	strh	r1, [r0, #12]
 8006386:	6643      	str	r3, [r0, #100]	; 0x64
 8006388:	81c2      	strh	r2, [r0, #14]
 800638a:	6183      	str	r3, [r0, #24]
 800638c:	4619      	mov	r1, r3
 800638e:	2208      	movs	r2, #8
 8006390:	305c      	adds	r0, #92	; 0x5c
 8006392:	f7fd fba5 	bl	8003ae0 <memset>
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <std+0x38>)
 8006398:	6263      	str	r3, [r4, #36]	; 0x24
 800639a:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <std+0x3c>)
 800639c:	62a3      	str	r3, [r4, #40]	; 0x28
 800639e:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <std+0x40>)
 80063a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063a2:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <std+0x44>)
 80063a4:	6224      	str	r4, [r4, #32]
 80063a6:	6323      	str	r3, [r4, #48]	; 0x30
 80063a8:	bd10      	pop	{r4, pc}
 80063aa:	bf00      	nop
 80063ac:	080066c5 	.word	0x080066c5
 80063b0:	080066e7 	.word	0x080066e7
 80063b4:	0800671f 	.word	0x0800671f
 80063b8:	08006743 	.word	0x08006743

080063bc <_cleanup_r>:
 80063bc:	4901      	ldr	r1, [pc, #4]	; (80063c4 <_cleanup_r+0x8>)
 80063be:	f000 b8af 	b.w	8006520 <_fwalk_reent>
 80063c2:	bf00      	nop
 80063c4:	080062fd 	.word	0x080062fd

080063c8 <__sfmoreglue>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	1e4a      	subs	r2, r1, #1
 80063cc:	2568      	movs	r5, #104	; 0x68
 80063ce:	4355      	muls	r5, r2
 80063d0:	460e      	mov	r6, r1
 80063d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063d6:	f7ff fa87 	bl	80058e8 <_malloc_r>
 80063da:	4604      	mov	r4, r0
 80063dc:	b140      	cbz	r0, 80063f0 <__sfmoreglue+0x28>
 80063de:	2100      	movs	r1, #0
 80063e0:	e9c0 1600 	strd	r1, r6, [r0]
 80063e4:	300c      	adds	r0, #12
 80063e6:	60a0      	str	r0, [r4, #8]
 80063e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063ec:	f7fd fb78 	bl	8003ae0 <memset>
 80063f0:	4620      	mov	r0, r4
 80063f2:	bd70      	pop	{r4, r5, r6, pc}

080063f4 <__sfp_lock_acquire>:
 80063f4:	4801      	ldr	r0, [pc, #4]	; (80063fc <__sfp_lock_acquire+0x8>)
 80063f6:	f000 b8b3 	b.w	8006560 <__retarget_lock_acquire_recursive>
 80063fa:	bf00      	nop
 80063fc:	200002bc 	.word	0x200002bc

08006400 <__sfp_lock_release>:
 8006400:	4801      	ldr	r0, [pc, #4]	; (8006408 <__sfp_lock_release+0x8>)
 8006402:	f000 b8ae 	b.w	8006562 <__retarget_lock_release_recursive>
 8006406:	bf00      	nop
 8006408:	200002bc 	.word	0x200002bc

0800640c <__sinit_lock_acquire>:
 800640c:	4801      	ldr	r0, [pc, #4]	; (8006414 <__sinit_lock_acquire+0x8>)
 800640e:	f000 b8a7 	b.w	8006560 <__retarget_lock_acquire_recursive>
 8006412:	bf00      	nop
 8006414:	200002b7 	.word	0x200002b7

08006418 <__sinit_lock_release>:
 8006418:	4801      	ldr	r0, [pc, #4]	; (8006420 <__sinit_lock_release+0x8>)
 800641a:	f000 b8a2 	b.w	8006562 <__retarget_lock_release_recursive>
 800641e:	bf00      	nop
 8006420:	200002b7 	.word	0x200002b7

08006424 <__sinit>:
 8006424:	b510      	push	{r4, lr}
 8006426:	4604      	mov	r4, r0
 8006428:	f7ff fff0 	bl	800640c <__sinit_lock_acquire>
 800642c:	69a3      	ldr	r3, [r4, #24]
 800642e:	b11b      	cbz	r3, 8006438 <__sinit+0x14>
 8006430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006434:	f7ff bff0 	b.w	8006418 <__sinit_lock_release>
 8006438:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800643c:	6523      	str	r3, [r4, #80]	; 0x50
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <__sinit+0x68>)
 8006440:	4a13      	ldr	r2, [pc, #76]	; (8006490 <__sinit+0x6c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	62a2      	str	r2, [r4, #40]	; 0x28
 8006446:	42a3      	cmp	r3, r4
 8006448:	bf04      	itt	eq
 800644a:	2301      	moveq	r3, #1
 800644c:	61a3      	streq	r3, [r4, #24]
 800644e:	4620      	mov	r0, r4
 8006450:	f000 f820 	bl	8006494 <__sfp>
 8006454:	6060      	str	r0, [r4, #4]
 8006456:	4620      	mov	r0, r4
 8006458:	f000 f81c 	bl	8006494 <__sfp>
 800645c:	60a0      	str	r0, [r4, #8]
 800645e:	4620      	mov	r0, r4
 8006460:	f000 f818 	bl	8006494 <__sfp>
 8006464:	2200      	movs	r2, #0
 8006466:	60e0      	str	r0, [r4, #12]
 8006468:	2104      	movs	r1, #4
 800646a:	6860      	ldr	r0, [r4, #4]
 800646c:	f7ff ff82 	bl	8006374 <std>
 8006470:	68a0      	ldr	r0, [r4, #8]
 8006472:	2201      	movs	r2, #1
 8006474:	2109      	movs	r1, #9
 8006476:	f7ff ff7d 	bl	8006374 <std>
 800647a:	68e0      	ldr	r0, [r4, #12]
 800647c:	2202      	movs	r2, #2
 800647e:	2112      	movs	r1, #18
 8006480:	f7ff ff78 	bl	8006374 <std>
 8006484:	2301      	movs	r3, #1
 8006486:	61a3      	str	r3, [r4, #24]
 8006488:	e7d2      	b.n	8006430 <__sinit+0xc>
 800648a:	bf00      	nop
 800648c:	08006874 	.word	0x08006874
 8006490:	080063bd 	.word	0x080063bd

08006494 <__sfp>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	4607      	mov	r7, r0
 8006498:	f7ff ffac 	bl	80063f4 <__sfp_lock_acquire>
 800649c:	4b1e      	ldr	r3, [pc, #120]	; (8006518 <__sfp+0x84>)
 800649e:	681e      	ldr	r6, [r3, #0]
 80064a0:	69b3      	ldr	r3, [r6, #24]
 80064a2:	b913      	cbnz	r3, 80064aa <__sfp+0x16>
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff ffbd 	bl	8006424 <__sinit>
 80064aa:	3648      	adds	r6, #72	; 0x48
 80064ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	d503      	bpl.n	80064bc <__sfp+0x28>
 80064b4:	6833      	ldr	r3, [r6, #0]
 80064b6:	b30b      	cbz	r3, 80064fc <__sfp+0x68>
 80064b8:	6836      	ldr	r6, [r6, #0]
 80064ba:	e7f7      	b.n	80064ac <__sfp+0x18>
 80064bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064c0:	b9d5      	cbnz	r5, 80064f8 <__sfp+0x64>
 80064c2:	4b16      	ldr	r3, [pc, #88]	; (800651c <__sfp+0x88>)
 80064c4:	60e3      	str	r3, [r4, #12]
 80064c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064ca:	6665      	str	r5, [r4, #100]	; 0x64
 80064cc:	f000 f847 	bl	800655e <__retarget_lock_init_recursive>
 80064d0:	f7ff ff96 	bl	8006400 <__sfp_lock_release>
 80064d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064dc:	6025      	str	r5, [r4, #0]
 80064de:	61a5      	str	r5, [r4, #24]
 80064e0:	2208      	movs	r2, #8
 80064e2:	4629      	mov	r1, r5
 80064e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064e8:	f7fd fafa 	bl	8003ae0 <memset>
 80064ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064f4:	4620      	mov	r0, r4
 80064f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f8:	3468      	adds	r4, #104	; 0x68
 80064fa:	e7d9      	b.n	80064b0 <__sfp+0x1c>
 80064fc:	2104      	movs	r1, #4
 80064fe:	4638      	mov	r0, r7
 8006500:	f7ff ff62 	bl	80063c8 <__sfmoreglue>
 8006504:	4604      	mov	r4, r0
 8006506:	6030      	str	r0, [r6, #0]
 8006508:	2800      	cmp	r0, #0
 800650a:	d1d5      	bne.n	80064b8 <__sfp+0x24>
 800650c:	f7ff ff78 	bl	8006400 <__sfp_lock_release>
 8006510:	230c      	movs	r3, #12
 8006512:	603b      	str	r3, [r7, #0]
 8006514:	e7ee      	b.n	80064f4 <__sfp+0x60>
 8006516:	bf00      	nop
 8006518:	08006874 	.word	0x08006874
 800651c:	ffff0001 	.word	0xffff0001

08006520 <_fwalk_reent>:
 8006520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006524:	4606      	mov	r6, r0
 8006526:	4688      	mov	r8, r1
 8006528:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800652c:	2700      	movs	r7, #0
 800652e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006532:	f1b9 0901 	subs.w	r9, r9, #1
 8006536:	d505      	bpl.n	8006544 <_fwalk_reent+0x24>
 8006538:	6824      	ldr	r4, [r4, #0]
 800653a:	2c00      	cmp	r4, #0
 800653c:	d1f7      	bne.n	800652e <_fwalk_reent+0xe>
 800653e:	4638      	mov	r0, r7
 8006540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006544:	89ab      	ldrh	r3, [r5, #12]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d907      	bls.n	800655a <_fwalk_reent+0x3a>
 800654a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800654e:	3301      	adds	r3, #1
 8006550:	d003      	beq.n	800655a <_fwalk_reent+0x3a>
 8006552:	4629      	mov	r1, r5
 8006554:	4630      	mov	r0, r6
 8006556:	47c0      	blx	r8
 8006558:	4307      	orrs	r7, r0
 800655a:	3568      	adds	r5, #104	; 0x68
 800655c:	e7e9      	b.n	8006532 <_fwalk_reent+0x12>

0800655e <__retarget_lock_init_recursive>:
 800655e:	4770      	bx	lr

08006560 <__retarget_lock_acquire_recursive>:
 8006560:	4770      	bx	lr

08006562 <__retarget_lock_release_recursive>:
 8006562:	4770      	bx	lr

08006564 <__swhatbuf_r>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	460e      	mov	r6, r1
 8006568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656c:	2900      	cmp	r1, #0
 800656e:	b096      	sub	sp, #88	; 0x58
 8006570:	4614      	mov	r4, r2
 8006572:	461d      	mov	r5, r3
 8006574:	da07      	bge.n	8006586 <__swhatbuf_r+0x22>
 8006576:	2300      	movs	r3, #0
 8006578:	602b      	str	r3, [r5, #0]
 800657a:	89b3      	ldrh	r3, [r6, #12]
 800657c:	061a      	lsls	r2, r3, #24
 800657e:	d410      	bmi.n	80065a2 <__swhatbuf_r+0x3e>
 8006580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006584:	e00e      	b.n	80065a4 <__swhatbuf_r+0x40>
 8006586:	466a      	mov	r2, sp
 8006588:	f000 f902 	bl	8006790 <_fstat_r>
 800658c:	2800      	cmp	r0, #0
 800658e:	dbf2      	blt.n	8006576 <__swhatbuf_r+0x12>
 8006590:	9a01      	ldr	r2, [sp, #4]
 8006592:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006596:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800659a:	425a      	negs	r2, r3
 800659c:	415a      	adcs	r2, r3
 800659e:	602a      	str	r2, [r5, #0]
 80065a0:	e7ee      	b.n	8006580 <__swhatbuf_r+0x1c>
 80065a2:	2340      	movs	r3, #64	; 0x40
 80065a4:	2000      	movs	r0, #0
 80065a6:	6023      	str	r3, [r4, #0]
 80065a8:	b016      	add	sp, #88	; 0x58
 80065aa:	bd70      	pop	{r4, r5, r6, pc}

080065ac <__smakebuf_r>:
 80065ac:	898b      	ldrh	r3, [r1, #12]
 80065ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065b0:	079d      	lsls	r5, r3, #30
 80065b2:	4606      	mov	r6, r0
 80065b4:	460c      	mov	r4, r1
 80065b6:	d507      	bpl.n	80065c8 <__smakebuf_r+0x1c>
 80065b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	6123      	str	r3, [r4, #16]
 80065c0:	2301      	movs	r3, #1
 80065c2:	6163      	str	r3, [r4, #20]
 80065c4:	b002      	add	sp, #8
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	ab01      	add	r3, sp, #4
 80065ca:	466a      	mov	r2, sp
 80065cc:	f7ff ffca 	bl	8006564 <__swhatbuf_r>
 80065d0:	9900      	ldr	r1, [sp, #0]
 80065d2:	4605      	mov	r5, r0
 80065d4:	4630      	mov	r0, r6
 80065d6:	f7ff f987 	bl	80058e8 <_malloc_r>
 80065da:	b948      	cbnz	r0, 80065f0 <__smakebuf_r+0x44>
 80065dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e0:	059a      	lsls	r2, r3, #22
 80065e2:	d4ef      	bmi.n	80065c4 <__smakebuf_r+0x18>
 80065e4:	f023 0303 	bic.w	r3, r3, #3
 80065e8:	f043 0302 	orr.w	r3, r3, #2
 80065ec:	81a3      	strh	r3, [r4, #12]
 80065ee:	e7e3      	b.n	80065b8 <__smakebuf_r+0xc>
 80065f0:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <__smakebuf_r+0x7c>)
 80065f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	6020      	str	r0, [r4, #0]
 80065f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fc:	81a3      	strh	r3, [r4, #12]
 80065fe:	9b00      	ldr	r3, [sp, #0]
 8006600:	6163      	str	r3, [r4, #20]
 8006602:	9b01      	ldr	r3, [sp, #4]
 8006604:	6120      	str	r0, [r4, #16]
 8006606:	b15b      	cbz	r3, 8006620 <__smakebuf_r+0x74>
 8006608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800660c:	4630      	mov	r0, r6
 800660e:	f000 f8d1 	bl	80067b4 <_isatty_r>
 8006612:	b128      	cbz	r0, 8006620 <__smakebuf_r+0x74>
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f023 0303 	bic.w	r3, r3, #3
 800661a:	f043 0301 	orr.w	r3, r3, #1
 800661e:	81a3      	strh	r3, [r4, #12]
 8006620:	89a0      	ldrh	r0, [r4, #12]
 8006622:	4305      	orrs	r5, r0
 8006624:	81a5      	strh	r5, [r4, #12]
 8006626:	e7cd      	b.n	80065c4 <__smakebuf_r+0x18>
 8006628:	080063bd 	.word	0x080063bd

0800662c <_malloc_usable_size_r>:
 800662c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006630:	1f18      	subs	r0, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	bfbc      	itt	lt
 8006636:	580b      	ldrlt	r3, [r1, r0]
 8006638:	18c0      	addlt	r0, r0, r3
 800663a:	4770      	bx	lr

0800663c <_raise_r>:
 800663c:	291f      	cmp	r1, #31
 800663e:	b538      	push	{r3, r4, r5, lr}
 8006640:	4604      	mov	r4, r0
 8006642:	460d      	mov	r5, r1
 8006644:	d904      	bls.n	8006650 <_raise_r+0x14>
 8006646:	2316      	movs	r3, #22
 8006648:	6003      	str	r3, [r0, #0]
 800664a:	f04f 30ff 	mov.w	r0, #4294967295
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006652:	b112      	cbz	r2, 800665a <_raise_r+0x1e>
 8006654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006658:	b94b      	cbnz	r3, 800666e <_raise_r+0x32>
 800665a:	4620      	mov	r0, r4
 800665c:	f000 f830 	bl	80066c0 <_getpid_r>
 8006660:	462a      	mov	r2, r5
 8006662:	4601      	mov	r1, r0
 8006664:	4620      	mov	r0, r4
 8006666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800666a:	f000 b817 	b.w	800669c <_kill_r>
 800666e:	2b01      	cmp	r3, #1
 8006670:	d00a      	beq.n	8006688 <_raise_r+0x4c>
 8006672:	1c59      	adds	r1, r3, #1
 8006674:	d103      	bne.n	800667e <_raise_r+0x42>
 8006676:	2316      	movs	r3, #22
 8006678:	6003      	str	r3, [r0, #0]
 800667a:	2001      	movs	r0, #1
 800667c:	e7e7      	b.n	800664e <_raise_r+0x12>
 800667e:	2400      	movs	r4, #0
 8006680:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006684:	4628      	mov	r0, r5
 8006686:	4798      	blx	r3
 8006688:	2000      	movs	r0, #0
 800668a:	e7e0      	b.n	800664e <_raise_r+0x12>

0800668c <raise>:
 800668c:	4b02      	ldr	r3, [pc, #8]	; (8006698 <raise+0xc>)
 800668e:	4601      	mov	r1, r0
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	f7ff bfd3 	b.w	800663c <_raise_r>
 8006696:	bf00      	nop
 8006698:	20000010 	.word	0x20000010

0800669c <_kill_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4d07      	ldr	r5, [pc, #28]	; (80066bc <_kill_r+0x20>)
 80066a0:	2300      	movs	r3, #0
 80066a2:	4604      	mov	r4, r0
 80066a4:	4608      	mov	r0, r1
 80066a6:	4611      	mov	r1, r2
 80066a8:	602b      	str	r3, [r5, #0]
 80066aa:	f7fb fc3b 	bl	8001f24 <_kill>
 80066ae:	1c43      	adds	r3, r0, #1
 80066b0:	d102      	bne.n	80066b8 <_kill_r+0x1c>
 80066b2:	682b      	ldr	r3, [r5, #0]
 80066b4:	b103      	cbz	r3, 80066b8 <_kill_r+0x1c>
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	bd38      	pop	{r3, r4, r5, pc}
 80066ba:	bf00      	nop
 80066bc:	200002b0 	.word	0x200002b0

080066c0 <_getpid_r>:
 80066c0:	f7fb bc28 	b.w	8001f14 <_getpid>

080066c4 <__sread>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	460c      	mov	r4, r1
 80066c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066cc:	f000 f894 	bl	80067f8 <_read_r>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	bfab      	itete	ge
 80066d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066d6:	89a3      	ldrhlt	r3, [r4, #12]
 80066d8:	181b      	addge	r3, r3, r0
 80066da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066de:	bfac      	ite	ge
 80066e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80066e2:	81a3      	strhlt	r3, [r4, #12]
 80066e4:	bd10      	pop	{r4, pc}

080066e6 <__swrite>:
 80066e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ea:	461f      	mov	r7, r3
 80066ec:	898b      	ldrh	r3, [r1, #12]
 80066ee:	05db      	lsls	r3, r3, #23
 80066f0:	4605      	mov	r5, r0
 80066f2:	460c      	mov	r4, r1
 80066f4:	4616      	mov	r6, r2
 80066f6:	d505      	bpl.n	8006704 <__swrite+0x1e>
 80066f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066fc:	2302      	movs	r3, #2
 80066fe:	2200      	movs	r2, #0
 8006700:	f000 f868 	bl	80067d4 <_lseek_r>
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800670a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800670e:	81a3      	strh	r3, [r4, #12]
 8006710:	4632      	mov	r2, r6
 8006712:	463b      	mov	r3, r7
 8006714:	4628      	mov	r0, r5
 8006716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800671a:	f000 b817 	b.w	800674c <_write_r>

0800671e <__sseek>:
 800671e:	b510      	push	{r4, lr}
 8006720:	460c      	mov	r4, r1
 8006722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006726:	f000 f855 	bl	80067d4 <_lseek_r>
 800672a:	1c43      	adds	r3, r0, #1
 800672c:	89a3      	ldrh	r3, [r4, #12]
 800672e:	bf15      	itete	ne
 8006730:	6560      	strne	r0, [r4, #84]	; 0x54
 8006732:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006736:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800673a:	81a3      	strheq	r3, [r4, #12]
 800673c:	bf18      	it	ne
 800673e:	81a3      	strhne	r3, [r4, #12]
 8006740:	bd10      	pop	{r4, pc}

08006742 <__sclose>:
 8006742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006746:	f000 b813 	b.w	8006770 <_close_r>
	...

0800674c <_write_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4d07      	ldr	r5, [pc, #28]	; (800676c <_write_r+0x20>)
 8006750:	4604      	mov	r4, r0
 8006752:	4608      	mov	r0, r1
 8006754:	4611      	mov	r1, r2
 8006756:	2200      	movs	r2, #0
 8006758:	602a      	str	r2, [r5, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	f7fb fc19 	bl	8001f92 <_write>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_write_r+0x1e>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_write_r+0x1e>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	200002b0 	.word	0x200002b0

08006770 <_close_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4d06      	ldr	r5, [pc, #24]	; (800678c <_close_r+0x1c>)
 8006774:	2300      	movs	r3, #0
 8006776:	4604      	mov	r4, r0
 8006778:	4608      	mov	r0, r1
 800677a:	602b      	str	r3, [r5, #0]
 800677c:	f7fb fc25 	bl	8001fca <_close>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d102      	bne.n	800678a <_close_r+0x1a>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	b103      	cbz	r3, 800678a <_close_r+0x1a>
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	200002b0 	.word	0x200002b0

08006790 <_fstat_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	4d07      	ldr	r5, [pc, #28]	; (80067b0 <_fstat_r+0x20>)
 8006794:	2300      	movs	r3, #0
 8006796:	4604      	mov	r4, r0
 8006798:	4608      	mov	r0, r1
 800679a:	4611      	mov	r1, r2
 800679c:	602b      	str	r3, [r5, #0]
 800679e:	f7fb fc20 	bl	8001fe2 <_fstat>
 80067a2:	1c43      	adds	r3, r0, #1
 80067a4:	d102      	bne.n	80067ac <_fstat_r+0x1c>
 80067a6:	682b      	ldr	r3, [r5, #0]
 80067a8:	b103      	cbz	r3, 80067ac <_fstat_r+0x1c>
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	bd38      	pop	{r3, r4, r5, pc}
 80067ae:	bf00      	nop
 80067b0:	200002b0 	.word	0x200002b0

080067b4 <_isatty_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4d06      	ldr	r5, [pc, #24]	; (80067d0 <_isatty_r+0x1c>)
 80067b8:	2300      	movs	r3, #0
 80067ba:	4604      	mov	r4, r0
 80067bc:	4608      	mov	r0, r1
 80067be:	602b      	str	r3, [r5, #0]
 80067c0:	f7fb fc1f 	bl	8002002 <_isatty>
 80067c4:	1c43      	adds	r3, r0, #1
 80067c6:	d102      	bne.n	80067ce <_isatty_r+0x1a>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	b103      	cbz	r3, 80067ce <_isatty_r+0x1a>
 80067cc:	6023      	str	r3, [r4, #0]
 80067ce:	bd38      	pop	{r3, r4, r5, pc}
 80067d0:	200002b0 	.word	0x200002b0

080067d4 <_lseek_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4d07      	ldr	r5, [pc, #28]	; (80067f4 <_lseek_r+0x20>)
 80067d8:	4604      	mov	r4, r0
 80067da:	4608      	mov	r0, r1
 80067dc:	4611      	mov	r1, r2
 80067de:	2200      	movs	r2, #0
 80067e0:	602a      	str	r2, [r5, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f7fb fc18 	bl	8002018 <_lseek>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_lseek_r+0x1e>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_lseek_r+0x1e>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	200002b0 	.word	0x200002b0

080067f8 <_read_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d07      	ldr	r5, [pc, #28]	; (8006818 <_read_r+0x20>)
 80067fc:	4604      	mov	r4, r0
 80067fe:	4608      	mov	r0, r1
 8006800:	4611      	mov	r1, r2
 8006802:	2200      	movs	r2, #0
 8006804:	602a      	str	r2, [r5, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	f7fb fba6 	bl	8001f58 <_read>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	d102      	bne.n	8006816 <_read_r+0x1e>
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	b103      	cbz	r3, 8006816 <_read_r+0x1e>
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	200002b0 	.word	0x200002b0

0800681c <_init>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	bf00      	nop
 8006820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006822:	bc08      	pop	{r3}
 8006824:	469e      	mov	lr, r3
 8006826:	4770      	bx	lr

08006828 <_fini>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr
