
Humidity_and_Temperature_measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000279c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002944  08002944  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002944  08002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800294c  0800294c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000009c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b101  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001913  00000000  00000000  0002b141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  0002ca58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009a8  00000000  00000000  0002d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020af3  00000000  00000000  0002de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac4a  00000000  00000000  0004e963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8a6e  00000000  00000000  000595ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012201b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002aa8  00000000  00000000  00122070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800290c 	.word	0x0800290c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800290c 	.word	0x0800290c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08e      	sub	sp, #56	; 0x38
 80004d4:	af0a      	add	r7, sp, #40	; 0x28
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	4608      	mov	r0, r1
 80004da:	4611      	mov	r1, r2
 80004dc:	461a      	mov	r2, r3
 80004de:	4603      	mov	r3, r0
 80004e0:	817b      	strh	r3, [r7, #10]
 80004e2:	460b      	mov	r3, r1
 80004e4:	813b      	strh	r3, [r7, #8]
 80004e6:	4613      	mov	r3, r2
 80004e8:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <LiquidCrystal+0x90>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d019      	beq.n	8000526 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80004f2:	8939      	ldrh	r1, [r7, #8]
 80004f4:	897a      	ldrh	r2, [r7, #10]
 80004f6:	2300      	movs	r3, #0
 80004f8:	9308      	str	r3, [sp, #32]
 80004fa:	2300      	movs	r3, #0
 80004fc:	9307      	str	r3, [sp, #28]
 80004fe:	2300      	movs	r3, #0
 8000500:	9306      	str	r3, [sp, #24]
 8000502:	2300      	movs	r3, #0
 8000504:	9305      	str	r3, [sp, #20]
 8000506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000508:	9304      	str	r3, [sp, #16]
 800050a:	8c3b      	ldrh	r3, [r7, #32]
 800050c:	9303      	str	r3, [sp, #12]
 800050e:	8bbb      	ldrh	r3, [r7, #28]
 8000510:	9302      	str	r3, [sp, #8]
 8000512:	8b3b      	ldrh	r3, [r7, #24]
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	460b      	mov	r3, r1
 800051c:	68f9      	ldr	r1, [r7, #12]
 800051e:	2001      	movs	r0, #1
 8000520:	f000 f820 	bl	8000564 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000524:	e018      	b.n	8000558 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000526:	8939      	ldrh	r1, [r7, #8]
 8000528:	897a      	ldrh	r2, [r7, #10]
 800052a:	2300      	movs	r3, #0
 800052c:	9308      	str	r3, [sp, #32]
 800052e:	2300      	movs	r3, #0
 8000530:	9307      	str	r3, [sp, #28]
 8000532:	2300      	movs	r3, #0
 8000534:	9306      	str	r3, [sp, #24]
 8000536:	2300      	movs	r3, #0
 8000538:	9305      	str	r3, [sp, #20]
 800053a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800053c:	9304      	str	r3, [sp, #16]
 800053e:	8c3b      	ldrh	r3, [r7, #32]
 8000540:	9303      	str	r3, [sp, #12]
 8000542:	8bbb      	ldrh	r3, [r7, #28]
 8000544:	9302      	str	r3, [sp, #8]
 8000546:	8b3b      	ldrh	r3, [r7, #24]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	460b      	mov	r3, r1
 8000550:	68f9      	ldr	r1, [r7, #12]
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f806 	bl	8000564 <init>
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000000 	.word	0x20000000

08000564 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	4611      	mov	r1, r2
 800056e:	461a      	mov	r2, r3
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	460b      	mov	r3, r1
 8000576:	81bb      	strh	r3, [r7, #12]
 8000578:	4613      	mov	r3, r2
 800057a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800057c:	4a1a      	ldr	r2, [pc, #104]	; (80005e8 <init+0x84>)
 800057e:	89bb      	ldrh	r3, [r7, #12]
 8000580:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000582:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <init+0x88>)
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000588:	4a19      	ldr	r2, [pc, #100]	; (80005f0 <init+0x8c>)
 800058a:	8b3b      	ldrh	r3, [r7, #24]
 800058c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800058e:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <init+0x90>)
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000594:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <init+0x94>)
 8000596:	8bbb      	ldrh	r3, [r7, #28]
 8000598:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800059a:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <init+0x94>)
 800059c:	8c3b      	ldrh	r3, [r7, #32]
 800059e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 80005a0:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <init+0x94>)
 80005a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80005a4:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 80005a6:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <init+0x94>)
 80005a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005aa:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <init+0x94>)
 80005ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80005b0:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80005b2:	4a11      	ldr	r2, [pc, #68]	; (80005f8 <init+0x94>)
 80005b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80005b6:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80005b8:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <init+0x94>)
 80005ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80005bc:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <init+0x94>)
 80005c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005c2:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	e002      	b.n	80005d8 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <init+0x98>)
 80005d4:	2210      	movs	r2, #16
 80005d6:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 80005d8:	2102      	movs	r1, #2
 80005da:	2010      	movs	r0, #16
 80005dc:	f000 f810 	bl	8000600 <begin>
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000005c 	.word	0x2000005c
 80005ec:	2000003c 	.word	0x2000003c
 80005f0:	2000005a 	.word	0x2000005a
 80005f4:	20000040 	.word	0x20000040
 80005f8:	20000048 	.word	0x20000048
 80005fc:	20000059 	.word	0x20000059

08000600 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	460a      	mov	r2, r1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	4613      	mov	r3, r2
 800060e:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d906      	bls.n	8000624 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <begin+0x1f4>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <begin+0x1f4>)
 8000622:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000624:	4a74      	ldr	r2, [pc, #464]	; (80007f8 <begin+0x1f8>)
 8000626:	79bb      	ldrb	r3, [r7, #6]
 8000628:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 800062a:	79fa      	ldrb	r2, [r7, #7]
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	3340      	adds	r3, #64	; 0x40
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f998 	bl	8000968 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000638:	4b70      	ldr	r3, [pc, #448]	; (80007fc <begin+0x1fc>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d009      	beq.n	8000654 <begin+0x54>
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d106      	bne.n	8000654 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <begin+0x1f4>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <begin+0x1f4>)
 8000652:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000654:	f000 f8e4 	bl	8000820 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000658:	2302      	movs	r3, #2
 800065a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000660:	4b67      	ldr	r3, [pc, #412]	; (8000800 <begin+0x200>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d01b      	beq.n	80006a0 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000668:	4b66      	ldr	r3, [pc, #408]	; (8000804 <begin+0x204>)
 800066a:	881a      	ldrh	r2, [r3, #0]
 800066c:	4b66      	ldr	r3, [pc, #408]	; (8000808 <begin+0x208>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	4313      	orrs	r3, r2
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b65      	ldr	r3, [pc, #404]	; (800080c <begin+0x20c>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	4313      	orrs	r3, r2
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b64      	ldr	r3, [pc, #400]	; (8000810 <begin+0x210>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	4313      	orrs	r3, r2
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b62      	ldr	r3, [pc, #392]	; (8000810 <begin+0x210>)
 8000686:	885b      	ldrh	r3, [r3, #2]
 8000688:	4313      	orrs	r3, r2
 800068a:	b29a      	uxth	r2, r3
 800068c:	4b60      	ldr	r3, [pc, #384]	; (8000810 <begin+0x210>)
 800068e:	889b      	ldrh	r3, [r3, #4]
 8000690:	4313      	orrs	r3, r2
 8000692:	b29a      	uxth	r2, r3
 8000694:	4b5e      	ldr	r3, [pc, #376]	; (8000810 <begin+0x210>)
 8000696:	88db      	ldrh	r3, [r3, #6]
 8000698:	4313      	orrs	r3, r2
 800069a:	b29b      	uxth	r3, r3
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e02a      	b.n	80006f6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80006a0:	4b58      	ldr	r3, [pc, #352]	; (8000804 <begin+0x204>)
 80006a2:	881a      	ldrh	r2, [r3, #0]
 80006a4:	4b58      	ldr	r3, [pc, #352]	; (8000808 <begin+0x208>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	4b57      	ldr	r3, [pc, #348]	; (800080c <begin+0x20c>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80006b4:	4b56      	ldr	r3, [pc, #344]	; (8000810 <begin+0x210>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80006bc:	4b54      	ldr	r3, [pc, #336]	; (8000810 <begin+0x210>)
 80006be:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80006c4:	4b52      	ldr	r3, [pc, #328]	; (8000810 <begin+0x210>)
 80006c6:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80006cc:	4b50      	ldr	r3, [pc, #320]	; (8000810 <begin+0x210>)
 80006ce:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b4e      	ldr	r3, [pc, #312]	; (8000810 <begin+0x210>)
 80006d6:	891b      	ldrh	r3, [r3, #8]
 80006d8:	4313      	orrs	r3, r2
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b4c      	ldr	r3, [pc, #304]	; (8000810 <begin+0x210>)
 80006de:	895b      	ldrh	r3, [r3, #10]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b4a      	ldr	r3, [pc, #296]	; (8000810 <begin+0x210>)
 80006e6:	899b      	ldrh	r3, [r3, #12]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4b48      	ldr	r3, [pc, #288]	; (8000810 <begin+0x210>)
 80006ee:	89db      	ldrh	r3, [r3, #14]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80006f4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80006f6:	4b47      	ldr	r3, [pc, #284]	; (8000814 <begin+0x214>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f107 020c 	add.w	r2, r7, #12
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fe71 	bl	80013e8 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 8000706:	2032      	movs	r0, #50	; 0x32
 8000708:	f000 fd38 	bl	800117c <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 800070c:	4b41      	ldr	r3, [pc, #260]	; (8000814 <begin+0x214>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a3c      	ldr	r2, [pc, #240]	; (8000804 <begin+0x204>)
 8000712:	8811      	ldrh	r1, [r2, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f802 	bl	8001720 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800071c:	4b3d      	ldr	r3, [pc, #244]	; (8000814 <begin+0x214>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a3a      	ldr	r2, [pc, #232]	; (800080c <begin+0x20c>)
 8000722:	8811      	ldrh	r1, [r2, #0]
 8000724:	2200      	movs	r2, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fffa 	bl	8001720 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 800072c:	4b36      	ldr	r3, [pc, #216]	; (8000808 <begin+0x208>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	2bff      	cmp	r3, #255	; 0xff
 8000732:	d007      	beq.n	8000744 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000734:	4b37      	ldr	r3, [pc, #220]	; (8000814 <begin+0x214>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a33      	ldr	r2, [pc, #204]	; (8000808 <begin+0x208>)
 800073a:	8811      	ldrh	r1, [r2, #0]
 800073c:	2200      	movs	r2, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f000 ffee 	bl	8001720 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000744:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <begin+0x1f4>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	f003 0310 	and.w	r3, r3, #16
 800074c:	2b00      	cmp	r3, #0
 800074e:	d115      	bne.n	800077c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000750:	2003      	movs	r0, #3
 8000752:	f000 fa03 	bl	8000b5c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000756:	2005      	movs	r0, #5
 8000758:	f000 fd10 	bl	800117c <HAL_Delay>

    // second try
    write4bits(0x03);
 800075c:	2003      	movs	r0, #3
 800075e:	f000 f9fd 	bl	8000b5c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000762:	2005      	movs	r0, #5
 8000764:	f000 fd0a 	bl	800117c <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000768:	2003      	movs	r0, #3
 800076a:	f000 f9f7 	bl	8000b5c <write4bits>
    HAL_Delay(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f000 fd04 	bl	800117c <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000774:	2002      	movs	r0, #2
 8000776:	f000 f9f1 	bl	8000b5c <write4bits>
 800077a:	e01d      	b.n	80007b8 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <begin+0x1f4>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	f043 0320 	orr.w	r3, r3, #32
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f963 	bl	8000a52 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800078c:	2005      	movs	r0, #5
 800078e:	f000 fcf5 	bl	800117c <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <begin+0x1f4>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	b2db      	uxtb	r3, r3
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f958 	bl	8000a52 <command>
    HAL_Delay(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 fcea 	bl	800117c <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <begin+0x1f4>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f94d 	bl	8000a52 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <begin+0x1f4>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	f043 0320 	orr.w	r3, r3, #32
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f945 	bl	8000a52 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <begin+0x218>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	701a      	strb	r2, [r3, #0]
  display();
 80007ce:	f000 f8ff 	bl	80009d0 <display>

  // clear it off
  clear();
 80007d2:	f000 f8e9 	bl	80009a8 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <begin+0x21c>)
 80007d8:	2202      	movs	r2, #2
 80007da:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <begin+0x21c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f933 	bl	8000a52 <command>

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000059 	.word	0x20000059
 80007f8:	20000045 	.word	0x20000045
 80007fc:	2000002c 	.word	0x2000002c
 8000800:	20000000 	.word	0x20000000
 8000804:	2000005c 	.word	0x2000005c
 8000808:	2000003c 	.word	0x2000003c
 800080c:	2000005a 	.word	0x2000005a
 8000810:	20000048 	.word	0x20000048
 8000814:	20000040 	.word	0x20000040
 8000818:	20000044 	.word	0x20000044
 800081c:	20000058 	.word	0x20000058

08000820 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8000820:	b480      	push	{r7}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8000826:	4b48      	ldr	r3, [pc, #288]	; (8000948 <enableClock+0x128>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a48      	ldr	r2, [pc, #288]	; (800094c <enableClock+0x12c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d10e      	bne.n	800084e <enableClock+0x2e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	4b46      	ldr	r3, [pc, #280]	; (8000950 <enableClock+0x130>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	4a45      	ldr	r2, [pc, #276]	; (8000950 <enableClock+0x130>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	6313      	str	r3, [r2, #48]	; 0x30
 8000840:	4b43      	ldr	r3, [pc, #268]	; (8000950 <enableClock+0x130>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 800084c:	e076      	b.n	800093c <enableClock+0x11c>
  else if(_port == GPIOB)
 800084e:	4b3e      	ldr	r3, [pc, #248]	; (8000948 <enableClock+0x128>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a40      	ldr	r2, [pc, #256]	; (8000954 <enableClock+0x134>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d10e      	bne.n	8000876 <enableClock+0x56>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	4b3c      	ldr	r3, [pc, #240]	; (8000950 <enableClock+0x130>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a3b      	ldr	r2, [pc, #236]	; (8000950 <enableClock+0x130>)
 8000862:	f043 0302 	orr.w	r3, r3, #2
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
 8000868:	4b39      	ldr	r3, [pc, #228]	; (8000950 <enableClock+0x130>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	f003 0302 	and.w	r3, r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	69bb      	ldr	r3, [r7, #24]
}
 8000874:	e062      	b.n	800093c <enableClock+0x11c>
  else if(_port == GPIOB)
 8000876:	4b34      	ldr	r3, [pc, #208]	; (8000948 <enableClock+0x128>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a36      	ldr	r2, [pc, #216]	; (8000954 <enableClock+0x134>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d10e      	bne.n	800089e <enableClock+0x7e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	4b32      	ldr	r3, [pc, #200]	; (8000950 <enableClock+0x130>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	4a31      	ldr	r2, [pc, #196]	; (8000950 <enableClock+0x130>)
 800088a:	f043 0302 	orr.w	r3, r3, #2
 800088e:	6313      	str	r3, [r2, #48]	; 0x30
 8000890:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <enableClock+0x130>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	f003 0302 	and.w	r3, r3, #2
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697b      	ldr	r3, [r7, #20]
}
 800089c:	e04e      	b.n	800093c <enableClock+0x11c>
	else if(_port == GPIOC)
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <enableClock+0x128>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <enableClock+0x138>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d10e      	bne.n	80008c6 <enableClock+0xa6>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <enableClock+0x130>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	4a27      	ldr	r2, [pc, #156]	; (8000950 <enableClock+0x130>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6313      	str	r3, [r2, #48]	; 0x30
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <enableClock+0x130>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	693b      	ldr	r3, [r7, #16]
}
 80008c4:	e03a      	b.n	800093c <enableClock+0x11c>
	else if(_port == GPIOD)
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <enableClock+0x128>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a24      	ldr	r2, [pc, #144]	; (800095c <enableClock+0x13c>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d10e      	bne.n	80008ee <enableClock+0xce>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <enableClock+0x130>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	4a1d      	ldr	r2, [pc, #116]	; (8000950 <enableClock+0x130>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6313      	str	r3, [r2, #48]	; 0x30
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <enableClock+0x130>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	e026      	b.n	800093c <enableClock+0x11c>
	else if(_port == GPIOE)
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <enableClock+0x128>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <enableClock+0x140>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d10e      	bne.n	8000916 <enableClock+0xf6>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <enableClock+0x130>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	4a13      	ldr	r2, [pc, #76]	; (8000950 <enableClock+0x130>)
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	6313      	str	r3, [r2, #48]	; 0x30
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <enableClock+0x130>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	f003 0310 	and.w	r3, r3, #16
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
}
 8000914:	e012      	b.n	800093c <enableClock+0x11c>
	else if(_port == GPIOF)
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <enableClock+0x128>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <enableClock+0x144>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d10d      	bne.n	800093c <enableClock+0x11c>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <enableClock+0x130>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a09      	ldr	r2, [pc, #36]	; (8000950 <enableClock+0x130>)
 800092a:	f043 0320 	orr.w	r3, r3, #32
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <enableClock+0x130>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	f003 0320 	and.w	r3, r3, #32
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]
}
 800093c:	bf00      	nop
 800093e:	3724      	adds	r7, #36	; 0x24
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	20000040 	.word	0x20000040
 800094c:	40020000 	.word	0x40020000
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400
 8000958:	40020800 	.word	0x40020800
 800095c:	40020c00 	.word	0x40020c00
 8000960:	40021000 	.word	0x40021000
 8000964:	40021400 	.word	0x40021400

08000968 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <setRowOffsets+0x3c>)
 800097c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <setRowOffsets+0x3c>)
 8000984:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <setRowOffsets+0x3c>)
 800098c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <setRowOffsets+0x3c>)
 8000994:	70da      	strb	r2, [r3, #3]
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000038 	.word	0x20000038

080009a8 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80009ac:	2001      	movs	r0, #1
 80009ae:	f000 f850 	bl	8000a52 <command>
  HAL_Delay(2);  // this command takes a long time!
 80009b2:	2002      	movs	r0, #2
 80009b4:	f000 fbe2 	bl	800117c <HAL_Delay>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <home>:

void home(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  command(LCD_RETURNHOME);  // set cursor position to zero
 80009c0:	2002      	movs	r0, #2
 80009c2:	f000 f846 	bl	8000a52 <command>
  HAL_Delay(2);  // this command takes a long time!
 80009c6:	2002      	movs	r0, #2
 80009c8:	f000 fbd8 	bl	800117c <HAL_Delay>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <display+0x28>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <display+0x28>)
 80009e0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <display+0x28>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f830 	bl	8000a52 <command>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000044 	.word	0x20000044

080009fc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <print+0x12>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e01d      	b.n	8000a4a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff fbd8 	bl	80001c8 <strlen>
 8000a18:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8000a1e:	e00c      	b.n	8000a3a <print+0x3e>
    if (write(*buffer++)) n++;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	617a      	str	r2, [r7, #20]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f820 	bl	8000a6e <write>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d008      	beq.n	8000a46 <print+0x4a>
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3301      	adds	r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	613a      	str	r2, [r7, #16]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1ed      	bne.n	8000a20 <print+0x24>
 8000a44:	e000      	b.n	8000a48 <print+0x4c>
    else break;
 8000a46:	bf00      	nop
  }
  return n;
 8000a48:	68fb      	ldr	r3, [r7, #12]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f813 	bl	8000a8c <send>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <write>:

inline size_t write(uint8_t value) {
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 f805 	bl	8000a8c <send>
  return 1; // assume sucess
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	460a      	mov	r2, r1
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <send+0x6c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a16      	ldr	r2, [pc, #88]	; (8000afc <send+0x70>)
 8000aa2:	8811      	ldrh	r1, [r2, #0]
 8000aa4:	79ba      	ldrb	r2, [r7, #6]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fe3a 	bl	8001720 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <send+0x74>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	2bff      	cmp	r3, #255	; 0xff
 8000ab2:	d007      	beq.n	8000ac4 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <send+0x6c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a11      	ldr	r2, [pc, #68]	; (8000b00 <send+0x74>)
 8000aba:	8811      	ldrh	r1, [r2, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 fe2e 	bl	8001720 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <send+0x78>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d004      	beq.n	8000ada <send+0x4e>
    write8bits(value); 
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f86c 	bl	8000bb0 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000ad8:	e009      	b.n	8000aee <send+0x62>
    write4bits(value>>4);
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	091b      	lsrs	r3, r3, #4
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f83b 	bl	8000b5c <write4bits>
    write4bits(value);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 f837 	bl	8000b5c <write4bits>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000040 	.word	0x20000040
 8000afc:	2000005c 	.word	0x2000005c
 8000b00:	2000003c 	.word	0x2000003c
 8000b04:	20000059 	.word	0x20000059

08000b08 <pulseEnable>:

void pulseEnable(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <pulseEnable+0x4c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <pulseEnable+0x50>)
 8000b12:	8811      	ldrh	r1, [r2, #0]
 8000b14:	2200      	movs	r2, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fe02 	bl	8001720 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 fb2d 	bl	800117c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <pulseEnable+0x4c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <pulseEnable+0x50>)
 8000b28:	8811      	ldrh	r1, [r2, #0]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 fdf7 	bl	8001720 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 fb22 	bl	800117c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <pulseEnable+0x4c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <pulseEnable+0x50>)
 8000b3e:	8811      	ldrh	r1, [r2, #0]
 8000b40:	2200      	movs	r2, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fdec 	bl	8001720 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f000 fb17 	bl	800117c <HAL_Delay>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000040 	.word	0x20000040
 8000b58:	2000005a 	.word	0x2000005a

08000b5c <write4bits>:

void write4bits(uint8_t value) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	e013      	b.n	8000b94 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <write4bits+0x4c>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <write4bits+0x50>)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000b78:	79fa      	ldrb	r2, [r7, #7]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	fa42 f303 	asr.w	r3, r2, r3
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	f000 fdc9 	bl	8001720 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3301      	adds	r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	dde8      	ble.n	8000b6c <write4bits+0x10>
  }

  pulseEnable();
 8000b9a:	f7ff ffb5 	bl	8000b08 <pulseEnable>
}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000040 	.word	0x20000040
 8000bac:	20000048 	.word	0x20000048

08000bb0 <write8bits>:

void write8bits(uint8_t value) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e013      	b.n	8000be8 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <write8bits+0x4c>)
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <write8bits+0x50>)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000bcc:	79fa      	ldrb	r2, [r7, #7]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	fa42 f303 	asr.w	r3, r2, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	f000 fd9f 	bl	8001720 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3301      	adds	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b07      	cmp	r3, #7
 8000bec:	dde8      	ble.n	8000bc0 <write8bits+0x10>
  }
  
  pulseEnable();
 8000bee:	f7ff ff8b 	bl	8000b08 <pulseEnable>
}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000040 	.word	0x20000040
 8000c00:	20000048 	.word	0x20000048

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0a:	f000 fa45 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0e:	f000 f841 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c12:	f000 f8e9 	bl	8000de8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c16:	f000 f89b 	bl	8000d50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c1a:	4819      	ldr	r0, [pc, #100]	; (8000c80 <main+0x7c>)
 8000c1c:	f001 fa18 	bl	8002050 <HAL_TIM_Base_Start_IT>
  LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8000c20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c24:	9303      	str	r3, [sp, #12]
 8000c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2a:	9302      	str	r3, [sp, #8]
 8000c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c44:	480f      	ldr	r0, [pc, #60]	; (8000c84 <main+0x80>)
 8000c46:	f7ff fc43 	bl	80004d0 <LiquidCrystal>
  begin(16, 2);
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	2010      	movs	r0, #16
 8000c4e:	f7ff fcd7 	bl	8000600 <begin>
  home();
 8000c52:	f7ff feb3 	bl	80009bc <home>
  clear();
 8000c56:	f7ff fea7 	bl	80009a8 <clear>
  print("Hello World!");
 8000c5a:	480b      	ldr	r0, [pc, #44]	; (8000c88 <main+0x84>)
 8000c5c:	f7ff fece 	bl	80009fc <print>
//  char* str;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(500);
 8000c60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c64:	f000 f92a 	bl	8000ebc <setTimer1>
  while (1)
  {
	  if(timer1_flag == 1) {
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <main+0x88>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d1fb      	bne.n	8000c68 <main+0x64>
		  setTimer1(100);
 8000c70:	2064      	movs	r0, #100	; 0x64
 8000c72:	f000 f923 	bl	8000ebc <setTimer1>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000c76:	2110      	movs	r1, #16
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <main+0x8c>)
 8000c7a:	f000 fd6a 	bl	8001752 <HAL_GPIO_TogglePin>
	  if(timer1_flag == 1) {
 8000c7e:	e7f3      	b.n	8000c68 <main+0x64>
 8000c80:	20000060 	.word	0x20000060
 8000c84:	40020c00 	.word	0x40020c00
 8000c88:	08002924 	.word	0x08002924
 8000c8c:	20000030 	.word	0x20000030
 8000c90:	40020000 	.word	0x40020000

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	; 0x50
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	2230      	movs	r2, #48	; 0x30
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 fe2a 	bl	80028fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <SystemClock_Config+0xb4>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <SystemClock_Config+0xb4>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <SystemClock_Config+0xb4>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <SystemClock_Config+0xb8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <SystemClock_Config+0xb8>)
 8000cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <SystemClock_Config+0xb8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d00:	f107 0320 	add.w	r3, r7, #32
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fd3f 	bl	8001788 <HAL_RCC_OscConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d10:	f000 f8ce 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	230f      	movs	r3, #15
 8000d16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 ffa2 	bl	8001c78 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d3a:	f000 f8b9 	bl	8000eb0 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3750      	adds	r7, #80	; 0x50
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40007000 	.word	0x40007000

08000d50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d76:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d84:	2209      	movs	r2, #9
 8000d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d94:	4813      	ldr	r0, [pc, #76]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d96:	f001 f90b 	bl	8001fb0 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000da0:	f000 f886 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000db2:	f001 fac5 	bl	8002340 <HAL_TIM_ConfigClockSource>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dbc:	f000 f878 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000dce:	f001 fce1 	bl	8002794 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dd8:	f000 f86a 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000060 	.word	0x20000060

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <MX_GPIO_Init+0xa8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <MX_GPIO_Init+0xa8>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <MX_GPIO_Init+0xa8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_GPIO_Init+0xa8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <MX_GPIO_Init+0xa8>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_GPIO_Init+0xa8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4816      	ldr	r0, [pc, #88]	; (8000e94 <MX_GPIO_Init+0xac>)
 8000e3c:	f000 fc70 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <MX_GPIO_Init+0xb0>)
 8000e48:	f000 fc6a 	bl	8001720 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000e4c:	2310      	movs	r3, #16
 8000e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4619      	mov	r1, r3
 8000e62:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_GPIO_Init+0xac>)
 8000e64:	f000 fac0 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e68:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8000e6c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_GPIO_Init+0xb0>)
 8000e82:	f000 fab1 	bl	80013e8 <HAL_GPIO_Init>

}
 8000e86:	bf00      	nop
 8000e88:	3720      	adds	r7, #32
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020c00 	.word	0x40020c00

08000e9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	timerRun();
 8000ea4:	f000 f81e 	bl	8000ee4 <timerRun>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <setTimer1>:
#include "software_timer.h"

int timer1_flag = 0;
int timer1_counter = 0;

void setTimer1(int duration) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <setTimer1+0x20>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <setTimer1+0x24>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	20000034 	.word	0x20000034
 8000ee0:	20000030 	.word	0x20000030

08000ee4 <timerRun>:

void timerRun() {
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <timerRun+0x30>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	dd0b      	ble.n	8000f08 <timerRun+0x24>
		timer1_counter--;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <timerRun+0x30>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <timerRun+0x30>)
 8000ef8:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <timerRun+0x30>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	dc02      	bgt.n	8000f08 <timerRun+0x24>
			timer1_flag = 1;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <timerRun+0x34>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000034 	.word	0x20000034
 8000f18:	20000030 	.word	0x20000030

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f7c:	d115      	bne.n	8000faa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_TIM_Base_MspInit+0x48>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <HAL_TIM_Base_MspInit+0x48>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_TIM_Base_MspInit+0x48>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	201c      	movs	r0, #28
 8000fa0:	f000 f9eb 	bl	800137a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa4:	201c      	movs	r0, #28
 8000fa6:	f000 fa04 	bl	80013b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001004:	f000 f89a 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <TIM2_IRQHandler+0x10>)
 8001012:	f001 f88d 	bl	8002130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000060 	.word	0x20000060

08001020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SystemInit+0x20>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <SystemInit+0x20>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800107c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104a:	490e      	ldr	r1, [pc, #56]	; (8001084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001060:	4c0b      	ldr	r4, [pc, #44]	; (8001090 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800106e:	f7ff ffd7 	bl	8001020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001072:	f001 fc1f 	bl	80028b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001076:	f7ff fdc5 	bl	8000c04 <main>
  bx  lr    
 800107a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800107c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001088:	08002954 	.word	0x08002954
  ldr r2, =_sbss
 800108c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001090:	200000ac 	.word	0x200000ac

08001094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC_IRQHandler>
	...

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <HAL_Init+0x40>)
 80010a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_Init+0x40>)
 80010ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_Init+0x40>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 f94f 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c6:	200f      	movs	r0, #15
 80010c8:	f000 f808 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f7ff ff26 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023c00 	.word	0x40023c00

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f967 	bl	80013ce <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 f92f 	bl	800137a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000004 	.word	0x20000004
 8001134:	2000000c 	.word	0x2000000c
 8001138:	20000008 	.word	0x20000008

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000000c 	.word	0x2000000c
 8001160:	200000a8 	.word	0x200000a8

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200000a8 	.word	0x200000a8

0800117c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff ffee 	bl	8001164 <HAL_GetTick>
 8001188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001194:	d005      	beq.n	80011a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_Delay+0x44>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a2:	bf00      	nop
 80011a4:	f7ff ffde 	bl	8001164 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8f7      	bhi.n	80011a4 <HAL_Delay+0x28>
  {
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000000c 	.word	0x2000000c

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4907      	ldr	r1, [pc, #28]	; (8001260 <__NVIC_EnableIRQ+0x38>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f7ff ff8e 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff29 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff3e 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff8e 	bl	80012b8 <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5d 	bl	8001264 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff31 	bl	8001228 <__NVIC_EnableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffa2 	bl	8001320 <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e16b      	b.n	80016dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	429a      	cmp	r2, r3
 800141e:	f040 815a 	bne.w	80016d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d005      	beq.n	800143a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001436:	2b02      	cmp	r3, #2
 8001438:	d130      	bne.n	800149c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	f003 0201 	and.w	r2, r3, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d017      	beq.n	80014d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d123      	bne.n	800152c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	69b9      	ldr	r1, [r7, #24]
 8001528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0203 	and.w	r2, r3, #3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80b4 	beq.w	80016d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b60      	ldr	r3, [pc, #384]	; (80016f4 <HAL_GPIO_Init+0x30c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a5f      	ldr	r2, [pc, #380]	; (80016f4 <HAL_GPIO_Init+0x30c>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <HAL_GPIO_Init+0x30c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800158a:	4a5b      	ldr	r2, [pc, #364]	; (80016f8 <HAL_GPIO_Init+0x310>)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a52      	ldr	r2, [pc, #328]	; (80016fc <HAL_GPIO_Init+0x314>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d02b      	beq.n	800160e <HAL_GPIO_Init+0x226>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a51      	ldr	r2, [pc, #324]	; (8001700 <HAL_GPIO_Init+0x318>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d025      	beq.n	800160a <HAL_GPIO_Init+0x222>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a50      	ldr	r2, [pc, #320]	; (8001704 <HAL_GPIO_Init+0x31c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01f      	beq.n	8001606 <HAL_GPIO_Init+0x21e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4f      	ldr	r2, [pc, #316]	; (8001708 <HAL_GPIO_Init+0x320>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d019      	beq.n	8001602 <HAL_GPIO_Init+0x21a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4e      	ldr	r2, [pc, #312]	; (800170c <HAL_GPIO_Init+0x324>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_GPIO_Init+0x216>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4d      	ldr	r2, [pc, #308]	; (8001710 <HAL_GPIO_Init+0x328>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00d      	beq.n	80015fa <HAL_GPIO_Init+0x212>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4c      	ldr	r2, [pc, #304]	; (8001714 <HAL_GPIO_Init+0x32c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d007      	beq.n	80015f6 <HAL_GPIO_Init+0x20e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4b      	ldr	r2, [pc, #300]	; (8001718 <HAL_GPIO_Init+0x330>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d101      	bne.n	80015f2 <HAL_GPIO_Init+0x20a>
 80015ee:	2307      	movs	r3, #7
 80015f0:	e00e      	b.n	8001610 <HAL_GPIO_Init+0x228>
 80015f2:	2308      	movs	r3, #8
 80015f4:	e00c      	b.n	8001610 <HAL_GPIO_Init+0x228>
 80015f6:	2306      	movs	r3, #6
 80015f8:	e00a      	b.n	8001610 <HAL_GPIO_Init+0x228>
 80015fa:	2305      	movs	r3, #5
 80015fc:	e008      	b.n	8001610 <HAL_GPIO_Init+0x228>
 80015fe:	2304      	movs	r3, #4
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x228>
 8001602:	2303      	movs	r3, #3
 8001604:	e004      	b.n	8001610 <HAL_GPIO_Init+0x228>
 8001606:	2302      	movs	r3, #2
 8001608:	e002      	b.n	8001610 <HAL_GPIO_Init+0x228>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_GPIO_Init+0x228>
 800160e:	2300      	movs	r3, #0
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	f002 0203 	and.w	r2, r2, #3
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	4093      	lsls	r3, r2
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001620:	4935      	ldr	r1, [pc, #212]	; (80016f8 <HAL_GPIO_Init+0x310>)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	3302      	adds	r3, #2
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_GPIO_Init+0x334>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001652:	4a32      	ldr	r2, [pc, #200]	; (800171c <HAL_GPIO_Init+0x334>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001658:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_GPIO_Init+0x334>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167c:	4a27      	ldr	r2, [pc, #156]	; (800171c <HAL_GPIO_Init+0x334>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_GPIO_Init+0x334>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016a6:	4a1d      	ldr	r2, [pc, #116]	; (800171c <HAL_GPIO_Init+0x334>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_GPIO_Init+0x334>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <HAL_GPIO_Init+0x334>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3301      	adds	r3, #1
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	2b0f      	cmp	r3, #15
 80016e0:	f67f ae90 	bls.w	8001404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40013800 	.word	0x40013800
 80016fc:	40020000 	.word	0x40020000
 8001700:	40020400 	.word	0x40020400
 8001704:	40020800 	.word	0x40020800
 8001708:	40020c00 	.word	0x40020c00
 800170c:	40021000 	.word	0x40021000
 8001710:	40021400 	.word	0x40021400
 8001714:	40021800 	.word	0x40021800
 8001718:	40021c00 	.word	0x40021c00
 800171c:	40013c00 	.word	0x40013c00

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800173c:	e003      	b.n	8001746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	041a      	lsls	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	619a      	str	r2, [r3, #24]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4013      	ands	r3, r2
 800176a:	041a      	lsls	r2, r3, #16
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43d9      	mvns	r1, r3
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	400b      	ands	r3, r1
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	619a      	str	r2, [r3, #24]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e264      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d075      	beq.n	8001892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017a6:	4ba3      	ldr	r3, [pc, #652]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d00c      	beq.n	80017cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b2:	4ba0      	ldr	r3, [pc, #640]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d112      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017be:	4b9d      	ldr	r3, [pc, #628]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ca:	d10b      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	4b99      	ldr	r3, [pc, #612]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d05b      	beq.n	8001890 <HAL_RCC_OscConfig+0x108>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d157      	bne.n	8001890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e23f      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ec:	d106      	bne.n	80017fc <HAL_RCC_OscConfig+0x74>
 80017ee:	4b91      	ldr	r3, [pc, #580]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a90      	ldr	r2, [pc, #576]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0xb0>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x98>
 8001806:	4b8b      	ldr	r3, [pc, #556]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a8a      	ldr	r2, [pc, #552]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b88      	ldr	r3, [pc, #544]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a87      	ldr	r2, [pc, #540]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xb0>
 8001820:	4b84      	ldr	r3, [pc, #528]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a83      	ldr	r2, [pc, #524]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b81      	ldr	r3, [pc, #516]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a80      	ldr	r2, [pc, #512]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fc90 	bl	8001164 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fc8c 	bl	8001164 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e204      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b76      	ldr	r3, [pc, #472]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xc0>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fc7c 	bl	8001164 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fc78 	bl	8001164 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1f0      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	4b6c      	ldr	r3, [pc, #432]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0xe8>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d063      	beq.n	8001966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800189e:	4b65      	ldr	r3, [pc, #404]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018aa:	4b62      	ldr	r3, [pc, #392]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d11c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b6:	4b5f      	ldr	r3, [pc, #380]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d116      	bne.n	80018f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	4b5c      	ldr	r3, [pc, #368]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x152>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1c4      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4952      	ldr	r1, [pc, #328]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	e03a      	b.n	8001966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <HAL_RCC_OscConfig+0x2b0>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff fc31 	bl	8001164 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff fc2d 	bl	8001164 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1a5      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4940      	ldr	r1, [pc, #256]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <HAL_RCC_OscConfig+0x2b0>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fc10 	bl	8001164 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff fc0c 	bl	8001164 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e184      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d030      	beq.n	80019d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d016      	beq.n	80019a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_RCC_OscConfig+0x2b4>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff fbf0 	bl	8001164 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff fbec 	bl	8001164 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e164      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 800199c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x200>
 80019a6:	e015      	b.n	80019d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a8:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_RCC_OscConfig+0x2b4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fbd9 	bl	8001164 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff fbd5 	bl	8001164 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e14d      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80019ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f0      	bne.n	80019b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80a0 	beq.w	8001b22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10f      	bne.n	8001a12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x2b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d121      	bne.n	8001a62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_RCC_OscConfig+0x2b8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_RCC_OscConfig+0x2b8>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fb9b 	bl	8001164 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	e011      	b.n	8001a56 <HAL_RCC_OscConfig+0x2ce>
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	42470000 	.word	0x42470000
 8001a3c:	42470e80 	.word	0x42470e80
 8001a40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a44:	f7ff fb8e 	bl	8001164 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e106      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b85      	ldr	r3, [pc, #532]	; (8001c6c <HAL_RCC_OscConfig+0x4e4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d106      	bne.n	8001a78 <HAL_RCC_OscConfig+0x2f0>
 8001a6a:	4b81      	ldr	r3, [pc, #516]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	4a80      	ldr	r2, [pc, #512]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6713      	str	r3, [r2, #112]	; 0x70
 8001a76:	e01c      	b.n	8001ab2 <HAL_RCC_OscConfig+0x32a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0x312>
 8001a80:	4b7b      	ldr	r3, [pc, #492]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	4a7a      	ldr	r2, [pc, #488]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8c:	4b78      	ldr	r3, [pc, #480]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a90:	4a77      	ldr	r2, [pc, #476]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6713      	str	r3, [r2, #112]	; 0x70
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x32a>
 8001a9a:	4b75      	ldr	r3, [pc, #468]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	4a74      	ldr	r2, [pc, #464]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa6:	4b72      	ldr	r3, [pc, #456]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aaa:	4a71      	ldr	r2, [pc, #452]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d015      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aba:	f7ff fb53 	bl	8001164 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fb4f 	bl	8001164 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0c5      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	4b65      	ldr	r3, [pc, #404]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ee      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x33a>
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fb3d 	bl	8001164 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff fb39 	bl	8001164 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e0af      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	4b5a      	ldr	r3, [pc, #360]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ee      	bne.n	8001aee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b16:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a55      	ldr	r2, [pc, #340]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 809b 	beq.w	8001c62 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b2c:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d05c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d141      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x4ec>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fb0d 	bl	8001164 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff fb09 	bl	8001164 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e081      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b60:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69da      	ldr	r2, [r3, #28]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	019b      	lsls	r3, r3, #6
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	3b01      	subs	r3, #1
 8001b86:	041b      	lsls	r3, r3, #16
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	061b      	lsls	r3, r3, #24
 8001b90:	4937      	ldr	r1, [pc, #220]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <HAL_RCC_OscConfig+0x4ec>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fae2 	bl	8001164 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff fade 	bl	8001164 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e056      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x41c>
 8001bc2:	e04e      	b.n	8001c62 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_RCC_OscConfig+0x4ec>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff facb 	bl	8001164 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff fac7 	bl	8001164 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e03f      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x44a>
 8001bf0:	e037      	b.n	8001c62 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e032      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <HAL_RCC_OscConfig+0x4e8>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d028      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d121      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d11a      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c2e:	4013      	ands	r3, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d111      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	3b01      	subs	r3, #1
 8001c48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40007000 	.word	0x40007000
 8001c70:	40023800 	.word	0x40023800
 8001c74:	42470060 	.word	0x42470060

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0cc      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b68      	ldr	r3, [pc, #416]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d90c      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b8      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ccc:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce4:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	494d      	ldr	r1, [pc, #308]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d044      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d119      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d36:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e067      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4934      	ldr	r1, [pc, #208]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d68:	f7ff f9fc 	bl	8001164 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff f9f8 	bl	8001164 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e04f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d20c      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e032      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4916      	ldr	r1, [pc, #88]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dfe:	f000 f821 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490a      	ldr	r1, [pc, #40]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f95c 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00
 8001e34:	40023800 	.word	0x40023800
 8001e38:	08002934 	.word	0x08002934
 8001e3c:	20000004 	.word	0x20000004
 8001e40:	20000008 	.word	0x20000008

08001e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	b5b0      	push	{r4, r5, r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	6079      	str	r1, [r7, #4]
 8001e4e:	2100      	movs	r1, #0
 8001e50:	60f9      	str	r1, [r7, #12]
 8001e52:	2100      	movs	r1, #0
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e56:	2100      	movs	r1, #0
 8001e58:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e5a:	4952      	ldr	r1, [pc, #328]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e5c:	6889      	ldr	r1, [r1, #8]
 8001e5e:	f001 010c 	and.w	r1, r1, #12
 8001e62:	2908      	cmp	r1, #8
 8001e64:	d00d      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0x3e>
 8001e66:	2908      	cmp	r1, #8
 8001e68:	f200 8094 	bhi.w	8001f94 <HAL_RCC_GetSysClockFreq+0x150>
 8001e6c:	2900      	cmp	r1, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0x32>
 8001e70:	2904      	cmp	r1, #4
 8001e72:	d003      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x38>
 8001e74:	e08e      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e76:	4b4c      	ldr	r3, [pc, #304]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e78:	60bb      	str	r3, [r7, #8]
       break;
 8001e7a:	e08e      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_RCC_GetSysClockFreq+0x168>)
 8001e7e:	60bb      	str	r3, [r7, #8]
      break;
 8001e80:	e08b      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e82:	4948      	ldr	r1, [pc, #288]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e84:	6849      	ldr	r1, [r1, #4]
 8001e86:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001e8a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e8c:	4945      	ldr	r1, [pc, #276]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e8e:	6849      	ldr	r1, [r1, #4]
 8001e90:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001e94:	2900      	cmp	r1, #0
 8001e96:	d024      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e98:	4942      	ldr	r1, [pc, #264]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e9a:	6849      	ldr	r1, [r1, #4]
 8001e9c:	0989      	lsrs	r1, r1, #6
 8001e9e:	4608      	mov	r0, r1
 8001ea0:	f04f 0100 	mov.w	r1, #0
 8001ea4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ea8:	f04f 0500 	mov.w	r5, #0
 8001eac:	ea00 0204 	and.w	r2, r0, r4
 8001eb0:	ea01 0305 	and.w	r3, r1, r5
 8001eb4:	493d      	ldr	r1, [pc, #244]	; (8001fac <HAL_RCC_GetSysClockFreq+0x168>)
 8001eb6:	fb01 f003 	mul.w	r0, r1, r3
 8001eba:	2100      	movs	r1, #0
 8001ebc:	fb01 f102 	mul.w	r1, r1, r2
 8001ec0:	1844      	adds	r4, r0, r1
 8001ec2:	493a      	ldr	r1, [pc, #232]	; (8001fac <HAL_RCC_GetSysClockFreq+0x168>)
 8001ec4:	fba2 0101 	umull	r0, r1, r2, r1
 8001ec8:	1863      	adds	r3, r4, r1
 8001eca:	4619      	mov	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	f7fe f980 	bl	80001d8 <__aeabi_uldivmod>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4613      	mov	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e04a      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee2:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	099b      	lsrs	r3, r3, #6
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	ea02 0400 	and.w	r4, r2, r0
 8001efa:	ea03 0501 	and.w	r5, r3, r1
 8001efe:	4620      	mov	r0, r4
 8001f00:	4629      	mov	r1, r5
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	014b      	lsls	r3, r1, #5
 8001f0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f10:	0142      	lsls	r2, r0, #5
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	1b00      	subs	r0, r0, r4
 8001f18:	eb61 0105 	sbc.w	r1, r1, r5
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	018b      	lsls	r3, r1, #6
 8001f26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f2a:	0182      	lsls	r2, r0, #6
 8001f2c:	1a12      	subs	r2, r2, r0
 8001f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f32:	f04f 0000 	mov.w	r0, #0
 8001f36:	f04f 0100 	mov.w	r1, #0
 8001f3a:	00d9      	lsls	r1, r3, #3
 8001f3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f40:	00d0      	lsls	r0, r2, #3
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	1912      	adds	r2, r2, r4
 8001f48:	eb45 0303 	adc.w	r3, r5, r3
 8001f4c:	f04f 0000 	mov.w	r0, #0
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	0299      	lsls	r1, r3, #10
 8001f56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f5a:	0290      	lsls	r0, r2, #10
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	f7fe f934 	bl	80001d8 <__aeabi_uldivmod>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4613      	mov	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	3301      	adds	r3, #1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	60bb      	str	r3, [r7, #8]
      break;
 8001f92:	e002      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f96:	60bb      	str	r3, [r7, #8]
      break;
 8001f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	00f42400 	.word	0x00f42400
 8001fac:	017d7840 	.word	0x017d7840

08001fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e041      	b.n	8002046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe ffc8 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3304      	adds	r3, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f000 fa96 	bl	8002520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d001      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e04e      	b.n	8002106 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a23      	ldr	r2, [pc, #140]	; (8002114 <HAL_TIM_Base_Start_IT+0xc4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d022      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002092:	d01d      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <HAL_TIM_Base_Start_IT+0xc8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d018      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_TIM_Base_Start_IT+0xcc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d013      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_TIM_Base_Start_IT+0xd0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00e      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <HAL_TIM_Base_Start_IT+0xd4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d009      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a19      	ldr	r2, [pc, #100]	; (8002128 <HAL_TIM_Base_Start_IT+0xd8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d004      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x80>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a18      	ldr	r2, [pc, #96]	; (800212c <HAL_TIM_Base_Start_IT+0xdc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d111      	bne.n	80020f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d010      	beq.n	8002104 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0201 	orr.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f2:	e007      	b.n	8002104 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40010000 	.word	0x40010000
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800
 8002120:	40000c00 	.word	0x40000c00
 8002124:	40010400 	.word	0x40010400
 8002128:	40014000 	.word	0x40014000
 800212c:	40001800 	.word	0x40001800

08002130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b02      	cmp	r3, #2
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0202 	mvn.w	r2, #2
 800215c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f9b5 	bl	80024e2 <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f9a7 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f9b8 	bl	80024f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b04      	cmp	r3, #4
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0204 	mvn.w	r2, #4
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f98b 	bl	80024e2 <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f97d 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f98e 	bl	80024f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d122      	bne.n	8002234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d11b      	bne.n	8002234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0208 	mvn.w	r2, #8
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2204      	movs	r2, #4
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f961 	bl	80024e2 <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f953 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f964 	bl	80024f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b10      	cmp	r3, #16
 8002240:	d122      	bne.n	8002288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b10      	cmp	r3, #16
 800224e:	d11b      	bne.n	8002288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0210 	mvn.w	r2, #16
 8002258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2208      	movs	r2, #8
 800225e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f937 	bl	80024e2 <HAL_TIM_IC_CaptureCallback>
 8002274:	e005      	b.n	8002282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f929 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f93a 	bl	80024f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0201 	mvn.w	r2, #1
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fdf4 	bl	8000e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	2b80      	cmp	r3, #128	; 0x80
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d107      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fae0 	bl	80028a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d107      	bne.n	800230c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f8ff 	bl	800250a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b20      	cmp	r3, #32
 8002318:	d10e      	bne.n	8002338 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b20      	cmp	r3, #32
 8002326:	d107      	bne.n	8002338 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0220 	mvn.w	r2, #32
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 faaa 	bl	800288c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_TIM_ConfigClockSource+0x1c>
 8002358:	2302      	movs	r3, #2
 800235a:	e0b4      	b.n	80024c6 <HAL_TIM_ConfigClockSource+0x186>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800237a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002382:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002394:	d03e      	beq.n	8002414 <HAL_TIM_ConfigClockSource+0xd4>
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239a:	f200 8087 	bhi.w	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a2:	f000 8086 	beq.w	80024b2 <HAL_TIM_ConfigClockSource+0x172>
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023aa:	d87f      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023ac:	2b70      	cmp	r3, #112	; 0x70
 80023ae:	d01a      	beq.n	80023e6 <HAL_TIM_ConfigClockSource+0xa6>
 80023b0:	2b70      	cmp	r3, #112	; 0x70
 80023b2:	d87b      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023b4:	2b60      	cmp	r3, #96	; 0x60
 80023b6:	d050      	beq.n	800245a <HAL_TIM_ConfigClockSource+0x11a>
 80023b8:	2b60      	cmp	r3, #96	; 0x60
 80023ba:	d877      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023bc:	2b50      	cmp	r3, #80	; 0x50
 80023be:	d03c      	beq.n	800243a <HAL_TIM_ConfigClockSource+0xfa>
 80023c0:	2b50      	cmp	r3, #80	; 0x50
 80023c2:	d873      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d058      	beq.n	800247a <HAL_TIM_ConfigClockSource+0x13a>
 80023c8:	2b40      	cmp	r3, #64	; 0x40
 80023ca:	d86f      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023cc:	2b30      	cmp	r3, #48	; 0x30
 80023ce:	d064      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x15a>
 80023d0:	2b30      	cmp	r3, #48	; 0x30
 80023d2:	d86b      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d060      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x15a>
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d867      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d05c      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x15a>
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d05a      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x15a>
 80023e4:	e062      	b.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6899      	ldr	r1, [r3, #8]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f000 f9ad 	bl	8002754 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002408:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	609a      	str	r2, [r3, #8]
      break;
 8002412:	e04f      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6899      	ldr	r1, [r3, #8]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f000 f996 	bl	8002754 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002436:	609a      	str	r2, [r3, #8]
      break;
 8002438:	e03c      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	461a      	mov	r2, r3
 8002448:	f000 f90a 	bl	8002660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2150      	movs	r1, #80	; 0x50
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f963 	bl	800271e <TIM_ITRx_SetConfig>
      break;
 8002458:	e02c      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	461a      	mov	r2, r3
 8002468:	f000 f929 	bl	80026be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2160      	movs	r1, #96	; 0x60
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f953 	bl	800271e <TIM_ITRx_SetConfig>
      break;
 8002478:	e01c      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	461a      	mov	r2, r3
 8002488:	f000 f8ea 	bl	8002660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2140      	movs	r1, #64	; 0x40
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f943 	bl	800271e <TIM_ITRx_SetConfig>
      break;
 8002498:	e00c      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f000 f93a 	bl	800271e <TIM_ITRx_SetConfig>
      break;
 80024aa:	e003      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      break;
 80024b0:	e000      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a40      	ldr	r2, [pc, #256]	; (8002634 <TIM_Base_SetConfig+0x114>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d013      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253e:	d00f      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a3d      	ldr	r2, [pc, #244]	; (8002638 <TIM_Base_SetConfig+0x118>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00b      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a3c      	ldr	r2, [pc, #240]	; (800263c <TIM_Base_SetConfig+0x11c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a3b      	ldr	r2, [pc, #236]	; (8002640 <TIM_Base_SetConfig+0x120>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <TIM_Base_SetConfig+0x124>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d108      	bne.n	8002572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a2f      	ldr	r2, [pc, #188]	; (8002634 <TIM_Base_SetConfig+0x114>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02b      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002580:	d027      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a2c      	ldr	r2, [pc, #176]	; (8002638 <TIM_Base_SetConfig+0x118>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d023      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a2b      	ldr	r2, [pc, #172]	; (800263c <TIM_Base_SetConfig+0x11c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <TIM_Base_SetConfig+0x120>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01b      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a29      	ldr	r2, [pc, #164]	; (8002644 <TIM_Base_SetConfig+0x124>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d017      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a28      	ldr	r2, [pc, #160]	; (8002648 <TIM_Base_SetConfig+0x128>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a27      	ldr	r2, [pc, #156]	; (800264c <TIM_Base_SetConfig+0x12c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00f      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a26      	ldr	r2, [pc, #152]	; (8002650 <TIM_Base_SetConfig+0x130>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a25      	ldr	r2, [pc, #148]	; (8002654 <TIM_Base_SetConfig+0x134>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a24      	ldr	r2, [pc, #144]	; (8002658 <TIM_Base_SetConfig+0x138>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a23      	ldr	r2, [pc, #140]	; (800265c <TIM_Base_SetConfig+0x13c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d108      	bne.n	80025e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <TIM_Base_SetConfig+0x114>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d003      	beq.n	8002618 <TIM_Base_SetConfig+0xf8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a0c      	ldr	r2, [pc, #48]	; (8002644 <TIM_Base_SetConfig+0x124>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d103      	bne.n	8002620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	615a      	str	r2, [r3, #20]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40010000 	.word	0x40010000
 8002638:	40000400 	.word	0x40000400
 800263c:	40000800 	.word	0x40000800
 8002640:	40000c00 	.word	0x40000c00
 8002644:	40010400 	.word	0x40010400
 8002648:	40014000 	.word	0x40014000
 800264c:	40014400 	.word	0x40014400
 8002650:	40014800 	.word	0x40014800
 8002654:	40001800 	.word	0x40001800
 8002658:	40001c00 	.word	0x40001c00
 800265c:	40002000 	.word	0x40002000

08002660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	f023 0201 	bic.w	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800268a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f023 030a 	bic.w	r3, r3, #10
 800269c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	621a      	str	r2, [r3, #32]
}
 80026b2:	bf00      	nop
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026be:	b480      	push	{r7}
 80026c0:	b087      	sub	sp, #28
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f023 0210 	bic.w	r2, r3, #16
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	031b      	lsls	r3, r3, #12
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	621a      	str	r2, [r3, #32]
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	f043 0307 	orr.w	r3, r3, #7
 8002740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	609a      	str	r2, [r3, #8]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800276e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	021a      	lsls	r2, r3, #8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	431a      	orrs	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4313      	orrs	r3, r2
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	609a      	str	r2, [r3, #8]
}
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e05a      	b.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a21      	ldr	r2, [pc, #132]	; (8002870 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d022      	beq.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d01d      	beq.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d018      	beq.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1a      	ldr	r2, [pc, #104]	; (800287c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00e      	beq.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a18      	ldr	r2, [pc, #96]	; (8002880 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a17      	ldr	r2, [pc, #92]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a15      	ldr	r2, [pc, #84]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10c      	bne.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800283c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	4313      	orrs	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40010000 	.word	0x40010000
 8002874:	40000400 	.word	0x40000400
 8002878:	40000800 	.word	0x40000800
 800287c:	40000c00 	.word	0x40000c00
 8002880:	40010400 	.word	0x40010400
 8002884:	40014000 	.word	0x40014000
 8002888:	40001800 	.word	0x40001800

0800288c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <__libc_init_array>:
 80028b4:	b570      	push	{r4, r5, r6, lr}
 80028b6:	4d0d      	ldr	r5, [pc, #52]	; (80028ec <__libc_init_array+0x38>)
 80028b8:	4c0d      	ldr	r4, [pc, #52]	; (80028f0 <__libc_init_array+0x3c>)
 80028ba:	1b64      	subs	r4, r4, r5
 80028bc:	10a4      	asrs	r4, r4, #2
 80028be:	2600      	movs	r6, #0
 80028c0:	42a6      	cmp	r6, r4
 80028c2:	d109      	bne.n	80028d8 <__libc_init_array+0x24>
 80028c4:	4d0b      	ldr	r5, [pc, #44]	; (80028f4 <__libc_init_array+0x40>)
 80028c6:	4c0c      	ldr	r4, [pc, #48]	; (80028f8 <__libc_init_array+0x44>)
 80028c8:	f000 f820 	bl	800290c <_init>
 80028cc:	1b64      	subs	r4, r4, r5
 80028ce:	10a4      	asrs	r4, r4, #2
 80028d0:	2600      	movs	r6, #0
 80028d2:	42a6      	cmp	r6, r4
 80028d4:	d105      	bne.n	80028e2 <__libc_init_array+0x2e>
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
 80028d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028dc:	4798      	blx	r3
 80028de:	3601      	adds	r6, #1
 80028e0:	e7ee      	b.n	80028c0 <__libc_init_array+0xc>
 80028e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e6:	4798      	blx	r3
 80028e8:	3601      	adds	r6, #1
 80028ea:	e7f2      	b.n	80028d2 <__libc_init_array+0x1e>
 80028ec:	0800294c 	.word	0x0800294c
 80028f0:	0800294c 	.word	0x0800294c
 80028f4:	0800294c 	.word	0x0800294c
 80028f8:	08002950 	.word	0x08002950

080028fc <memset>:
 80028fc:	4402      	add	r2, r0
 80028fe:	4603      	mov	r3, r0
 8002900:	4293      	cmp	r3, r2
 8002902:	d100      	bne.n	8002906 <memset+0xa>
 8002904:	4770      	bx	lr
 8002906:	f803 1b01 	strb.w	r1, [r3], #1
 800290a:	e7f9      	b.n	8002900 <memset+0x4>

0800290c <_init>:
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290e:	bf00      	nop
 8002910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002912:	bc08      	pop	{r3}
 8002914:	469e      	mov	lr, r3
 8002916:	4770      	bx	lr

08002918 <_fini>:
 8002918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291a:	bf00      	nop
 800291c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800291e:	bc08      	pop	{r3}
 8002920:	469e      	mov	lr, r3
 8002922:	4770      	bx	lr
